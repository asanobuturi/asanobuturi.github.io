<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数学 on 浅野学園物理部</title><link>https://asanobuturi.github.io/blog/tags/%E6%95%B0%E5%AD%A6/</link><description>Recent content in 数学 on 浅野学園物理部</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 20 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://asanobuturi.github.io/blog/tags/%E6%95%B0%E5%AD%A6/index.xml" rel="self" type="application/rss+xml"/><item><title>「ただし同じ記号を二度用いてはならない」とは</title><link>https://asanobuturi.github.io/blog/20221220/</link><pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20221220/</guid><description>ただし同じ記号を二度用いてはならない 問題 それぞれの空欄に最も適当なものを次の群から選びなさい。
入試などではこんな問題をよく見かけると思います。そしてこのような問題のうち、空欄の数以上に選択肢が用意されている問題では、
ただし同じ記号を二度用いてはならない。
という制約がされていることがあります。これはいったい何のためなのでしょうか。ひねくれずに考えるなら、「答えやすくするため」なのでしょう。確かにこのような制約は時にヒントとなりえます。 しかしわざわざ禁止しているのだから、「あてずっぽうでは点数を稼ぎにくくするため」なのではないかという気がしてくるものです。もしそうならばその効果はどれほどなのでしょうか。実際に調べてみましょう。 以下では空欄をa個、選択肢をb個、それぞれの空欄を1点の問題（満点がa点）とします。
空欄と選択肢が同じだけある場合 問題を解けずとも点数を取るための最も単純な戦略の一つは、「すべての空欄に同じ記号をいれて1点を確保する」でしょう。当然この場合、期待値は1です。しかしこの場合、それができなくなっています。なので先ほどの予想が正しければ、あてずっぽうの場合の期待値は1未満であると考えられます。 実際に制約を守って回答した場合の期待値を計算してみましょう。例として1つ目の空欄に関して考えてみると、 \[ すべての回答：a!通り \\ 1つ目が正解である回答：(a-1)!通り \]
なので、これをa個の空欄に対して考えると期待値は \[ \frac{(a-1)!}{a!}\times a=\frac{a!}{a!}=1 \]
！？ 予想外に期待値は「すべての空欄に同じ記号をいれて0点を回避」の場合と等しいようです。期待値が同じでもこの場合ではすべて外れれば0点、まぐれですべて当たればa点なので、より運が試されるようになったということでしょうか。
空欄より選択肢が多い場合 空欄より選択肢が多い場合はもう少し複雑なので、より点が取りづらくなるような気がします。この場合では先ほどの「1点確保」ができません。この手法の期待値は、その選択肢がいずれかの空欄に含まれる確率に等しいので \[ \frac{{}_{b-1} C_{a-1}}{{}_b C_{a}}=\frac{(b-1)!}{(a-1)!(b-a)!} \frac{a!(b-a)!}{b!}=\frac{a}{b} \]
です。 次に、制約の中での期待値を求めるために、先ほどと同じように計算してみましょう。 \[ すべての回答：{}_b P_a通り\\1つ目が正解である回答：{}_{b-1} P_{a-1}通り \]
おや&amp;hellip;？このことからa個の空欄での総得点の期待値は \[ \frac{{}_{b-1} P_{a-1}}{{}_b P_a}\times a=\frac{(b-1)!}{(b-a)!}\frac{(b-a)!}{b!}\times a=\frac{a}{b} \]
結局同じでしたね&amp;hellip;
結論 今回の検証で、この制約は紛れもなくヒントなのであるとわかりました。今後はこの制約に感謝しながら問題を解きたいと思います。</description></item><item><title>高校数学で描くマンデルブロ集合</title><link>https://asanobuturi.github.io/blog/20220508/</link><pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20220508/</guid><description>はじめに お久しぶりです。2019年に最後のブログを投稿してから3年以上が経ったようなのですが、当時中学2年だった私もいつの間にか高校三年になってしまいました。物理部がブログではなくTwitterを積極的に使うようになってからは、このウェブサイトも部誌の電子版の公開以外で使うことはほとんどなくなったのです。浅野を卒業する前にもう一度くらいはブログ記事を執筆しておきたいと思い、今回キーボードをたたいています。 前置きはさておき、今回は久しぶり(そりゃそうだろ)に技術的な記事になります。
対象読者 日本の高校一年生相当以上の基本的な数学の知識を有している人。必要な知識を前半部分で解説し、高校一年生、あるいは中学生程度でもある程度は理解できるように書いているつもりです。
加えて、基本的なプログラミングの知識を有している人。今回はJavascriptを使用しますが、for文、変数などの一般的な文法が分かっていればおおよそ意味はつかめると思います。
マンデルブロ集合とは マンデルブロ集合というものを知っていますか？実態はただの複素数の集合※なのですが、よくこのような写真の形でウェブ上に共有されることがあります。
※集合とは 日本では「数学A」で学習する概念。 数やその他さまざまなものの集まりのこと。集合を構成する「要素」は数だけでなく、(たぶん)確率や式であったり、数学以外の分野に集合の考え方を応用すれば「単語」や「情報」であるパターンもある(と思う)。 マンデルブロ集合は、数、そのなかでも複素数の集合である。つまり、マンデルブロ集合の中には(\(-0.2+0.5i\))や(\(0.1-0.3i\))などの様々な複素数が大量に収納されている。(複素数については後程解説します。)
マンデルブロ集合の画像 一部を拡大したマンデルブロ集合の画像 画像出典：Wikimedia Commons(CC BY-SA 3.0)
下の画像は一部を拡大したもの。
このように、マンデルブロ集合をある規則にしたがって画像に落とし込むと、非常に美しい幾何学模様をみせるため、YouTubeをはじめインターネット上にはマンデルブロ集合を描画した映像がたくさん投稿されています。
この記事では、このようなマンデルブロ集合の写真を、高校数学の知識だけで描画することを試みます。なお、今回は上記の写真や映像のようなカラフルな色付けは行いません。
マンデルブロ集合の実態は、以下の漸化式が無限大に発散しないような複素数\(C\)の集まりです。(より正確な定義を後程記載)
\[ \begin {cases} Z_0 = 0\\
Z_{n+1} = {Z_n}^2 + C \end {cases} \]
このように定義されるマンデルブロ集合を構成する各複素数を複素数平面上に黒い点としてプロットしていくと、おおよそ上記の写真のような画像が得られます。
さて、一応ここまで高校数学の用語だけを用いて解説してきましたが、まだ該当範囲を学んでいない人にとってはちんぷんかんぷんだと思いますので、ここから一つ一つ噛み砕いて理解していきましょう。
ここから下は、複素数、複素数平面、漸化式、極限についての基礎知識の解説が続きます。これらを既に理解している方は、「マンデルブロ集合の要素を調べる」の章まで読み飛ばして頂いて構いません。
複素数(数学Ⅱで学習)とは 中学三年で習う平方根(ルート)を思い出してください。\(2\times2=4\)であるとき、\(4\)のルートすなわち\(\sqrt4\)は\(2\)となります。同様に\(3\times3=9\)なので、\(\sqrt9=3\)です。このように、ある数に対して、2乗することでその「ある数」となるような「別のある数」を求めるのがルートの計算です。
なお、\((-2)\times(-2)=4\)でもあるため、正確には\(\sqrt4=\pm2\)となります。また、\(\sqrt2\)などの値もコンピューターなどを使うことでおおよそ\(\pm1.41421356\)という値(近似値)を求めることが出来ます。実際に電卓でこの数を2乗してみれば、約2(1.999999993…くらい)になることが確認できると思います。
虚数の定義 さて、ここで負の数のルートを考えてみます。 \(\sqrt{-1}\)はいくつでしょうか？
\(\sqrt1\)であれば答えは\(\pm1\)、すなわち\(1\)と\(-1\)ですが、2乗して\(-1\)となるような数は存在するのでしょうか？
はい、そんな数は存在しません。正確には、実数(整数、分数&amp;amp;少数、ルートや円周率などの無理数)の中には存在しません。そこで、先ほど2乗して\(2\)になるような、少数で正確に表せない数を\(\sqrt2\)という記号で表したように、2乗して\(-1\)になるような数を\(i\)という記号を用いて考えることになったのです。つまり、\(i^2=-1\)であり、\(\pm i=\sqrt{-1}\)です。このような、2乗して負の数になるような数を、「虚数」と呼びます。
この、\(\pm i =\sqrt{-1}\)で定義される数\(i\)には、「虚数単位」という名前がついています。\(\pm i\)とあるように、この方程式の解はプラスマイナスの2つがありますが、虚数単位はそのどちらか片方のみを表します(計算の途中でプラスとマイナスをごっちゃにして考えなければどちらでも問題ない)。
虚数単位を使うことで、\(\sqrt{-1}\)だけでなく負の数のルートをなんでも表すことが出来るようになります。
例えば\(\sqrt{-5}\)は\(\sqrt{-5}=\sqrt{-1}\times\sqrt5\)と書き換えられますから、\(\sqrt{-5}=\pm\sqrt5i\)です。同様に\(\sqrt{-4}=\pm2i\)、\(\sqrt{-12}=\pm2\sqrt3i\)という風に表すことが可能です。
二次方程式の解の公式で、\(x^2+bx+c=0\)の解\(x=\frac{-b\pm\sqrt{b^2-4ac}}{2ac}\)のルートの中身\((b^2-4ac)\)が負の数になると「この二次方程式は実数解をもたない」だと言ったり、正の場合は「異なる実数解を2つもつ」というフレーズが出てきたりするように、ことあるごとに実数解という面倒な言葉を使うのは、ルートの中身が負の数であった場合には虚数解(複素数解)があるということの裏返しだとも考えられますね。
複素数の定義 先ほど定義した虚数単位\(i\)と2つの実数\(a,b\)を用いて、\[Z = a+bi\]と表すことの出来る数を「複素数」と呼びます。例えば\(3+4i\)という風に表される数のことです。
「\(5\)」のような普通の実数も、\(a=5,b=0\)を代入してみれば\(Z=5+0i=5\)と表せるので、複素数の一種と考えることが出来ます。逆に「\(\sqrt{-25}\)」のような虚数(「純虚数」と呼びます)も、\(Z=0+5i=5i\)と表せるので当然複素数の一部です。
ちなみに、このときに\(a\)の項を「実部」、\(bi\)の項を「虚部」と呼ぶことがあるので覚えておきましょう。
今までに出てきたいろいろな数のカテゴリー(体系)をまとめてみました。</description></item></channel></rss>