<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>トップページ on 浅野学園物理部</title><link>https://asanobuturi.github.io/</link><description>Recent content in トップページ on 浅野学園物理部</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 13 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://asanobuturi.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>日本情報オリンピック（JOI）参加記</title><link>https://asanobuturi.github.io/blog/20240313/</link><pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20240313/</guid><description>情報オリンピックの概要 日本情報オリンピックは高二までの日本一の競技プログラマーを決める大会です。 一次予選、二次予選、本選、春季トレーニングとあり、春季トレーニングの上位４名が国際情報オリンピックに出場できるようです。
競技プログラミングというのは、ある問題が与えられその問題を解決するプログラムをできるだけ早く作成し、提出する競技です。 例えば、
1 ２つの文字列 S , T が与えられる。文字列 S の順序を並び替えて文字列 T と等しくできるならば Yes できないならば No を出力せよ といったものです。プログラミングの基本的な知識やアルゴリズムの知識、そしてそれらを正しく扱えるかが試されます。
１次予選について 一次予選は四則演算や条件、繰り返し等を正しく扱えるかが試されます。一次予選は３回行われ、どれか一つのコンテストで条件を満たせば二次予選へ進めます。 参加者の半分以上が１次予選を通過するようです。
２次予選について ２次予選からはデータ構造やアルゴリズムを扱う力が必要になってきます。また、二次予選以降は問題に、条件が小さくなった小課題いくつか設定され、問題が解けなくとも、小課題をクリアすればその分の部分点が与えられます。 ここで参加者の１割程度にまで絞られます。
本選について 本選は二日間かけて行われます。１日目は開会式やプラクティス、交流会などが行われ、２日目に本選競技とその解説が行われます。
一次予選、二次予選は AtCoder というサイト上で行われますが、本選からは joi 独自のサイト上で行われます。また、使用できるプログラミング言語も、一次予選や二次予選は幅広い中から得意なものを選んで使用することができましたが、本選は C++ しか使用できません。扱う数値や要素数が大きくなり、難易度が大きく上がります。本選の上位３０名が春季トレーニングに参加できます。
本選参加までにやったこと AtCoder というサイトで毎週土曜日に開催される AtCoder Beginner Contest に参加したり、同サイト上で公開されている JOI の過去問を解いたりしました。またQiitaというサイトでアルゴリズムについての解説等を書いている方々がいるので、それを読んで学習したりしました。
結果 一次予選は３回のうちすべて参加し、すべて満点でした。
二次予選は五問中三問が100点、４問目が小課題１のみクリアし 317 点でした。
本選は、１問目は解けたのですが、２問目でダイクストラ法を使って解くところを幅優先探索を使ってしまったり、オーバーフローを見落としていたりしてつまずき、100点でした。
感想 元々競技プログラミングは、Arduinoのプログラミングが上達するかもと考え始めました。日本情報オリンピックへの2回目の参加で、前回は2次予選で敗退してしまいましたが、この1年間勉強し、本戦出場を果たすことができ、自己の成長を実感できました。残念ながら入賞とはなりませんでしたが、情報オリンピックを通じてプログラミングのスキルが大きく向上し、様々な新しいアルゴリズムを習得することができました。高校2年生までが情報オリンピックへの参加資格であるため、これが最後の機会でしたが、同世代のトップ選手と交流できたことは、貴重な経験でした。大学進学後は、ICPCにも挑戦していきたいと思っており、この経験を無駄にせずに、精進していきたいと思います。</description></item><item><title>T-STEAM:Pro 2022 総合、競技部門で優勝しました</title><link>https://asanobuturi.github.io/blog/20230313/</link><pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20230313/</guid><description>前置き どうも高一の平部員です。
3月13日に行われた豊島岡女子学園が主催する T-STEAM:Pro 2022 ~MyoElectric~ において我々APC(浅野学園物理部)が総合、競技部門で優勝しました！
今年の T-STEAM:Pro は「筋電義手を作成する」というテーマで行われ、APC(浅野学園物理部)が見事総合、競技部門で優勝しました。 期末考査の勉強時間を削った甲斐がありました。
感想 私たちのチームは顧問の先生の都合で、本番当日に会場で実演をすることができなかったので事前に撮影した動画で競技に参加することになりました。 YouTube Liveで競技の様子を見ていると本番でトラブルになっているチームが多く、勿体ないなと感じました。 私たちは動画撮影の2時間ほど前に集まり、そこで1時間ほど本番に近い状況で練習したのですが、それがかなり功を奏したのだと思います。
作った機体を紹介する動画では面白いアイデアが多く、それぞれ機体について詳しく説明されていて参考になる部分が多かったです。 自分たちの紹介動画も、もっと時間をかけて作ればよかったなと思っています。
また、東京電機大学の浅沼さんの研究生活についての講義もとても参考になりました。
最後に ここ数年間、浅野学園の理科部の中で物理部だけ実績がないという状態が続いていたので実績を作ることができてよかったです(?)
では、また。
(制作した機体の詳細について後日追記する予定です)</description></item><item><title>Kodi(LibreELEC)をセットアップする</title><link>https://asanobuturi.github.io/blog/20230223/</link><pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20230223/</guid><description>実質前回の続きです。
物理部には倉庫に保管されているだけのTVが２つ(片方は壊れている)あり、使われるのは5,6月ごろに行われる体験入部のときに極稀に使われるレベルです。去年、一昨年はTVを使わずに教室に備え付けのプロジェクターを使用する始末でした。
そのTVを活用しようと、最近情報科から賜った全く活用されていないOptiPlex 780(コイツとは違う)にLibreELECをインストールし、活用することにしました。
インストール LibreELCのダウンロードページからPC向けの&amp;quot;Generic PC (no NVIDIA support)&amp;ldquo;をダウンロードし、Etcherを使用して書き込みます。
サーバーに接続 PCからサーバーに転送、それをKodiで再生したいと思ったので、サーバーに接続してみることにしました。
左のメニューの[Pictures]からファイルをブラウズし、[Add pictures&amp;hellip;]を押して開くウィンドウの右の[Browse]を押すことで共有に接続する画面が出ます。今回Windows serverでSMBでLibreELECという名前の共有を作成しておきましたので、一番下の[Add network location&amp;hellip;]を押し、各種設定をします。
サーバーのIPは192.168.0.90なので192.168.0.90を入力する。ユーザー名とパスワードも入力する。
そして[OK]を押して共有を作成、使用したい共有を選択して[OK]を押し、ロケーションの名前を決めます。
今回は名前をLibreELECとした。
スピーカー なぜか音がOptiPlex内蔵のよわよわスピーカーからしか出なく、音量MAXでも3Dプリンターが隣で稼働しているだけで聞こえにくくなってしまう。これは如何なものかと思ったので受験勉強に来た高三を拉致してスピーカーのセットアップを行わせた。だが、電源のノイズが酷く使い物にならなかった。
ノイズがなければ最高であった。
終わりに DVD再生も可能でなので試験が終わったときにでも映画を部員と見たいと思います。
この映画おすすめですよ。https://eiga.com/movie/78149/</description></item><item><title>ルーターをモバイルWiFiに接続する</title><link>https://asanobuturi.github.io/blog/20230222/</link><pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20230222/</guid><description>モバイルWiFiをルーターと接続する必要があったのですが、ネットワーク素人の私にはNATコンバータなんて知識はなかったので、そのための備忘録として残しておきます。
物理部には部費で買った楽天ポケットWiFiを使用しており、これは部員の生命線となっています。
そして物理部にはもう一つネットワークがあり、それがTP-LinkのAX4800というルーターを頂点とする部内ネットワークです。ここのサーバーなどがこのネットワークに属しており、ファイル共有などに使用しています。
そして部員はどちらのネットワークを使用するでしょうか。もちろん前者です。インターネットがつながっていないネットワークなんて誰も使いません。
普通にモバイルWiFiから生えてるLANをルータに挿せばいいのではと思ったのですが、なんとモバイルWiFiから生えてるのはUSBです。これにはLANも刺さりません。1無線→有線の変換をどうにか中継機を使わずにやろうと必死にググった結果、iptablesというものを利用しポートフォワーディングすることでモバイルWiFiと接続できるということを知りました。これはやらないわけには行かないと思いましたので早速やることにしました。
環境 ラズパイ:Raspberry pi 4 8GB
ルーター:AX4800
ポケットWiFi:楽天
ポケットWiFiをeth1に、ルーターをeth0に接続。eth1を上流とする。
IPの固定 nanoなりなんなりで/etc/dhcpcd.confに以下の内容を追記する。
1 2 3 4 5 6 7 8 9 10 11 # ... interface eth1 static routers=192.168.0.1 static domain_name_servers=192.168.0.1 denyinterfaces eth0 interface eth0 static ip_address=192.168.20.1/24 static routers=0.0.0.0 static domain_name_servers=8.8.8.8 ラズパイのeth1はDHCPに頼ることにした。これはラズパイへのSSH等での接続の際に面倒になるので悪手であるが、二度とSSHで接続する必要が無いと信じてIPの固定をサボった。
eth0のIPは適当に192.168.20.xxxにした。20の部分はすきに変えても問題はない。dnsmasqというdnsサーバーのソフトウェアのインストールがどうしても上手くいかなかったため、dnsmasqをインストールしてDNSサーバーを走らせるのではなくGoogle Public DNSに頼ることにしたが、ここにせラズパイで名前解決が必要になる状況がないはずなので一応として8.8.8.8を設定した。ここも1.1.1.1(Cloudflare)などお好みのモノを使っていただいて構わない。
以上の操作終了後、dhcpcdを再起動させ設定を適用させる。
1 sudo systemctl restart dhcpcd DHCPサーバーの設定 /etc/dhcp/dhcpd.confの
1 2 option domain-name &amp;#34;example.org&amp;#34;; option domain-name-servers ns1.example.org, ns2.example.org; の2つをコメントアウトし、
1 #authoritative; をコメントから外すことで正当なDHCPサーバーであることを示します。
そして以下を追記します。</description></item><item><title>ブログ記事の追加の仕方</title><link>https://asanobuturi.github.io/edit/blog/</link><pubDate>Sun, 25 Dec 2022 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/edit/blog/</guid><description>ブログ記事の執筆の仕方 まず、書き上げた原稿(index.mdにリネームしてください)を/content/blog/20080801/index.mdのように/content/blog/&amp;lt;日付&amp;gt;/下に配置します。 その後、画像ファイルなどを同じディレクトリに配置して下さい。
パラメータの設定 最後に、配置したファイルを開き、ファイルの最上部に
1 2 3 --- //ここにオプションを追記していく --- を追記します。
以下にオプションの一覧を示すので、それを参考に追記していってください。
必須 タイトル 例:
1 title: &amp;#34;物理部の幽霊部員とゲームの相関&amp;#34; このオプションはページのタイトル、一覧ページでの見出しに使用されます。
日付 例:
1 date: 2008-08-01 このオプションはページの日付、一覧ページでの並び替えに使用されます。
説明 例:
1 desc: &amp;#34;他人の金で食う焼肉は美味い&amp;#34; このオプションはOGPの説明、一覧ページでの説明に使用されます。
著者 例:
1 author: &amp;#34;フクブチョー&amp;#34; このオプションはページの著者、一覧ページでの著者に使用されます。
タグ、カテゴリ 例:
1 2 categories: [&amp;#34;技術記事&amp;#34;] tags: [&amp;#34;AI&amp;#34;,&amp;#34;ChatGPT&amp;#34;] このオプションはページのタグやカテゴリ、一覧ページでのタグの表示やソートに使用されます。
任意 head 例:
1 head: &amp;#34;&amp;lt;styles&amp;gt;* { display: none; }&amp;lt;/styles&amp;gt;&amp;#34; このオプションは&amp;lt;head&amp;gt;要素の中に追加で要素を挿入したい場合に使用します。
最終更新日 例:
1 lastmod: 2022-08-01 このオプションはページの最終更新の日付、一覧ページでの最終更新の日付に使用されます。ページを更新した場合、これを書くべきでしょう。
エイリアス 例:
1 aliases: [&amp;#34;/apc/index.html&amp;#34;] このオプションは設定したURLにアクセスした場合にページにリダイレクトするファイルを生成します。</description></item><item><title>「ただし同じ記号を二度用いてはならない」とは</title><link>https://asanobuturi.github.io/blog/20221220/</link><pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20221220/</guid><description>ただし同じ記号を二度用いてはならない 問題 それぞれの空欄に最も適当なものを次の群から選びなさい。
入試などではこんな問題をよく見かけると思います。そしてこのような問題のうち、空欄の数以上に選択肢が用意されている問題では、
ただし同じ記号を二度用いてはならない。
という制約がされていることがあります。これはいったい何のためなのでしょうか。ひねくれずに考えるなら、「答えやすくするため」なのでしょう。確かにこのような制約は時にヒントとなりえます。 しかしわざわざ禁止しているのだから、「あてずっぽうでは点数を稼ぎにくくするため」なのではないかという気がしてくるものです。もしそうならばその効果はどれほどなのでしょうか。実際に調べてみましょう。 以下では空欄をa個、選択肢をb個、それぞれの空欄を1点の問題（満点がa点）とします。
空欄と選択肢が同じだけある場合 問題を解けずとも点数を取るための最も単純な戦略の一つは、「すべての空欄に同じ記号をいれて1点を確保する」でしょう。当然この場合、期待値は1です。しかしこの場合、それができなくなっています。なので先ほどの予想が正しければ、あてずっぽうの場合の期待値は1未満であると考えられます。 実際に制約を守って回答した場合の期待値を計算してみましょう。例として1つ目の空欄に関して考えてみると、 $$ すべての回答：a!通り \ 1つ目が正解である回答：(a-1)!通り $$ なので、これをa個の空欄に対して考えると期待値は $$ \frac{(a-1)!}{a!}\times a=\frac{a!}{a!}=1 $$ ！？ 予想外に期待値は「すべての空欄に同じ記号をいれて0点を回避」の場合と等しいようです。期待値が同じでもこの場合ではすべて外れれば0点、まぐれですべて当たればa点なので、より運が試されるようになったということでしょうか。
空欄より選択肢が多い場合 空欄より選択肢が多い場合はもう少し複雑なので、より点が取りづらくなるような気がします。この場合では先ほどの「1点確保」ができません。この手法の期待値は、その選択肢がいずれかの空欄に含まれる確率に等しいので $$ \frac{{}{b-1} C{a-1}}{{}b C{a}}=\frac{(b-1)!}{(a-1)!(b-a)!} \frac{a!(b-a)!}{b!}=\frac{a}{b} $$ です。 次に、制約の中での期待値を求めるために、先ほどと同じように計算してみましょう。 $$ すべての回答：{}b P_a通り \ 1つ目が正解である回答：{}{b-1} P_{a-1}通り $$ おや&amp;hellip;？このことからa個の空欄での総得点の期待値は $$ \frac{{}{b-1} P{a-1}}{{}_b P_a}\times a=\frac{(b-1)!}{(b-a)!}\frac{(b-a)!}{b!}\times a=\frac{a}{b} $$ 結局同じでしたね&amp;hellip;
結論 今回の検証で、この制約は紛れもなくヒントなのであるとわかりました。今後はこの制約に感謝しながら問題を解きたいと思います。</description></item><item><title>話題のアニメ声合成AI「MoeGoe」を使ってみよう</title><link>https://asanobuturi.github.io/blog/20221106/</link><pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20221106/</guid><description>ツイッターで、最近新しく公開された音声合成AI「MoeGoe」が話題になっていたので、試してみました。
MoeGoeとは まずはこちらをご覧ください。
なにやら中国の方が作られた音声合成AI「MoeGoe」の2891人の日本アニメキャラの音声モデルが公開されてしまった！！Hugging Faceでデモが試せる！早速まどマギの５人に喋ってもらった！！うわうわうわ！ヤバいよヤバい本当にヤバいよコレはヤバい！！　https://t.co/wzHJdwEvr7 pic.twitter.com/EFgUId9qpd
&amp;mdash; うみゆき@AI研究 (@umiyuki_ai) November 5, 2022 MoeGoeは、最新のアニメ声合成AIです。名称は日本語の「萌え声」が由来だと思われますが、開発者は中国人の方のようです。GitHub及びHuggingFaceでソースコードや学習済みモデルなどが配布されており、誰でも試すことができます。学習済みモデルに関しては、商用利用は固く禁止されています。
技術的には、昨年韓国で開発された音声合成技術の「VITS」を応用したものになっているようです。VITSは今年初めごろに日本でも話題を呼び、複数の日本語による実装レポートもWEB上で発表されました。(Qiita「【機械学習】VITSでアニメ声へ変換できるボイスチェンジャー&amp;amp;読み上げ器を作った話」など)
VITSの仕組みについては一応英語の論文があるので、そちらをご覧ください。15ページ程度ですが私には読めません。(https://arxiv.org/abs/2106.06103)
また、学習に際しては、アニメのセリフを中心に多くの音声をデータベース化し配信しているウェブサイト「VoiStock」などから収集したデータを一部のモデルで使用しているとのことです。NovelAIがStableDiffusionベースのアニメイラスト生成AIをリリースした際、学習に使用したデータがイラストの無断転載サイトから入手したものであったことがネット上で非難の対象になりましたが、このサイトについても著作権周りのことは少し気がかりです。
追記：VoiStock社社長の福井氏によると、「15秒未満の音声には著作権利は発生しないので問題ない」とのこと(引用元記事)。文化庁HPの「著作物が自由に使える場合」の記事もご覧ください。法律についての判断は読者各位に委ねます。
作者のCjangCjenghさんがビリビリ動画に公開している紹介動画も併せてご覧ください。(https://www.bilibili.com/video/BV1P8411Y7v5/)
MoeGoeを試す方法3つ MoeGoeは現在、GitHubで公開されているプログラムのほか、HuggingFace上のオンラインデモページ、Microsoft Azure上に構築された合成済み音声を返すAPIとそれを利用したAndroid向けアプリなどが主にリリースされています。
とりあえず試してみるだけであれば、すぐにブラウザから使用することができるHuggingFace版を試すのが良いでしょう。Androidユーザーの場合はアプリ版も有用です。以下にリンクを記載しています。
HuggingFaceのデモページ(ブラウザ版、PC・スマホ等対応) Android版アプリ(Google Play) この記事では、せっかくなのでGitHubで公開されているものを実際に手元のパソコンで実行することを試みます。(といってもめちゃくちゃ簡単です)
MoeGoeをローカル環境(自分のパソコン)で実行しよう ※下記のソフトウェアを使用して発生したいかなる問題についても、私達は責任を負いかねます。
現在、MoeGoeのプログラムはWindows用のものしか配布されていないので、実行にはWindowsパソコンが必要です。実装自体はPythonですので、技術的にはMac、Linux等でも実行出来ると思われます(GUIアプリを除く)。
また、7-Zip形式の圧縮ファイルを解凍できるソフトウェアが何かしら必要です。7-Zipをインストールしておけば問題ないでしょう。
Windowsパソコンさえ用意できれば、実行ファイルは全て完全にexeファイルにまとめられているので、ソースコードのビルドなどに怖気づく必要は全くありません(私はexeファイルがあるのに気づかず、プログラムを地道にビルドしようとしてVisualStudioの依存関係不足で時間を溶かされました)。
以下、手順を示します。
MoeGoeの実行ファイルをダウンロード まずはMoeGoeのGitHubレポジトリにあるReleasesページをブラウザで開き、最新のMoeGoeの実行ファイル(exeファイル)をダウンロードします。この記事の執筆時点で最新版はVer.3.0.0でした。「MoeGoe.7z」と書かれているファイルをダウンロードし解凍してください。
MoeGoeのReleasesページ：https://github.com/CjangCjengh/MoeGoe/releases
便利なMoeGoeのGUIアプリをダウンロード このファイルだけでも実行することは可能ですが、コマンドライン上での操作となり不便ですので、GUIアプリも続けてダウンロードします。MoeGoe GUIのReleasesページから、最新の「MoeGoe_GUI.exe」をダウンロードします。先ほど解凍したMoeGoeのフォルダーの中に入れておくのが便利ではないでしょうか。
MoeGoe GUIのReleasesページ：https://github.com/CjangCjengh/MoeGoe_GUI/releases
学習済みモデルのダウンロード 最後に、各キャラクターのボイスを学習した学習済みモデルをダウンロードします。GitHubページから好きな物を選んで、それぞれ「Config File」と「Model」を両方ダウンロードしてください。私はMoeGoeのフォルダー内に「models」というフォルダーを作成し、その中に配置しましたが、ファイルがどこにあってもあとでその場所を適宜指定するだけなので問題ありません。
複数のモデルをダウンロードする場合は、以下のように適宜分かりやすいように名前を変更しておいた方が無難です。
モデルごとに対応している言語が異なっているので、ダウンロードリンクの上に書かれている対応言語を確認してください。中には日本語非対応のモデルもいくつかあります。
「ゼロの使い魔」や「ToLoveるダークネス」など絶妙に古いアニメのモデルが多いです。開発者の推しなのか、ノベルゲームメーカー「ゆずソフト」のキャラクターのモデルがなかなか充実しています。
また、下部にあるVoistockモデルは、先述のアニメ音声収集サイトから大量のデータベース化された音声を収集して学習した大型モデルで、3000人弱のキャラ(海外版声優と日本語版声優・同じ声優の演じる別キャラなどの重複はあるとみられる)の音声を学習しているモデルです。これが事実上の標準モデルでしょうか。日本語以外に英語、韓国語、中国語にも対応しています。
MoeGoeの学習済みモデルの配布ページ：https://github.com/CjangCjengh/TTSModels
実際に動かす 全ての必要ファイルのダウンロードが終わったところで、実際に音声合成を試してみましょう。
MoeGoe_GUI.exeを実行します。
このような画面が起動するので、それぞれのメニューについて、上から順に、以下のファイルを指定します。
「打开文件」：「ファイルを開く」の意。このボタンをクリックして、先ほど解凍したフォルダーの中にある「MoeGoe.exe」のファイルを指定する。 「VITS」「HuBERT-VITS」「W2V2-VITS」のメニュー：AIモデルの種類を指定する。MoeGoeが現在公開している学習済みモデルのほとんどがVITSなので、基本的にはVITSを指定しておけば問題ない。モデルをダウンロードしたページに、そのモデルがVITSなのか、HuBERT-VITSなのかといったことが書いてあるので確認する。 「打开模型」：「モデルを開く」の意。このボタンをクリックして、使いたいモデルの.pthファイルを指定する。 「打开配置」：「設定を開く」の意。このボタンをクリックして、先ほど指定したモデルに対応するconfig.jsonファイルを指定する。 モデルを設定出来たら、「文本」の画面に喋らせたい文章の内容を入力し、「说话人」に表示されるリストから、喋らせたいキャラクターを選択します。
最後に、保存ボタンをクリックし、保存先を指定すると、合成された音声が保存されます。「重新合成」は上書き保存、「删除」は削除、「播放」は保存した音声の再生、「停止」は再生中の音声の停止です。
また、一部の複数言語に対応したモデルを使用する際には、[JA]こんにちは[JA]や[ZH]你好[ZH]のように、中括弧で言語を示す必要があります。日本語はJA、中国語はZH、韓国語はKO、英語はENです。
設定はこのようになります。MoeGoe_GUIのアプリを日本語化してみたのですが、あとでMoeGoe_GUIのソースコードのライセンスが不明なことに気づき、公開はしていません。MoeGoe本体はMITライセンスだったので、いつかMoeGoe_GUIのライセンスが更新されたら、日本語化したものをGitHub上で公開するかもしれません。(ちなみに、「文章を消去」はおそらく誤訳で、発音・アクセント・イントネーションの手動設定？が正しい)
追記：5chユーザーの方が翻訳したバージョンが配布されているようですので、今後もこちらから配布を行う事は致しません。
合成した音声は載せません 今の段階では権利関係があまりに不透明すぎると思ったため。
代わりに、TwitterやYouTube、ビリビリ動画にあるおすすめの動画をいくつかご紹介します。
包含2890名动画角色的VITS语音合成模型(2980人のアニメキャラの声を搭載したVITS音声合成モデル) - ビリビリ動画：冒頭で紹介した、作者のCjangCjenghさんの動画です。58秒ごろから、合成音声のサンプルが流れます。 綾地寧々の声を作ってみた - YouTube：同じく作者のCjangCjenghさんがYouTubeに公開している動画です。ビリビリ動画よりも視聴ハードルが低いので、YouTubeじゃないと見れないという場合にはこちらがおすすめです。ただし、少し古いバージョンの合成システムを使用しているものと思われます。 日本語Ｎ１聴解問題 - YouTube：こちらも作者のCjangCjenghさんがYouTubeに公開している動画です。日本語検定1級のリスニング問題を萌え声で再現しています。 MoeGoeのボイチェン(halfmony氏) - Twitter ：MoeGoe特有のイントネーションの弱さは、適切に発音された音声にボイスチェンジャーをかけることで改善できそう。 感想 音声合成のクオリティは総じて高く、VITSの技術を応用した製品の実用化が待たれます。</description></item><item><title>Windows 11にアップグレードして3ヶ月経った感想</title><link>https://asanobuturi.github.io/blog/20221018/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20221018/</guid><description>あいさつ こんにちは。中２の杉本です。なぜか副部長になりました。初日の朝は豪雨に見舞われた打越祭ですが、無事(?)開催できました。ご来場してくださった方々、差し入れをくださったOBの方々（差し入れは顧問が美味しくいただきました）、本来ならば文化祭の仕事はしないはずなのに働いてくれた中１に、この場を借りて感謝いたします。ちなみに僕は初日の朝、シフトの時間が来るまで靴下を乾かし続けていました。
本題 ※この記事は感想を書いてる。インストールの方法などは書いていない。
なぜWindows 11にアップグレードしようと思ったか。 去年の8月頃に、Windows 11（以下、Win11と表記）がWindows Insider ProgramのDevチャネルで公開が開始された際、友達が「朝起きたらWin11になっていた」と言っていてとても苦労していた。Win11の記事を見たり友達の話を聞いてみたろころあまり好みのUIでもなく、Androidアプリケーションが使える機能も然程魅力的には思えず、そもそもMacからWindows 10（以下、Win10と表記）の移行がほとんど完了して、スタートメニューのパネルもかなりカスタマイズして自分好みにした直後に、パネルシステムを廃止した新OSが出てきたのである。発狂。まぁ実際発狂はしなかったが、当分アップグレードはしないつもりでいた。
そうは思ったものの、ちょっとだけ試用してみたいと思い、128GBの増設したSSDににプレビュー版Win11をインストールすることにした。
PC正常性チェックという、Microsoftが公式で出しているWin11のインストールが可能か調べるツールがある。今でこそなぜインストールできないかが表示されるが、昔はインストールの可否しか出力されず、置き物と化していました。（その後、一度MicrosoftはPC正常性チェックの公開を一時停止。）そこでなぜできないかを困っていたところ、&amp;ldquo;WhyNotWin11&amp;quot;というWin11のインストール（アップグレード）できない理由を教えてくれるアプリケーションを見つけます。WhyNotWin11によるとセキュアブートとTPM2.0が確認されないとのことだった。それらの問題を修正後に、Win10のインストールUSBを作成してWin10をインストール、Win11にアップグレードしました。 1
色々使ってみたが、うん、何も変わってない。最初期の頃は確かUIが変わっただけでほとんど中身は変わっておらず（今もそうと言えばそうだが）、ただセキュリティ強化されただけだった。あと、Devチャネルだったこともあり、すぐグラッシュしてしまうのだが、普通ブルスクが出るところ、グリーンスクリーンが出てきたのには驚いた。何だったのだろうか。まぁ大した面白みなかったため増設したSSDはWin11用からLinux用に変えた。
その後、Win11のことなんて忘れてWin10でWSLにデスクトップ環境をインストールして遊んでいたら、LinuxのGUIアプリケーションを動かせる&amp;quot;WSLg&amp;quot;というものがあることを知り、それがWin11でしか動かせないこと2を知り、仕方ないので春休みぐらいにアップグレードしたは良いものの、強烈に使いにくく、すぐWin10に戻しましたが、中２の夏休みに入った頃にいい感じのフリーソフトのアプリケーションランチャーとWin11のUIをWin10に戻せる&amp;quot;Explorer patcher&amp;quot;というものも見つけたこともあり、これらを使ってだんだんWin11に慣れていこうということにし、アップグレードすることを決めた。
アップグレードしてみよう さぁ！アップグレードだ！って思い立ったのは良いものの、Win11ではなんとUEFIブートしかサポートしないとかいう暴挙にMicrosoftが出きたとのこと3。PCを自作したときにインストールしたMBRのWin10はアップグレードできないらしく、GPTに変換する必要があった4。一度目、春休みのアップグレードの際にはMicrosoft公式のmbr2gpt.exeというツールを使うことでmbrからgptに変換することができた。
そしてWin11を使いづらくてWin10に復元した後、間違いでメインOSのディスクをまっさらにしてしまった。重要なデータ類はHDDにバックアップを取っていたので大した損害は大した損害はなかったものの、再度OSをインストール羽目になってしまった。まぁ再インストールは何事もなかったの良しとしよう。
それでまた夏休みには入るまでそのままWin10を使うのだが、いざWin11にアップデートするとなったときMBRが障壁になっていた。インストールのときの僕は何を考えていたんだ5。そして前回と同じように公式のmbr2gpt.exeで変換しようとしてみたところ、なんか色々エラー吐かれてでききなかった。途方にくれていたときに有志の方が開発してくださっているgdiskのWindows版を使用する方法を知ったので、gdiskを使用しすることにし、ちゃんとGPTに変換することができた。
その後は特に大きなトラブルもなく、スムーズにインストール成功、データも残っていた。一つ問題があったのは、Intelが提供しているドライバサポート&amp;amp;アシスタントが作動しなくなったことでだ。まぁIntelから個別に取得すればよかったので特に問題なし。6
使用した感想 スタートメニュー 中揃えのスタートメニューやタスクバーは、Macで慣れていたのでストレスにはならなかった。 初期のころは前述したランチャーソフトを使わずにやってみようと努力したが、やはり使いにくかった。スタートニューの下半分が意味分からない機能のために占領されてしまっているために、一面で18個のアプリしかピン止めできない。それでは流石に使いにくいというわけで&amp;quot;CLaunch&amp;quot;というフリーソフトを使用することにした。CLaunchはボタン式のランチャーで、とても愛用している。（今も補助的な役割として使っています。）
UI Windows 10時代の角ばっていたUIから、全体的に丸びを帯びたデザインに変貌を遂げた。うっすらウィンドウが透けるMicaというWindows独特のUIはとても良い。
設定、フォト、ペイント、メモ帳、エクスプローラーなどのUIの更新も行われた。個人的には設定とフォトの新しいUIは好みである。エクスプローラーはUIを変えるにしてもリボンUIは廃止しないでほしかった。
WSA(Windows Subsystem for Android) 僕がインストールしたときはまだアメリカでしか公開プレビューは公開されておらず、裏口的な方法を利用することでインストールが可能だった。そしてまだアプリストアは使用できなかったが、（できたのか？）&amp;ldquo;WAS PacMan&amp;quot;というソフトを使用することで.APKからインストールすることができたので、試験的にApple Musicをインストールしてみました。使用してみた感想ですが、割りとサクサク動くが、サウンド関係はまだ弱いようで、Windows版のiTunesで再生したほうがよっぽど音質が良い。ちなみに、ゲームは試していない。スマホゲーは嫌いなのです&amp;hellip;
しかし、今は日本でも正式に公開プレビューが開始し、Hyper-Vと共存できるAndroidエミュレーターは少ない上に、ウィンドウにして動かすことができるのはとても素晴らしい。今後の動きに期待だ。
WSLg さて、当初の目標であったはずのWSLgだが、特に使い道が見つからずにテスト用アプリケーションであるxeyesだけ起動して終わった。今度StableDiffusion関係で活用できないか考えているところだ。
その他 仮想デスクトップ まず、仮想デスクトップ周りが強化されたのは嬉しいことだが、仮想デスクトップのスイッチャーを使用している際のエクスプローラーのクラッシュが非常に多くなった。Win10のときはクラッシュなんて起こったら珍しい方だったが、今では一日に一回ぐらい起きている。 スナップ機能の強化 殆ど使わない コンテキストメニュー なんかモダンになった。これはすぐ戻すべき。 あとはセキュリティ周りが強化されていたらしい。素人には全くもって理解できない。
Win11にするにあたって利用したソフト類 Explorer Patcher 前述の通り、Win11のUIを選択して戻すことができるアプリ。タスクバーはWin11だけどスタートメニューはWin10&amp;hellip;みたいなことも可能 CLauch 前述の通り、アプリケーションランチャー。スキンを適用することでWin11にあった雰囲気にできる。数あるランチャーソフトの中でもオススメ。 Rufus 前述の通り、.isoをUSBに焼くことができるアプリ。Win10のインストーラーを作成する際に使用。 WhyNotWin11 前述の通り、Win11へのアップグレードの可否を表示する際に使用。 Winaero Tweaker 本来ならばレジストリをいじらなければいけない設定をGUIで行えるようになる。便利。 22H2アップデートについて Win11最初の大型アップデートである22H2は、通知機能の改善やタスクマネージャーのUIの変更（中身はもちろん変わっていない）などがあったらしいとのことだが、そんなことはどうでもいい。スタートメニューにフォルダーが作れるようになった。これは大きな進展で、スタートメニューにピン止めできる上限が18しかなく実用性が皆無だったスタートメニューにフォルダが作れるようになり、その上ピン止め可能な段数を増やせる設定も追加されたのである。かなり良いアップデートだったと思う。
結論 WSLgやWSAなどの最新機能が多くあり、個人的に感じていたスタートメニューの使い勝手の悪さも22H2のアップデートでかなり改善されたため、UIの変更に極端な抵抗がなければアップグレードはオススメする。
おわりに 高二の元部長がCEATECに行くらしく、訪問記を書くかもしれないと言っているので次の更新は早くなるかも&amp;hellip;?
当時は.isoが提供されていなかったため、 Win10のインストーラーを作成→Win10をインストール→Windows Insider Programでアップグレード という手順を踏む必要があった。(ハズ)&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>物理部の歴史を探る</title><link>https://asanobuturi.github.io/blog/20220619/</link><pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20220619/</guid><description>(最終更新:2022年12月3日)
挨拶 どうも。中２の杉本です。 主にサイトの改装などをしています。
物理部の歴史を探る 物理部には'99からの部誌が保管されており、部員はそれを自由に読むことができます。そこには当時の物理部の事などが書かれているため、貴重な資料です。
過去の物理部のサイト 過去の部誌にHPのリンクが張ってあるんですが、発見できたものは
おそらく初代 おそらく二代 二代目の方のページのフッターに
画面解像度 800x600 以上、色数 16 bit 以上推奨
Internet Explorer 6.0 以上推奨
って書いてあるのがとても時代を感じる。というかIEサ終しましたね。
このブログは2015年で更新が止まってますし、これはatpagesがサービス終了したせいで詐欺サイトに飛ばされるようになってますね。
1982年の部誌 部誌のバックナンバーを仕舞おうとしたら、とても古い本が見つかりました。中身を見てみたところ、現浅野学園校長の名前と、昭和57年度部長という文字が。そう、現校長は物理部の部長だったんですよね。つまり物理部の部長は校長になれる&amp;hellip;ってコト!?
倉庫整理した 倉庫の整理を行いました。なんやかんやで高二も手伝ってくれてかなり綺麗になりました。
整理中 整理後：棚 整理後：床 なんか落ちてた では、短めな気がしますが、また今度。</description></item><item><title>高校数学で描くマンデルブロ集合</title><link>https://asanobuturi.github.io/blog/20220508/</link><pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20220508/</guid><description>はじめに お久しぶりです。2019年に最後のブログを投稿してから3年以上が経ったようなのですが、当時中学2年だった私もいつの間にか高校三年になってしまいました。物理部がブログではなくTwitterを積極的に使うようになってからは、このウェブサイトも部誌の電子版の公開以外で使うことはほとんどなくなったのです。浅野を卒業する前にもう一度くらいはブログ記事を執筆しておきたいと思い、今回キーボードをたたいています。 前置きはさておき、今回は久しぶり(そりゃそうだろ)に技術的な記事になります。
対象読者 日本の高校一年生相当以上の基本的な数学の知識を有している人。必要な知識を前半部分で解説し、高校一年生、あるいは中学生程度でもある程度は理解できるように書いているつもりです。
加えて、基本的なプログラミングの知識を有している人。今回はJavascriptを使用しますが、for文、変数などの一般的な文法が分かっていればおおよそ意味はつかめると思います。
マンデルブロ集合とは マンデルブロ集合というものを知っていますか？実態はただの複素数の集合※なのですが、よくこのような写真の形でウェブ上に共有されることがあります。
※集合とは 日本では「数学A」で学習する概念。 数やその他さまざまなものの集まりのこと。集合を構成する「要素」は数だけでなく、(たぶん)確率や式であったり、数学以外の分野に集合の考え方を応用すれば「単語」や「情報」であるパターンもある(と思う)。 マンデルブロ集合は、数、そのなかでも複素数の集合である。つまり、マンデルブロ集合の中には(\(-0.2+0.5i\))や(\(0.1-0.3i\))などの様々な複素数が大量に収納されている。(複素数については後程解説します。)
マンデルブロ集合の画像 一部を拡大したマンデルブロ集合の画像 画像出典：Wikimedia Commons(CC BY-SA 3.0)
下の画像は一部を拡大したもの。
このように、マンデルブロ集合をある規則にしたがって画像に落とし込むと、非常に美しい幾何学模様をみせるため、YouTubeをはじめインターネット上にはマンデルブロ集合を描画した映像がたくさん投稿されています。
この記事では、このようなマンデルブロ集合の写真を、高校数学の知識だけで描画することを試みます。なお、今回は上記の写真や映像のようなカラフルな色付けは行いません。
マンデルブロ集合の実態は、以下の漸化式が無限大に発散しないような複素数\(C\)の集まりです。(より正確な定義を後程記載)
\[ \begin {cases} Z_0 = 0\\ Z_{n+1} = {Z_n}^2 + C \end {cases} \]
このように定義されるマンデルブロ集合を構成する各複素数を複素数平面上に黒い点としてプロットしていくと、おおよそ上記の写真のような画像が得られます。
さて、一応ここまで高校数学の用語だけを用いて解説してきましたが、まだ該当範囲を学んでいない人にとってはちんぷんかんぷんだと思いますので、ここから一つ一つ噛み砕いて理解していきましょう。
ここから下は、複素数、複素数平面、漸化式、極限についての基礎知識の解説が続きます。これらを既に理解している方は、「マンデルブロ集合の要素を調べる」の章まで読み飛ばして頂いて構いません。
複素数(数学Ⅱで学習)とは 中学三年で習う平方根(ルート)を思い出してください。\(2\times2=4\)であるとき、\(4\)のルートすなわち\(\sqrt4\)は\(2\)となります。同様に\(3\times3=9\)なので、\(\sqrt9=3\)です。このように、ある数に対して、2乗することでその「ある数」となるような「別のある数」を求めるのがルートの計算です。
なお、\((-2)\times(-2)=4\)でもあるため、正確には\(\sqrt4=\pm2\)となります。また、\(\sqrt2\)などの値もコンピューターなどを使うことでおおよそ\(\pm1.41421356\)という値(近似値)を求めることが出来ます。実際に電卓でこの数を2乗してみれば、約2(1.999999993…くらい)になることが確認できると思います。
虚数の定義 さて、ここで負の数のルートを考えてみます。 \(\sqrt{-1}\)はいくつでしょうか？
\(\sqrt1\)であれば答えは\(\pm1\)、すなわち\(1\)と\(-1\)ですが、2乗して\(-1\)となるような数は存在するのでしょうか？
はい、そんな数は存在しません。正確には、実数(整数、分数&amp;amp;少数、ルートや円周率などの無理数)の中には存在しません。そこで、先ほど2乗して\(2\)になるような、少数で正確に表せない数を\(\sqrt2\)という記号で表したように、2乗して\(-1\)になるような数を\(i\)という記号を用いて考えることになったのです。つまり、\(i^2=-1\)であり、\(\pm i=\sqrt{-1}\)です。このような、2乗して負の数になるような数を、「虚数」と呼びます。
この、\(\pm i =\sqrt{-1}\)で定義される数\(i\)には、「虚数単位」という名前がついています。\(\pm i\)とあるように、この方程式の解はプラスマイナスの2つがありますが、虚数単位はそのどちらか片方のみを表します(計算の途中でプラスとマイナスをごっちゃにして考えなければどちらでも問題ない)。
虚数単位を使うことで、\(\sqrt{-1}\)だけでなく負の数のルートをなんでも表すことが出来るようになります。
例えば\(\sqrt{-5}\)は\(\sqrt{-5}=\sqrt{-1}\times\sqrt5\)と書き換えられますから、\(\sqrt{-5}=\pm\sqrt5i\)です。同様に\(\sqrt{-4}=\pm2i\)、\(\sqrt{-12}=\pm2\sqrt3i\)という風に表すことが可能です。
二次方程式の解の公式で、\(x^2+bx+c=0\)の解\(x=\frac{-b\pm\sqrt{b^2-4ac}}{2ac}\)のルートの中身\((b^2-4ac)\)が負の数になると「この二次方程式は実数解をもたない」だと言ったり、正の場合は「異なる実数解を2つもつ」というフレーズが出てきたりするように、ことあるごとに実数解という面倒な言葉を使うのは、ルートの中身が負の数であった場合には虚数解(複素数解)があるということの裏返しだとも考えられますね。
複素数の定義 先ほど定義した虚数単位\(i\)と2つの実数\(a,b\)を用いて、\[Z = a+bi\]と表すことの出来る数を「複素数」と呼びます。例えば\(3+4i\)という風に表される数のことです。
「\(5\)」のような普通の実数も、\(a=5,b=0\)を代入してみれば\(Z=5+0i=5\)と表せるので、複素数の一種と考えることが出来ます。逆に「\(\sqrt{-25}\)」のような虚数(「純虚数」と呼びます)も、\(Z=0+5i=5i\)と表せるので当然複素数の一部です。
ちなみに、このときに\(a\)の項を「実部」、\(bi\)の項を「虚部」と呼ぶことがあるので覚えておきましょう。
今までに出てきたいろいろな数のカテゴリー(体系)をまとめてみました。
さまざまな数 複素数の計算は、普通の一次多項式の計算と全く同じように行うことが出来ます。 例えば\((1+2i)+(3+2i)\)という計算は、そのまま\(4+4i\)という風に計算できますし、\((1+2i)^2\)のような場合は展開公式をそのまま使って\((1+4i+4i^2)\)となります。\(i^2=-1\)なので、最終的には\(-3+4i\)です。
複素数平面(数学Ⅲで学習)とは 数直線というものがありますよね。
数直線 一定間隔に引いた目盛りに数を割り当てて、ある数がどの位の大きさなのかを比較しやすくしたものです。複素数を数直線上に描くことを考えてみましょう。 例えば、複素数\(1+2i\)はどこにあるでしょうか？</description></item><item><title>フルカラー7セグ時計</title><link>https://asanobuturi.github.io/electronic/1/</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/electronic/1/</guid><description/></item><item><title>AviUtlについて、導入など</title><link>https://asanobuturi.github.io/blog/20190306/</link><pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20190306/</guid><description>お久しぶりです。時がたつのは早いもので、前回書いたのは約3ヶ月前になってしまいました。
いや、すぐに記事を出すつもりだったんですよ。しかしいつの間にかもうこんな時期になってしまいました。本当にはやいです。
ということで今回はAviUtlについてです。
AviUtlとは 参考：AviUtlの易しい使い方（外部リンク）
概要 AviUtlとは無料で提供されている動画編集ソフトです。
ＫＥＮくんという方が開発しました。
特徴 操作がわかりやすい 多機能で動作が軽い なにからなにまで基本的に無料 使うのに管理者権限がいらない（インストールは不要） 有志の方たちが作ってくださったプラグインが豊富 使っている人が多く情報も多い 拡張がしやすい ざっくりとした歴史 1997年
「KENくん」さんが初めてAviUtlを公開。
拡張編集（後述）はまだなく、できることは基本的な動画のカットや結合でした。
2008年
「KENくん」さんが 「拡張編集」 を開発し、リリース。
AviUtlの機能がそれまでの何倍にも便利になりました。
～今 無料で高機能の動画編集ソフトとして有名になり、様々なプラグインなどが開発され、配布されました。
さらには「ゆっくりMovieMaker」「AviSynth」などのAviUtl対応のソフトも出ています。
AviUtlで編集しているYouTuberの方も結構います。
ゆっくりMovieMakerとは
ゆっくりMovieMaker（ゆっくりむーびーめーかー）は饅頭遣いのおもちゃ箱で配布、開発しているゆっくり実況プレイ動画用の動画編集支援ソフトである。
主にニコニコ動画、Youtube等の動画投稿サイトでアップロードされているゆっくり実況動画の作成に使用されている。
愛称は"YMM"である。
引用 - Wikipedia
「拡張編集」とは 拡張編集でできるようになったことで一番大きいのは、
↓これです↓
そう、タイムライン機能です。無料のソフトでタイムラインが扱えるものはかなり少ないです。
タイムラインのおかげで、視覚的に操作ができるようになり、とても編集がしやすくなりました。
さらに、↓設定ダイアログというのも追加されました。
このダイアログで簡単に座標の設定や効果をつけることができるようになりました。
とにかく今のAviUtlには欠かせない機能です。
導入方法 参考：AviUtl初心者が最初に読むべきページ【導入から使い方まで】（外部リンク）
分からないことなどがあったら上のサイトも見てみてください。おそらくこっちのほうがわかりやすくて正確です。
なお、一部フィルタ設定など省いている場所があります。
1.AviUtl本体と拡張編集の導入
2.L-SMASH-Works(入力プラグイン)の導入
↑これを導入することで、mp4、mp3などのファイル形式も読み込めるようになります。
必要のない方は読み飛ばしてかまいません。
3.x264guiEx(出力プラグイン)の導入
↑これを導入することで、mp4での出力が可能になり、出力の設定なども細かくできます。
先ほどと同様に必要のない方は読み飛ばしてかまいません。
4.初期設定など
AviUtl本体と拡張編集の導入 1.1 「AviUtlのお部屋」で、AviUtlxxx.zipとexeditxxx.zip(xxxはバージョン)をダウンロードします。
1.2 AviUtlxxx.zipとexeditxxx.zipを7-zipなどで任意の場所に解凍してください。
1.3 exeditxxxの中身をすべてAviUtlxxxに移してください。移したら、空フォルダになったexeditは削除してかまいません。 こんなかんじになります。
L-SMASH Works(入力プラグイン)の導入 2.1 AviUtl.exeがあるフォルダ（AviUtlxxxの中）にPluginsというフォルダを作ります。
2.2 POP@4bitでL-SMASH_Works_r935-2_plugins.zipをダウンロードしてきて任意の場所に解答してください。</description></item><item><title>MIDIについて語る その三</title><link>https://asanobuturi.github.io/blog/20181229/</link><pubDate>Sat, 29 Dec 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181229/</guid><description>前回はDominoでとりあえず音を鳴らしてみました。
今回はその続きです。 更新日時が結構空いてるなんて言ってはいけない。
取り消し 前回作った青い四角（これを「ノート」といいます。）を今度は消してみましょう。
方法① 上の方に鉛筆と四角い点線と消しゴムがあると思います。
←これ
今は鉛筆が選択されているので、消しゴムを選択します。
そして、消したいノートをクリックしてください。
すると消えます。
方法② こちらのほうが絶対に速いです。
こちらの方法を強く推奨します。
やり方は簡単。ノートをダブルクリックするだけです。
この方法だと消した後にわざわざ切り替えなくてよいのでとても楽です。
ノートの色々な変更 音の高さやタイミングの設定 ノートの真ん中をクリックしたまま動かすだけ。
以上！！
ノートの長さの変更 これは上の2行で終わった説明に比べて少し難しいです。
そうはいっても簡単ですが。
ノートの左右の端にマウスポインタを合わせてください。
するとマウスポインタが矢印に変わるはずです。
あとはクリックしながら伸ばしたり縮めたりするだけです。
音の強さの変更 音の強弱を設定するにはVelocityという値をいじる必要があります。
Velocityは和訳すると、「速度」です。
つまりどういうことかというと、
ピアノの鍵盤を強くたたいた時と、弱く押した時の音の違いということです。
すなわち、「押す強さ」≒「速度」なのです。
では実際に変えてみましょう。
下の方にグラフのようなものがあると思います。
編集モードを選んで（デフォルトでは直線）高さを調節すると、
音の強さが変わります。
Velocityが大きいと強く、小さいと弱くなります。
まとめ 基本的なことは大体わかったと思います。
それではよいお年を。</description></item><item><title>MIDIについて語る その二</title><link>https://asanobuturi.github.io/blog/20181130/</link><pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181130/</guid><description>前回はMIDIについて少し話しましたが、今回はMIDIを使って 作曲、打ち込みのやり方を書いていきたいと思います。
ソフトの導入 まず最初に ここ でも紹介していた、MIDIファイルを作成する「Domino」というソフトを導入します。
ほかにもMIDIファイルを作成するソフトはあるのですが、
これが一番初心者に分かりやすいかつ、MIDIのたいていの機能があるので
今回はこれを使いたいと思います。ただDomino以外が使えないだけ
では Domino公式ホームページ にアクセスしてください。
右側にダウンロードのボタンがあるのでダウンロードしてください。
すると「Domino xxx.zip」（現時点で143）というZIPファイルが保存されるので、お好きな場所に展開してください。
なお、Dominoは管理者権限のいるようなインストールはしないのでご安心を。
では解凍したZIPファイルのDomino.exeというファイルを開いてください。
するとこの様な画面になると思います。 そしたら左上の「ファイル(F)」→「環境設定(E)&amp;hellip;」と環境設定を開いてください。
そして「MIDI OUT デバイス」を「Microsoft GS Wavetable Synth」に変更してください。
同様に「音源（音源定義ファイル）」を「GSm(Microsoft GS Wavetable SW Synth)」に変更してください。
変更が終わったら「OK」を押して環境設定を終了してください。
これで導入は完了です。
Dominoの使い方 とりあえず音を出してみる ではピアノの右側の好きなところを左クリックしてみて下さい。
するとこのように青い四角ができるはずです。
ではスペースキーか上部にある緑の三角の再生ボタンを押してください。
ピアノの音が出たはずです。もしできていないなら環境設定を見直してみてください。
楽器を変えてみる 次に楽器を変えてみましょう。
左にあるこの部分をダブルクリックしてください。
するとこのような画面が出てくるので、
左のマップからオルガンを選択し、「PC#」を「017 Organ 1」に変更してください。
ではまた再生してみてください。音が変わりましたね。
まとめ 今回でDominoで作曲する一歩を踏み出しました。
ということで次回に続きます</description></item><item><title>MIDIについて語る その一</title><link>https://asanobuturi.github.io/blog/20181126/</link><pubDate>Mon, 26 Nov 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181126/</guid><description>みなさんは、MIDIというものを知っていますか？
例えばこんな感じの動画、見たことありませんか？
このような形の動画は「曲名　MIDI」というように検索すればたくさん出てきます。
ではMIDIとはいったい何なのでしょうか。
MIDIの使われ方 MIDIが使われる場面の多くは、
・曲などの打ち込み1
・作曲
という時でしょう。
冒頭の動画もAlan Walkerの「Faded」という曲を打ち込んで、MIDIファイルにしたものです。
YouTubeにあるMIDI系の動画のほとんどはSynthesiaというソフトを使ったものです。
このSynthesiaによって上から降ってくる動画を作ることができるのです。
また、作曲もMIDIをつかうことで手軽にできます。
つまり&amp;hellip;
MIDIとは かみ砕いていうと、
MIDIというのはコンピューター向けの楽譜のようなもの。
これを作って作曲したり、打ち込みをするわけです。
パソコンのソフトだけでMIDIファイルを作ることもできますし、
MIDI対応の楽器をパソコンにつないで演奏したデータを取り込むこともできます。
これのDomino とか使えば比較的簡単に作曲ができますよ。
MIDIの長所 MIDIの長所　１ mp3やwavといった音データと違い楽譜のような構造なので、
曲などの場合はファイルサイズが小さくなりやすいです。
MIDIの長所　２ 作曲などをするときに楽器が弾けなくても大丈夫！
でもやるならある程度は引けたほうがいいと思いますよ。
MIDIの長所　３ どの音がどのタイミングでなるかというデータの集まりなので、
専用ソフトなどで開けば簡単にピアノなどで弾くことができます。
という感じです。
まとめ 長くなりそうなので複数回に分けることにします。
それではまた。
打ち込み（うちこみ）とは、主にドラムマシンやミュージックシーケンサーなどに 前もって演奏情報を入力しておいて（打ち込んでおいて）、 それを再生することで演奏を実現させる技法、またはその結果としての音楽のこと。 Wikipedia より&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>DELL OPTIPLEX 780手術</title><link>https://asanobuturi.github.io/blog/20181113/</link><pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181113/</guid><description>DELLのパソコンが動かない! 物理部では、私物のノートパソコン等を持ち込んで作業ができない場合、部活にあるパソコンを貸し出して使うことがあります。
PC班員が作業をするときは、持ち込むか借りるかの二択で、部活のPCは文化祭の展示でも使われるものになります。
部活のPCの中に、DELLのOPTIPLEX780があるのですが、それがある日突然電源がつかなくなってしまいました。
電源ボタンを押しなおしたり、電源ケーブルを押し直したりしても動かないので、電源が壊れているという判断に至りました。
変な電源 替えの電源に交換すればいいのですが、組み込まれていた電源が見慣れない形のものでした。よく見るATX電源などではなく、小さな筐体に収まるように独自に設計されたもののようで、物理部内に替えの電源がなかったのです。
「DELL 電源」とAmazonで検索したら、意外と簡単に見つかりました。3000円くらいで安かったので、すぐに買うことになりました。
電源到着、そして交換 暫く待っていたらAmazonから電源が届きました。
日本の倉庫から発送されるのかと思っていたのですが、中国語の伝票が張り付いて届いたので驚きました。深センの業者から香港国際空港→成田空港と飛んできたようです。
一部モザイクを掛けておきました。不必要なところにもかかっているかもしれませんが&amp;hellip;
中にすごく潰れやすいプチプチが入っていました。雑巾絞りでブヂブヂブヂッってやるの楽しかった。
上のが新しい電源です。古い電源はアルミの表面が錆びているみたいです。きれいになってよかった。ついでにPCの中のほこりも拭き取っておきました。
換装前と換装後ではこんな感じ。見た目上ではきれいになって以外に特に変わりはないですが。狭い筐体に配線、CPUファン、HDD、DVDドライブなどを詰め込んでいるせいで色々外さないと配線し直すことができなかったので非常に面倒でした。
その後 蓋をしめて、電源ケーブルをさしたらちゃんと起動しました。よかった。
このブログを書いている日に、新しく別のPCのOSが起動しなくなったのは内緒。
それでは、最後まで読んでいただきありがとうございました。他の記事もぜひ読んでいってくださいね。</description></item><item><title>物理部員のよく使うブラウザ</title><link>https://asanobuturi.github.io/blog/20181109/</link><pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181109/</guid><description>今、あなたはこのページをどんなブラウザで見ていますか。 物理部員のほとんどがこだわりのブラウザを使っています。 では、そんな物理部員たちのブラウザを見ていきましょう。
※これには個人的な意見がまたまたとても多く含まれています。
また、もしかしたら間違った情報があるかもしれません。
Chromium系列 Chromiumは、Googleが主体となって開発したオープンソースのブラウザで、Google Chromeなどの元になっています。
WEBページはHTMLという形式で文字・画像などの情報がまとめられ、
それをブラウザに搭載されているレンダリングエンジンが画面に描画します。
Chromium系列のブラウザでは、レンダリングエンジンにBlinkを採用しています。
Google Chrome 今世界で一番使われているブラウザです。
リリース当時の他のブラウザと比べて、ものすごく軽いブラウザだったので、今も大人気です。 とくにこだわりがない人はこれか、Windows10標準の Microsoft Edge がおすすめです。
Chromium Chromeとほぼ同じです。
オープンソースで（くどい）インストールが不要です。
「Chromium使うならChromeでいいだろ」というのが物理部のブラウザマスターの意見です。
Chromiumという名前は金属のChrome（クロム）の元素名だと言う事です。
Opera ノルウェーの会社が作ったブラウザです。（現在は中国の会社に買い取られてしまいました。） Chromeよりも軽く、標準で広告ブロッカー1がついています。
Vivaldi Operaの開発者がOperaの開発後に作ったブラウザです。
広告ブロッカー機能はもちろん、ページキャプチャーなどの機能もあるので、おすすめです。
また、OperaはOperaの拡張機能しか入らなかったので「この拡張機能が入れられない！」という事がありました。
しかし、VivaldiはChromeの拡張機能がすべて入るので、主要な拡張機能をほとんど入れることができます。
また、標準でタブを管理する機能がついています。
例えば&amp;hellip;
こんなことができたり&amp;hellip; Chromeより良いブラウザがいいという方にはお勧めです。
その他 FireFox Mozilla Firefoxとも呼ばれます。
Chromeが出る以前にあったブラウザで、InternetExplorerでなければこれを使う、という感じでした。
豊富な拡張機能も魅力の一つです。
Microsoft Edge Windows10にプリインストールされているブラウザです。
そこそこ軽いブラウザです。
でもできるならChromeなどを使ったほうがいいでしょう。
Safari Appleが開発しているMacOS向けのブラウザです。
Windows向けもありますがあまりおすすめしません。
おわりに 結局、物理部員はVivaldiを推しているようですね。
&amp;hellip;と、いうことでですね、以上です。
最後まで読んでいただきありがとうございました。
WEBサイトの広告を表示させなくするものです。 スマホなどの場合、これを使うことによってデータ通信量が減ることがあります。 ただし、読み込みが遅くなる場合があるので注意です。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>物理部員PC班のよく使う言語</title><link>https://asanobuturi.github.io/blog/20181102/</link><pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181102/</guid><description>ここでいう言語というのはもちろんコンピュータープログラムで使う言語のことです。 別に「英語で会話しなくてはならない」なんていう縛りがあったりするわけじゃありません。
※これには個人的な意見がまたまたとても多く含まれています。
また、もしかしたら間違った情報があるかもしれません。
C系列 C言語は、すぐ下に書いたものを読んで頂ければわかりやすいと思います。
C言語は初版が半世紀近く前に使われはじめて以来、様々なプログラミング言語の代表格として君臨してきました。
C言語をベースとして、様々な機能が追加されたC++,C#,Javaなどが使われています。
C言語 物理部のパソコン班の中一のほとんどがこの言語から始めます。
参考書籍なども多く、今あるプログラミング言語はC言語がもとになっているといっても
過言ではないと思います。でも最初に断ったようにC言語を話す人は（少なくとも物理部には）いませんよ。
C++ 中二～中三ぐらいから自然とC++を始める人が現れてきます。
当初、この言語はC言語の拡張版として開発されていましたが、
今はC言語とはそれなりに区別されています。
とある人はこの言語の文法などにハマって、ゲームの制作スピードが落ちてしまいました&amp;hellip;
Java C++を参考にして作られた言語です。
物理部員のよく使うソフト で書いた通り、Eclipseというソフトを使って書かれます。
環境構築がめんどくさいけどAndroidのアプリなどの制作に使われています。 結局Javaあきらめてたので&amp;hellip;
C# C#自体で作るのではなく、Unityという開発環境でこの言語を使う、という人が大半です。
歴史的には　C言語　→　C++　→　Java　→　C#　という順番です。
C#はMicrosoftが開発したので、.NET Frameworkなどを使ってWindowsのアプリを簡単に作れるようにもなっています。
インタープリタ型の言語 インタープリター型言語は、Cなどの静的コンパイラ型の言語とは違い、プログラムを機械語に翻訳する作業をプログラムの実行時に行います。
俗に動的言語とも呼ばれます。
Python 「C言語に飽きた！」という人などがたどり着いたのがこれです。
ほかの言語とは違う文法で、読みやすく設計されています。
また、ライブラリ（拡張機能みたいなもの）が多めなので、色々なことができます。
Java 前述 の通り。Cと違って中間言語というものにしてから
実行するので、Javaが入っていればいろいろなプラットフォームで動かすことができます。
JavaScript 「またかよ&amp;hellip;」と思ったそこのあなた！
JavaとJavaScriptはオーストラリアとオーストリアぐらい違うといわれるくらい違いますよ！
JavaScriptはブラウザ上で実行されます。たとえばこれとか。
その他 なでしこ 「プログラミングって英語じゃん！やだ！」って日本人が好きそうな言語がこれです。
この言語は日本語で書くことができる日本産の言語です。
物理部でははるか昔に使われていたそうですが&amp;hellip;
個人的にはソース読むのも書くのも大変そうだと思います。
Scratch 「プログラミングって英語じゃん！しかも文字うたなきゃいけないし！やだ！」
という人や初心者の方におススメしたい言語がこれです。
ブロックを組み合わせるだけでプログラミングができます。
公式のホームページには世界中の人の作品も公開されているので参考にすることができます。
ただそこにあるゲームにハマりすぎないように注意！
Ook! 「プログラミングって英語じゃん！人間の言葉なんてわかるわけないだろ！やだ！」
というオランウータンのための言語です。世界って広いですね。
「Ook.」「Ook?」「Ook!」の三種類しか使いません。
なので暗記がものすごく苦手という方にも良いかもしれません。
ただものすごく読みにくいと思いますよ&amp;hellip;
あれ、これって「物理部員がよく使う言語」じゃないじゃん&amp;hellip;</description></item><item><title>物理部員のよく使うソフト</title><link>https://asanobuturi.github.io/blog/20181026/</link><pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181026/</guid><description>物理部員がよく使うソフトを紹介したいと思います。 ここにあるソフトは基本的に無料なのでよければ調べてみてください。
※これには個人的な意見がとても多く含まれています。
プログラミング Visual Studio 2017 Community 物理部のパソコン班のほとんどが使っています。
プログラミングをする上での開発環境として王道です。
これを入れておけば困ることはなさそうです。
Visual Studio Code 一部の人が使っています。
自分の好みに合わせてカスタマイズができますが、今のところ物理部にはWi-Fiがないため、
本来の力を発揮できていないようです。悲しい。
Atom これまた一部の人が使ってます。
Git Hubが制作したカスタマイズできるテキストエディタです。
ですが、今のところ物理部にはWi-Fiがないため、本来の力を発揮できていないようです。
ん？どこかで同じような文章を見たような&amp;hellip;
Eclipse IBMが開発した統合開発環境で、 物理部では主にJavaというプログラミング言語を書くのに使われています。 結局Javaあきらめてたので今は使われていません。
シミュレーションなど LTspice 物理部の電工班の一部の人が使っています。 様々な回路素子を組み合わせて動作をシミュレーションすることが出来ます。 一々ブレッドボードの上に回路を組むのが面倒な時に使います。
音楽・動画関係 Domino MIDIファイルという楽譜のような形式の音楽ファイルを作る作曲ソフトです。
これで文化祭の自動演奏装置のデータなどをいろいろしていました。
Audacity ちょっとした音の編集からガチなものまでいろいろ編集ができるソフトです。
音のピッチあげたり&amp;hellip;音量上げたり&amp;hellip;
あとPCからの音をマイクを通さずに録音することも可能です。
AviUtl 無料の動画編集ソフトです。
このソフトもプラグインを入れることでできることがかなり増えます。
有料ソフト並みの使いやすさだと思うのでオススメです。
VLC media player いろいろな形式の動画を再生することができます。 再生だけでなく、ほかの形式への変換も可能です。
画像 ペイント Windows標準のソフトがなぜか物理部の絵師に使われている&amp;hellip;
弘法筆を選ばずってことなのかな？
EDGE ブラウザじゃないですよ。EDGEという高機能ドット絵エディタです。
Dominoの開発者と同じ方が開発されています。
Domino同様、分かりやすくて使いやすい！
inkspace inkscapeはベクター1（.svg）の形式の画像ファイルを作ることができるソフトです。
シンプルなデザインをするときに使われます。
物理部員に絵心がないわけではありません。ハイ。
GIMP 結構本格的な画像編集ソフト（と思っている）。
たまに使われています。
GIMP難しいからあんまり書けません&amp;hellip;
手軽に透明.png そのまんまの機能があります。 機能が透明化のみなので手軽に使うことができます。 よく透明化だけする人にはオススメです。
おわりに 書いてみてわかりましたが、物理部員は結構メジャーなソフトを使っているようですね。</description></item><item><title>近況報告とか</title><link>https://asanobuturi.github.io/blog/20181025/</link><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181025/</guid><description>前回の更新から一年ほど経ちました。この間に新しい中学1年生が入ってきたり、2018年の打越祭(文化祭)があったりしたので近況報告をしたいと思います。
今回のブログを書いているのは今までの人とは別の人です。
最近の物理部の様子の写真でも貼っておきます。中1も何人かいます。 中学1年生がたくさん入ってきた 今年は中学１年生がやたらとたくさん入ってきました。ざっと2,30くらいでしょうか。この人数は一部の運動部よりも多かったりするらしいです。部活動紹介のときに触らせた部員作成のゲームや電子工作の作品に興味を持ってくれたのかも知れません。
しかし今年度の中1に関して危惧されているのは、電子工作班の人数が入ってきた人数の割に少なすぎることです。現役の電子工作班員も、「人数が少なすぎて技術を受け継ぐのが難しいかもしれない」と言っていました。
また、多くの人が案の定幽霊になってしまいました。あまり人が多くてもモノが足りないので意味がないのですが、幽霊になってしまったのは残念です。そのせいもあって、今のところはパソコンをあと一、二台(新調|修理)すれば問題なさそうです。
2018年打越祭(文化祭)が終わった 2018年の打越祭が終わりました。第三十九回だそうです。今年は9月8日と9日に開催されました。全体としての様子など詳しい情報は 打越祭公式Twitter なんかを見て頂ければわかりやすいと思います。 中華3Dプリンターを買った 2017年は、部費が少し余ったということで最後の方に前々からほしかった3Dプリンターを買うことになりました。
今回買ったのはQIDI TECHNOLOGYという中国・浙江省温州市の会社のX-ONE2です(ONEなのに2とは(笑))。 アマゾンの商品ページ が有ったので貼っておきます。
3Dプリンターというと、台湾のXYZ Printingが有名ですが、年度末で部費もあまり残っていないので、たくさんのプリンターの中でも高コスパだったこのプリンターを買うことになったようです。
実際にこのプリンターを使ってみての気になったことを書いていこうと思います。ただし、他のプリンターを使ったことがあるわけでもないので比較はできません。完全に独断です。
ほっとくとパイプの中で樹脂が詰まる これは他のプリンターでも同じかも知れません。印刷が終わった後、掃除をしないとパイプの中で溶けた樹脂がつまりました。二回目の印刷でなかなか樹脂が出てこないと思ったら中にキノコが入っていました。 遅い 3Dプリンターってこんなに時間がかかるものなんですね。物理部では最初にテストとして5cm立方くらいの中が空洞の蓋がない立方体を印刷しましたが、かなり時間がかかって部活動終了時刻になってからは倉庫で一人動いてもらいました。
さすがに次の活動日には印刷が終わっていましたが。
モデリングが難しい 実は、プリンターを買ってから、テストとして最初についてきた3Dデータひとつと立方体を印刷した以外に何も印刷していません。
作りたいものが有っても、3Dのモデルを作ることが出来る人が物理部に居ないのです。
今、 Blender という3Dのソフトを勉強していたりするので、来年の文化祭でなにかできたらいいなと思っています。
最後に ということで、最後まで読んでいただきありがとうございました。次回も早めに更新していきたいと思います。物理部にあった古いパソコンを何台か修理したりしているので、その報告でも書こうかと思っています。</description></item><item><title>2018年2月は満月にならない</title><link>https://asanobuturi.github.io/blog/20171217_2/</link><pubDate>Sun, 17 Dec 2017 08:49:15 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20171217_2/</guid><description>まずは，これを見てください。
上の画像は，国立天文台の暦のページからお借りしたのですが，普段なら
このように「望(満月)」があるはずなのに，2018年2月の暦には「望(満月)」がないんです。
今回は，このことについてです。
そもそも満月とは 天文学的な意味での満月（望）は、太陽、地球、月の位置関係によって決まります。満月とは、地球から見て月と太陽が反対方向になった瞬間（月が太陽の光を真正面から受けて、地球からまん丸に見える瞬間）の月のことを指します。
つまり，「○月○日は満月」ではなく，「○月○日 ○時○分の瞬間に満月になる」ということです。上の2017年12月の例で言うと，2017年12月4日 0:47の瞬間，地球から見て月と太陽が反対方向になります。
なぜこんなことが起こるのか 実は，2018年1月と3月に満月はそれぞれ２回あります。 2018年1月から3月の満月を見てみると，
1 2 3 4 2018/01/02 11:24 2018/01/31 22:27 2018/03/02 09:51 2018/03/31 21:27 こんな感じで，ちょうど2018年2月に満月が来ません。
満月から次の満月までは約29.5日なので，うまく１月の最後に満月が来れば２月に満月が来なくなるというわけです。
2018年2月以外にはいつあるの？ 1 2 3 4 5 6 7 8 9 10 import ephem pr=0 d=ephem.Date(&amp;#39;1800&amp;#39;) while d&amp;lt;ephem.Date(&amp;#39;2500&amp;#39;): d=ephem.next_full_moon(d) tl=ephem.Date(d+ephem.hour*9) mo=tl.datetime().month if (mo-pr+12)%12&amp;gt;=2: print(&amp;#39;{0}/{1}&amp;#39;.format(tl.datetime().year,mo-1)) pr=mo その結果は，
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 1801/2 1809/2 1847/2 1866/2 1885/2 1915/2 1934/2 1953/2 1991/2 2010/2 2018/2 2029/2 2037/2 2067/2 2094/2 2105/2 2143/2 2162/2 2181/2 2200/2 2219/2 2238/2 2257/2 2287/2 2306/2 2325/2 2363/2 2382/2 2401/2 2420/2 2439/2 2466/2 2485/2 前回は2010年2月，次回は2029年2月。大体100年に４回から６回あります。</description></item><item><title>ホームページ引っ越し</title><link>https://asanobuturi.github.io/blog/20171217/</link><pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20171217/</guid><description>Hello, New Home page!
新しいホームページからこんにちは！
ということで，HPを移転しました。若干デザインの変更もしてあります。
引っ越し先 以前は， 忍者ホームページ を使っていたのですが，色々あって GitHub Pages に移転しました。
デザインの変更 このアップデートから，Material Design Liteという，Google製のフレームワークを使っていません。 左上にあるハンバーガーメニューも，他のサイトを色々と参考にしながら作りました。
それだけ。短いですが今回はこのへんで終わり。</description></item><item><title>ホームページ更新</title><link>https://asanobuturi.github.io/blog/20171126/</link><pubDate>Sun, 26 Nov 2017 08:37:58 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20171126/</guid><description>はじめまして。というか、お久しぶりです。の方が正しいですかね。書いている人（前回の更新は２代前の部長さん）は変わりましたが。
ホームページを更新しました 多分ちょうど１年ぶりの更新になります。 というか、最終更新日（だと思われる）のが2016年9月9日。去年の文化祭直前。 そして、その時のホームページが、
部誌のページ
ゲームのページ
（ぜんぜん「文化祭終了後」ではないですね。もう次の文化祭も終わったのに。） 来年はちゃんと更新するのでご安心を～（←信用できない）
ブログっぽい何か（これのこと）を作りました そもそも、ブログはもとから存在していました。
物理部活動日誌
↑これのことです。
一応、このブログのIDとパスワードはもらっているので更新はできます。 でも、上のブログって自由度が低いし、それに物理部のホームページを一つにまとめたかったので、 こっちにブログ（っぽい何か）を新しく作りました。
「じゃあ こっち もまとめろよ」と言われそうですが、それはまだちょっと先になりそうです。
このホームページは無料版の忍者ホームページを使っているのですが、 忍者ホームページはPHPが使えないので、ブログ向きではないんです。無料で使わせていただいているのに失礼ですが。
このページも、HTMLから直接いじって書いている状態です。
なので今現在、ホームページを移転することを考えています。</description></item><item><title>"Arduino"とは何ぞや？</title><link>https://asanobuturi.github.io/document/2017/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2017/4/</guid><description>はじめに こんにちは、中3のAです。今年で2回目ですね。
さて今年は、Arduino(アルディーノ)というものについて、語りたいと思います。実は、アナログ回路だけでできることには限界があります。例えば、LEDを1秒ごとに点滅させる、という動作をさせるのはと でも難しいです。そんなことを、プログラムで実行してくれるのが、Arduinoです。
ちなみに僕は、電子工作班であり、PC班ではないので、プログラミングは詳しくないので、プログラムについては、ここでは触れないことにします。
電子工作の限界 電子工作と聞いて皆さんは何を思い浮かべるだろうか？まあ、僕も中学に入るまで電子工作の“で” の字も知らない身でしたので何も思い浮かばないかもしれません。簡単に説明すると、トランジスタ、 抵抗と呼ばれるような電子部品を使って回路を作り、いろいろな機械を作ることです。
次に、電子工作の限界について説明したいと思います。例えば、ラジオなどの回路は、電子工作だけでできます。私が去年作った壁に沿って走るロボットもできます。しかし、自分の思うように動いてくれるロボットを作るとなると、Arduinoなどのマイクロコンピュータが必要となります。
この違いは何か？それは、ずばり制御するかしないかです。前者2つのものは我々人間が命令しなくても勝手に動作してくれますが、後者はマイクロコンピュータ(通称マイコン)と呼ばれるものを使い、 パソコンでプログラムを書き、それをマイコンに書き込み、それで制御するロボットはとても複雑な動作をさせることができます。例えば5歩働いて1秒止まり、90°回転して10歩動き・・・あるいは、LEDを2つ並列につなげて、それを数秒ごとに交互に光らせるなど。
Arduino Uno ところでArduinoって結局何なのか?ずばりマイコンの一種です。プログラムするときの言語もC言語、C++をもとにしているので、最もポピュラーで、使いやすいマイコンだと思います。Arduinoにもいろいろな種類がありますが、一番有名なのがArduino Uno(アルディーノ ウノ)です。
価格は2800円とおそらくArduinioの中でもっとも安価なものだと思われます。ピンの数はdigitalが13本とちょうどいい本数となっています。互換品もたくさん出ていて、マルディーノというマルツ部品屋で売っているものもあります。
「Arduinoを使って工作しよう!」みたいなArduino関連書籍もたくさん出ていますが、その中で使われているのはほとんどArduino Unoと言っても間違えではないくらい多く使われています。ちなみに大きさは大体てのひらに乗るくらいの小さいものです。
Unoについての説明 それでは、Arduine Unoについて細かい説明をしていきたいと思います。下の画像に番号がふってあるのでその順番で説明します。
1.プロセッサー
プログラムの実行や制御を行う中核となる部品です。メインメモリーやプログラムなどを保存しておくフラッシュメモリーも同梱されています。
2.USB ポート
USBケーブルを差し込み、パソコンとの間で通信を行うためのものです。パソコンで作成したプログラムをケーブルを使って書き込んだり、Arduinoとシリアル通信を行ってパソコンから制御できます。
3.電源ジャック
ACアダプタを接続してArduinoに電気を供給します。
4.リセットボタン
Arduino を再起動するボタンです。プログラムを実行しなおしたいときやArduinoの挙動がおかしくなった場合に使います。僕は展示してあるロボットがちゃんと動かなかったときによく押していましたが、リセットというぐらいだから押して、プログラムをもう一度入れなおし、ちゃんと動くものだと 思っていたのに、これを押しても少し動作が止まるだけでした。なので、あまり使う機会はないと思 います。
5.各種インターフェース
Arduinoの上部と下部にある、電子回路に接続するための小さな穴の空いたソケットです。それぞれのソケットにはGND,Digital5,5V,Analog0などの役割があります。図の上側は主にDigital, 下側は主にAnalogや5V,3.3Vなどの出力です。
6.LED
Arduinoの状態を表示するLEDです。パソコンを使ってシリアル通信をしている時には、TXとRXが点滅します。
その他のArduino 最後にArduino Uno以外のものを紹介します。これらを使用するときには、ソフトウェアのツールから、ボードを選択して、使いたいArduinoの種類を選択する必要があります。
Arduino Mega2560 全自動鍵盤ハーモニカ演奏機(?)でも使われているUnoより大きいArduinoです。その特徴は、圧倒的なピン数の多さ。価格は5800円。
Arduino Due Megaとほとんど変わらない見た目ですね。はっきりいって値段ぐらいしか違いがわかりません。デジタルのピン数が54本とUnoの4倍です。またUnoの約5倍の処理を行えるそうです。価格は6264円
Arduino Micro Unoより小さいものとなっています。このタイプは、ブレッドボードとよばれるハンダ付けなしで回路を作ることができるものに差し込んで、使うものだと思われます。大きさも小さいモノ消しゴム2個ぐらいだと思います。価格は、3893円。
Arduino Nano Microよりも小さいArduino。デジタル入出力とアナログ入力の切り替えができないそうです。Microよりも一回り小さくなっていて、これもブレッドボードに差し込んで使うものです。価格は4546円
最後に さていかがだったでしょうか。少しでもArduinoというものについて、わかっていだだけたでしょうか。また興味を持った、電子工作にさらに興味を持ったのであれば幸いです。
今年は部誌に関して特に何も言われてないのでとてものびのびと書くことができました。そして、最後まで読んでいただきありがとうございました。また物理部展2017 にお越しいただきありがとうございました。
参考文献 「これ1冊でできる!Arduinoではじめる電子工作超入門改訂第2版」
ランセンス情報 2022年9月追記：WEB版の発行にあたり、著作権の兼ね合いから画像を一部差し替えました。ライセンス情報を以下に記載します。
Arduino Unoの写真：oomlout様(画像出典リンク)、CC BY-SA(表示・継承) 2.0(二枚目の写真はこれを改変したものなので、同じライセンスが適用されます) Arduino Mega2560の写真：Adafruit Industries様(画像出典リンク)、CC BY-NC-SA(表示・非営利・継承) 2.</description></item><item><title>"落ちる"動きと当たり判定のプログラミングについて</title><link>https://asanobuturi.github.io/document/2017/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2017/2/</guid><description>こんにちは。ここでは、2Dのアクションゲームがどのように動いているか、簡単に見てみたいと思います。ここで説明しているのは、2Dのアクションゲームを作るにあたって、ほぼ自分で考えたものなので、実際の物とは全く異なるかもしれませんが、どのようにゲーム が動いているのか少しでもわかってもらえればと思っています。
フレームとは？ まずは、「フレーム」について説明します。
実は、パソコン・スマホ・テレビなどの映像は、1秒間に数十枚の画像を表示して、動いているように見せています。ゲームでも、1秒間に60枚の画像(1枚あたり1/60秒)を入れ替えることが多いです。そして、その1枚1枚の画像のことを、「フレーム」といいます。ふつう、ゲーム内では、1/60秒の間に次の画像を用意して、1/60秒経ったら入れ替えて・・・ということを繰り返しています。
落ちる動きについて 次に、重力について説明したいと思います。
例えば、ゲームで高いところから落ちると下に落ちますよね。この動き方を作るのは簡単そうに思えますが、実は少し難しいのです。 単純に、1フレーム当たり1ずつ下に落とすようにすると変な動き方になってしまいます。物を落としたとき、加速度は一定だから、物 体の速度は時間に比例して大きくなっていくので、1フレーム目は1、2フレーム目は2、3フレーム目は3ずつ落ちるようになります。そうすることで本当に落ちているように見えます。では、ジャンプもさせてみましょう。1フレーム目は10上に、2フレーム目は9上に、11フレーム目は0、12フレーム目からは落ちる動きと同じようにしてみると、うまくジャンプできます。
(少しプログラミング的なことを言うと、例えば、重力の変数gを用意しておいて、gには1フレーム当たり0.3ずつ増やし、プレイヤーのy座標に1フレームずつgを足して、ジャンプのキーが押されたときにgを-20にするとジャンプができます。)
当たり判定について 最後に、当たり判定について説明したいと思います。
当たり判定と言っても色々ありますが、ここでは、1つの正方形のブロックと、長方形のプレイヤーとの当たり判定について説明していきます。これも、簡単そうに見えて実は難しいのです。どうしてかというと現実世界では、ものが動くとき、連続的に動きますが、ゲームでは1/60秒ごとにプレイヤーを動かしているので、連続的には動きません。プレイヤーがブロ ックに当たったら止めるという処理だけだと、ブロックに埋まってしまいます。そこで、ブロックに埋まったら押し出すという処理が必要になります。ここでは、その押し出しをどのように実装したか、説明したいと思います。
まず、あるフレームでプレイヤーがブロックに当たったとしましょう。その1つ前のフレームで、プレイヤーがどこに居たかで場合分けをします。
(1)1つ前のフレームで、ブロックよりも上にいた場合
この1フレームの間に、ブロックの上側の辺に当たった可能性が高いので、プレイヤーをブロックの上側に持ってくる。
(2)1つ前のフレームで、ブロックより下にいた場合
この1フレームの間に、ブロックの下側の辺に当たった可能性が高いので、プレイヤーをブロックの下側に持ってくる。
(3)それ以外のとき(図の2本の横線のどちらかにあたっていた、またはその間に入っていたら)
〈1〉1つ前のフレームで、ブロックより左側にいたら
この1フレームの間に、ブロックの左側の辺に当たったのプレイヤーをブロックの左側に持ってくる。
〈2〉1つ前のフレームで、ブロックより右側にいたら
この1フレームの間に、ブロックの右側の辺に当たったので、プレイヤーをブロックの右側に持ってくる。
〈3〉それ以外のとき(1つ前のフレームも埋まっていたら)1つ前のフレームで埋まったのに押し出せていない?
このような場合分けをしてみたところ、それっぽく動きました。
では､ブロックがたくさんあるときはどうでしょう。単純に、それぞれのブロックに対して同じことをすると、例えば図のようにプレイヤーが動いたとき上の当たり判定の方法でやって見ましょう。一番上のブロックで押し出しをやってみると、1フレーム前のプレイヤーは一番上のブロックより下にいたので、ブロックの下側に持って行きます。そして、二番目のブロックでは、1フレーム前のプレイヤーは左側にいたのでブロックの左に持っていきます。すると、ブロックが縦に並んで壁のようになって、左側にしか当たりそうにないの に、その壁のブロックに頭をぶつけたようになってしまいます。
そうならないように、ブロックがたくさんある場合は、先にすべて左 右の当たり判定をしてから、そのあと、すべての上下の当たり判定をします。
というわけで、少し説明してみましたが、どうでしたか。分かりにくいところもあったと思いますが、少しでも、ゲームがどのように動いているのか興味を持ってくれたらうれしいです。ここまで読んでいただきありがとうございました。</description></item><item><title>「AMD反撃！シェアを犯されるIntel」</title><link>https://asanobuturi.github.io/document/2018/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/13/</guid><description>どうも、二回目ですが中二の鈴木です。それだけですが...
ここ最近CPU市場はCoffee lakeやZen+に沸いていますね。今後もIntelの8コアや7nm Zenが楽しみですね。ここでは、以前のIntelのSandy Bridgeベースのプロセッサや、AMDのBulldozerベースのプロセッサとは違うZenベースコアの仕組みについて解説します。
Zenアーキテクチャは何が違うのか そもそもZenとは、AMDがCore iでIntelにシェアを奪われる中2012年に開発が始まったアーキテクチャだ。Zenの開発にはかの有名な天才開発者、ジム・ケラーが関わっており、AMDにとってはBulldozer以来のアーキテクチャの更新となった。ZenベースのCPUは競合するCore i系のプロセッサより多コア、低価格なことが一般的に言われている。まずもってそれはどうしてなのか、という話である。
回路構成の効率化 ZenアーキテクチャはIntelの競合する価格帯の製品よりダイサイズが小さい。半導体を製造する上でダイサイズは非常に重要で、歩留まりにも大きく関わってくるのだから小さければ小さいほど良いのだ。
「ロードマップでわかる！当世プロセッサー事情」では、「そもそも昨今では、14nmプロセスと言いつつも、実際には14nmの寸法になっている部分は1つもない。その代わりにFin Pitch(プレナー型トランジスタの場合はTransistor Pitchなどとも呼ぶ)とCPPを使ってプロセスの大きさを判断することが普通だ。
これに関しては以下の経験則(ASML Formula：ASML の法則)がある。
\[ ノードサイズ = 0.14 × ({CPHP} × {MMHP})^{0.67} \]
CPHPはCPPの半分、MMHPはFinPitchの半分をそれぞれ示す値で、上の数字を使うとRyzen(GlobalFoundriesの14LPP)は13.70nm、Skylake(インテルの 14nm)は11.66nm相当になる。^1」と分析している。 プロセスの微細化という面ではIntelの方が攻めた構成を採用しており、AMDの方が微細化のみで見ればIntelよりダイサイズが大きくなるはずである。理由はどういうことか、それは、アーキテクチャの更新で不要な回路を設計段階で省き（Intelのメインストリーム用途プロセッサではハイエンドデスクトップ用途やサーバー用途のCPUで必要な回路を無効化して居る場合が多い）、同じ回路でもダイサイズを小さくすることを成功させているのだ。こうした効率化で低価格化を実現しているのだと推測する。Zenアーキテクチャの欠点として、コア間レイテンシが挙げられるが、実測値でそこまで処理速度に悪影響を与えているのではないとされている。また、シングルコア性能の低さも挙げられるがそれは今後のアーキテクチャの改良によって改善されていくことだろう。実際、Ryzen1000シリーズより2000シリーズでは微増とはいえシングルコア性能が改善している。Zen2にも期待だ。個人的にはこのBulldozerの失敗を生かしコンピューターでの開発に頼ることなく、人の手で設計したのも大きいと感じている。実際、Bulldozerはアーキテクチャとしての出来上がりは微妙な物だった。また、近年のアーキテクチャの微細化、効率化でダイサイズは組み込み用途で利用されるアーキテクチャの大きさに近づいている。微細化で製造コストが上がったのも一つ理由だが、わざわざ開発リソースを割き組み込み用とのアーキテクチャを開発するより、メインストリーム用途のアーキテクチャをそのまま組み込み用途にも利用できた方が得策と判断したのだろう。Zenアーキテクチャの消費電力を考えれば十分可能な話だ。
Zen発表を受けてからのIntelの対応 一方で、Ryzenで反撃されたIntelも黙ってみているわけではない。元々Ryzen 1000シリーズ(Summit Ridgeと呼ばれる)が出るまではハイエンドデスクトップ用途は Core i7 68xx,69xx(Broadwell-Eと呼ばれる)で対応していたのが、Ryzen 7 1800Xは Core i7 6900Kレベルと宣伝されてしまったが為にいくらかシェアをAMDに奪われてしまった。実際、IntelはAMDがRyzenの販売前に製品のレベルが低いと自作でも、メーカーでも採用する例が減ってしまったが為にIntelのシェアが増え、Intelの独占状態が続きIntelも価格をつり上げていた状態があり、AMD はうまいことその点を突いたのだ。筆者も自作機を組む予定で最初はCore i7 6850Kを使う予定で居たのがRyzen発表でRyzen 7 1800Xで組むことにしたのだ。1年半経った今ではCoffee lakeやPinnacle Ridgeといったより優れた製品が市場に送り出されているが、当時としたらたいそう驚いた物であったことを記憶している。並列処理については依然強いので例えばゲーム 2 つ、ブラウザ、動画再生なんてことも楽々出来ている。Intelは対抗製品としてSky lake-XやKaby lake-Xを発表し、それがIntel特有の高い消費電力と、何しろ今まで消費者を舐めきっていたのかと思わせるほどのプライスダウンだった。結果。Intelと AMDの価格競争構図が生まれRyzenを買わないユーザーでも恩恵を受けたのは大きいと感じている。今後もこの競争には注目できる。
今後のプロセス微細化の展望 話が変わるが、今度はプロセスルールの微細化の話だ。現在半導体メーカー各社はプロセスの微細化を続けており、現在は16nm(NVIDIA)、14nm(Intel)、12nm(AMD)程度まで微細化が進んでいる。この微細化競争の背景にあるのは「ムーアの法則」と呼ばれる経験則が根底にある。（よくムーアの法則は物理法則と誤解されることがあるが、ムーアの法則は集積回路上の部品辺りのコストが最小になるような回路の複雑さを定義した経験則に基づいた将来予測であり、誤解してはならない）しかし今日「ムーアの法則は終わった」と言われることがあるが、それはどういうことなのだろうか。
これまでのIntelの微細化 Intelは元々ムーアの法則に基づき、Broadwellで22nmから14nmへ微細化させ、Sky lakeでそれを最適化した回路を構成し、Cannon lakeで10nmに微細化し、Ice lakeで最適化、Tiger lakeで...俗に言うIntel Tick-Tockである。
10nmで製造された製品は果たして発表されるのか Sky lakeまでは何とかIntel Tick-Tockを維持させてきた（厳密に言えばBroadwellもかなりずれ込んで一回Haswell-Refreshを挟んでいる）が、Sky lakeの先、Cannon lake、もとい10nmの開発が遅れたことや 14nm の設備投資の回収が進んでいないことから 2016(2017)年の新製品はKaby lakeで 14nm+として出荷されることになった。おまたせ。と Intel が出してきた次期プロセッサは.</description></item><item><title>「コイルの用法！コイルガンの逆襲」</title><link>https://asanobuturi.github.io/document/2018/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/12/</guid><description>こんにちは。中二の鈴木です。今回の物理部展ではコイルガンを出展しましたが、それと関連しコイルの原理を物理的な観点から説明し、その応用としてコイルガンの解説をします。難解な語句も頻出しますが、そこは注訳を参考にして読み進めて頂けると幸いです。
コイルとは何か そもそもコイルとは何か？コイルとは紐状の物を渦巻き状、らせん状に巻いた物をそう呼ぶ。コイルはバネとして利用する時、圧縮コイルの場合は圧縮すると自己の弾性力で抵抗する力が、引張コイルの場合も引っ張ると自己の弾性力で抵抗する力が生まれる。コイルばねは荷重に比例して弾性力も増加し、なおかつ生産が安価で可能な為幅広い分野で利用されている。一昔前までは乗り物等にも客室の動揺を低減するために利用されていた。（今は空気ばねが主流だが...）
電磁石としての利用 電磁石として利用する場合、導体に電流を流すと僅かな磁力が発生するが、その力をコイルとして巻かれた導体で発生させる。すると纏まった磁力、要は磁性体を近づけると反応したりするような強さの力になる。これは巻き数を増やせば増やすほど増大する（注:これは導線が電気抵抗のない理想的な状態でのことであって、実際には巻き数を増やすと電気抵抗が増大するため電流が減り、実際の磁力が単純に増えていく訳ではない）。
電磁石の利用法としては、主にモーター、リレー（継電器とも呼ぶ）、ソレノイド等が一般的に挙げられる。あまり一般的ではないが、ここでは電磁石の利用法としてコイルガンを解説することにしよう。
コイルガンとは何か コイルガンとはその名の通りコイルの磁力で弾丸を加速させ、対象物に発射するものである。中空状のコイルに磁性体の弾丸を押し込み、同時に電流を流すと、コイルが磁気を帯びるため弾丸は中央方向に吸引される。しかし、そのままでいると弾丸が中央で留まってしまい、弾丸を発射することは出来ない。そこで、弾丸が中央付近まで吸引されたと同時に電流を切り、そのまま惰性で発射してしまうのだ。この仕組みを実現するために主に大容量、高耐電圧のコンデンサーを半導体スイッチで一瞬だけ電流を流す。機械的なスイッチでは損失が大きく、また大電流で接点部分が溶着してしまうことも考えられるためこのような大電流を扱う分野で利用することは少なくなっている。
コイルガンの効率の低さと、その解決法 この単純なコイルガンでの効率は 5%程度しか出せない。理由としては主にコイルの磁力不足、コイルの電気抵抗による損失、コイルと弾丸との距離やデンサーの通電時間とコイルの長さが合わず、弾丸が引き戻されてしまうことが挙げられる。
コイルの巻き数を増やす コイルの磁力不足の場合、コイルの巻き数を増やすと磁力が増し、その分弾丸を吸引する力は増大する。しかし、その場合電気抵抗が増大し損失が増え、また通電時間が長くなりコイルの長さを調整しないと弾丸が中央を越えても通電し続け弾丸が引き戻されてしまう欠点がある。
弾丸を誘導しコイルを巻くパイプを薄いものにする パイプを薄いものにすれば、その分弾丸に働く磁力は増大するが、パイプの強度が下がりコイル巻きの途中や使用中に折れてしまう危険がある。そこで薄く、丈夫なアルミパイプを使うと強度は上がるが渦電流が流れ効率が下がる原因になる。渦電流とは、伝導体を磁場内で動かしたりして生ずる渦状の誘導電流である。これが物体の運動を妨げる力として働いてしまい、コイルガンにとってはやっかいなものだ。極端な話モーターの鉄芯と同様にケイ素鋼板を積層させたものを使う等の対策をすれば良いのだが、それを個人レベルでやるのはほぼ無理であるため、大抵はアクリル等のプラスチック製パイプを利用する。アクリルだからと言って、弾丸の動きは速すぎて見ることも出来ないことは断っておこう。
コイルの抵抗を減らして通電時間を短くする コイルの電気抵抗を減らすとそもそもの電気抵抗による損失が減り、その影響で電流が増大し結果的に通電時間も短くなる。しかし、一般的にコイルに利用されるエナメル線の導体は銅。これ以上電気抵抗を減ずるには金か銀を利用するしかないが、当然高価すぎるので無理な話である。導体断面積を大きくすれば電気抵抗は減るが、巻き数が減るため磁力も減る。超伝導を使うなんて夢のまた夢だ。
コイルをコンデンサーの容量、電圧に合った長さにする コイルの長さを調整すれば、通電時間が長すぎてコイルが引き戻されることは避けられる。それが一番確実である。
コイルとコンデンサーの回路を増やし多段式とする また、多段式とすると一つ一つのコンデンサーを小容量化しても威力を確保することが可能になり、総じて制作価格を低減させられる。さながら一つのコイルガンで加速した弾丸を次のコイルガンで加速しているようである。しかし、二段目以降のコイルは電流を流すタイミングが重要になり、タイミングを誤ればかえって効率を低下させる原因にもなりかねない。対策としては、タイマー回路やマイコン制御で通電間隔を調整する、或いは赤外線ダイオードとフォトトランジスタで弾丸を検出することが考えられる。しかし前者は調整がとても面倒で、後者は赤外線の扱いの難しさがある。
コンデンサーを効率良く利用するための工夫 コンデンサーの容量は静電容量×電圧²で、電圧が高い方がより多くのエネルギーをためることが出来る。その高電圧を得るため大抵のコイルガンでは昇圧回路を挟み、250~400V程度に昇圧してからコンデンサーに電力をためる。昇圧回路には昇圧チョッパ回路が利用される昇圧チョッパ回路は直流電源とインダクタ、またインダクタ～GND方面と負荷の方面で切り替えられるスイッチで構成される。実際はそのような機械的なスイッチは損失が大きいため片方で半導体スイッチによりOn/Offを制御し、もう片方はダイオードで逆流を防ぐ。スイッチがOnの時、電源～インダクタ～GND が導通しインダクタに電流が蓄えられる。スイッチをOffにすると電源～インダクタ～負荷～GNDが導通するが、インダクタに蓄えられた電流はすぐに無くなることがないので、ダイオードを介して高圧側に注入される。これで昇圧回路が成立する。
このように、一通りコイルガンの仕組みについて解説してみた。まだ経験の浅いこともあり違和感のある説明になってしまったかもしれないが...
参考にさせていただいたサイト EML 制作記録(仮)『コイルガンの作り方というか考察』 http://emllaboratory.blog.fc2.com/blog-entry-9.html 多段式コイルガン『多段式コイルガンの仕組み』 http://yorozulab.web.fc2.com/msc/mscoil.html Energy Chord『昇圧チョッパ回路の原理イメージ』 http://energychord.com/children/energy/pe/dcdc/contents/dcdc_boost_intro.html</description></item><item><title>「競争」</title><link>https://asanobuturi.github.io/document/2019/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/7/</guid><description>はじめに読もうね！ 浅野学園物理部の展示に来てくださり、そして、この記事を読んでくださりありがとうございます。
部誌っていうのは例年、その一年間部活動において何をしたか、どんなことをしたか、っていうの を書く場という雰囲気がありますが、特に規則があるわけではないし、普段物理部がやっていることは他の方々が十分というほど、紹介してくれているので扱うのは少しにします。
正直、部誌に中途半端に専門的なことを描くことを好みません。
理由は２つありまして…
一つ目に、専門的な知識を持った人から見ると退屈であること。
二つ目に、興味はあるが、あまり知識を持っていないという人が読んだときに何が書いてあるかは っきりとわからないことが多いということ（実体験）。
です。
要するに、自分と同じくらいのレベルの人からしか評価を受けないからです。
なので僕は、物理あるいはプログラミング、電子工作に興味がある人ない人、関係なく読んでもら いたいので、そういった知識が必要になることが少なくなるよう、持論を展開することにしました。そこで、昨年の文化祭から今までに僕がフラッと考察した「競争」することがどんな影響をもたらす かについてちょっとした考察を紹介させてください。
競争について競争ってイイコト？ そもそも、「競争」とはどういうことでしょうか。「競争」というのは、二つ以上の物や人が互い に優劣を争うこととされています（Wikipedia「競争」を参考）。
つまり、競争とは、必ず競う相手がいて成立するものとなっているので、そこには、団体戦であっ たら「それぞれの団体」だったり、完全に個人戦であったら「個人」というものが、おのずと確立されるようになるでしょう。
そして、競争することによってその相手達よりもより良くなろうとして自己の能力の向上を図るこ とができるのです。加えて、競争し終えた後に、その相手との仲が深まることもあり得ます。
というわけで、「競争」がどういった場面にあるかを紹介していきます。
競技プログラミング唯一の物理部関連 「競技プログラミング」とは、出された問題をなるべく早く正確に処理するプログラムをつくる、 という競技のことです（アルゴリズムについての記事がより詳しく説明しています。）。僕らは自宅で参加可能なコンテストに個人で参加しています。
ここ最近、物理部のPC班員の中で、僕を含めて3～4人くらいの人が競技プログラミングに手をつけていて、他の部員との勝ち負けや、知らない人を含めた全体の順位で競ったり、ゲーム感覚で新た な分野への技術的発展に努めています。
僕が参加しているコンテストはだいたい週に一回、土曜日もしくは日曜日の夜に開催されていて、 そのコンテストが終わった後は参加した物理部員によって、この問題までできただとか、こういうやり方のほうがいいだとか、どっちのほうが速かったとか、ほとんどわかっていたけどちょっとミスし ていた愚痴などのチャットで溢れかえります。
そして、次の部活動の際にできなかったところを先輩に質問したりすることで、交流が増えてにぎ やかな雰囲気になります。
こうして物理部内では、競争を頻繁に経験することで、お互いに切磋琢磨して、プログラミング技 術向上に向けて日々精進しております。
ライバルの存在物理部ネタ終了 こういったことはもちろん、競技プログラミングに限らず、私生活のあらゆる部分に当てはまりま す。
例えば、勉強面において「こんなやつよりはいい点取りたい」とか、「今回こそはこの友達より良 い順位とってやる」などといった目標や意気込みがあると、勉強もやる気が出てくるはずです。
その他の場面でも「こいつよりはいいことしたい」、「あの人と同じくらいできたら良いな」、「あの人のためにやってあげよう」のように、やるべき理由を見出すことができれば、やる気も多少 は出てくるでしょう。競技プログラミングでも、今日こそは買ってやるぞ、と思えば、やる気がみなぎってきます。
いい意味でも悪い意味でも、こういった「ライバル」を見つけると、自然と評価が変わってくるか もしれません。
資本主義いきなり国家レベル 最後に紹介したい競争の例が「資本主義」です。スケールが今までと違いすぎる気はしますが、言 いたいことは同じです。
2024年度上期からの新しい一万円札のデザインになる渋沢栄一*1は日本資本主義の父と称されるほど、西欧から日本に資本主義の考え方を普及させた人とされています。今では当たり前になっている資本主義、とは一体どんな考え方なのか説明します。
資本主義というのは国家の経済の体制の一つで、現在多くの国がこの体制を採用しています。特に 東西冷戦の終わったあとには殆どの国が資本主義を採用していました。その中でもアメリカは、冷静以前から資本主義国として最も有名な国です。
資本主義を構成する主な要素に、
何をどれだけ作って、いくらで売るか会社が自由に決められること(自由主義経済)
商品の売買に国家が介入することなく、市場*2に依存すること。
財産の私有が認められていること。
の三つがあります。このうち一つ目と二つ目が必然的に伴う「あること」によって経済が発展を遂げることになるのです。
それはもちろん、「競争」です。
資本主義経済のもとでは、誰もが会社を設立することができ、たくさんの商品やサービスを売って利益を追求することが可能です。しかし残念なことに、他の人もかんたんに会社を設立することができるので、そこにはライバルとなる会社が必ず存在します。
そうなると、それらの会社との価格や技術の競争に負けないように、どちらがより便利で、ニーズに合ったものを作れるかを日々考えなければなりません。その結果として、大きな技術の発展を迎えることができるのです。
注釈 「渋沢栄一」について：1830年~1931年。一代にして財閥を形成した、わが校設立者である浅野総一郎も彼の助けを得て大きく成長したとか…
「市場」について：シジョウ、と読む。イチバではない。「取引が行われている場所のすべて」のこととされる。例えば本の場合、本屋さんは市場の一部。それ以外にも、ネットショップやコンビニなど本が売られている場所をすべて含めると、市場になる。
さて、これで一応三つの「競争」の紹介は終わりました。ですが、もう少しこの記事は続きます。 資本主義の話に詳しい方や先のページが見えてしまった方はもう気づいているかもしれませんが、ここから先はもちろんアレでございます。
敗北と孤独共産趣味者はいないって？ 競争にはいろんないいところがあるということを紹介してきましたが、そんないいところだけの話 なんてあるわけがありません。これからは競争に付きまとう問題点に焦点を当てます。その問題は、競争の基本的な考え方にある「個人」の確立、そしてもう一つは、「敗北」です。
しかし、これらを克服すれば、必ずや充実した生活が訪れるでしょう。
まずは「個人」について。
競争をすると相手との交流も深まる可能性がある一方、小数ではあるかもしれませんが、やはり、他の人と仲良くしたいが、うまく馴染めない人も必ず出てくるはずです。その人たちが感じることは決して「友情」なんかではなく、「孤独」でしょう。
「孤独」を克服する方法については僕も時々考えることはあるのですが、やはり、解決が簡単ではないなとは思います。
僕が考えついた方法の一つは、なるべく多くの集団への所属を経験することで、他人と触れ合う機会を増やして、交流を深めることが良いのではないでしょうか。世の中には優しい人がたくさんいますから、そういう人に会えれば、孤独は解消されるはずです　そしてもう一つは、他人の中で孤独な人を見つけることです。自分と同じような境遇に置かれているということは、その人もおそらく同じ気持ちでしょうから、その人と絡むことでお互いに孤独が解消されていい感じになるのかなと思いました。</description></item><item><title>2045年問題(技術的特異点)についてちょっと説明</title><link>https://asanobuturi.github.io/document/2016/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2016/10/</guid><description>皆様は、「2045年問題」という言葉を聞いたことがあるでしょうか？「2045年問題」とは、「機械が人間を超えてしまうのではないか」という問題です。今回はこの問題について少し説明をしようと思います。
(※電子版移植時追記：基本的に原本に手を加えずに電子化を進めていますが、元データでは「人間が機械を超えてしまうのではないか」になっていたのでさすがに修正しました)
その前にまず、「収穫加速の法則」について説明します。「収穫加速の法則」とは、「新たに大きな出来事が起きるまでの時間間隔は、時間の経過とともに短くなる」というものです。例えば、人類が二足歩行になった時手が空いたので、今までやっていたことがもっと早くでき、ものを考える時間が増え、結果的に今までより早く新しい発明が起こったようにです。
なぜ今そのような話をするのか、簡単に言うと「このまま機械を開発していくと、近いうちに機械が人間を超えてしまう」からなんですね。最近のコンピューターは1.5年で2倍の性能になっている(ムーアの法則)と言われているので、このまま行くといつかは人間を超えてしまうのは納得できるでしょう。この法則を提唱したカーツワイルは「技術的特異点(2045年問題のこと)は近い」と結論づけました。
さて、「2045年問題」とは何でしょうか。ざっくり言うと2045年以降のことです。詳しく言うと「人工知能が人間の能力を超えることで起こる出来事」とされています。つまり、機械が人間を超えてしまうことで、今までの世界の法則が乱れてしまう可能性がある(または、る)ということです。最悪の場合、某タ○ミネータ○(I&amp;rsquo;ll be back👍)のように、機械が人間を不要とみなして暴力的に排除しようとしてしまうかもしれません(もちろんそうなった時には人間が機械に対抗する手段はありませんが)。おそろしあー。
更に恐ろしいことは、「人間を超えた機械が更にそれ自身を超えた機械を作る」ことです。この場合(理論上無限ループになるのですが)、最後に作られる機械の思考能力は、人間の思考能力の10の24乗倍にもなるという試算があります。その場合、その機械から見て人間は大きい石と変わらないのではないかとも言われているのです。
ところで、なんで2045年なのでしょうか？答えは簡単です。「収穫加速の法則で計算したら2045年だぜ」ということだけなのです。実際、「2030年までに起こるかもしれないぜ」といってる人や、「2100年までは大丈夫だろ」といっている人もいます。どっちにしろ、そう遠くない将来にこのようなことが起こると言ってることには変わりありません。
しかし、このような問題を否定している人たちもいます。「コンピューターの高速化は限界に達している」という意見や、「計算すべきことが無数にあるので、人間のようにあらゆる物事を実行する人工知能は作れない(モラベックのパラドックス)」などというものがあります。
もちろんどうなるのかはその時にならないとわかりません。しかし、私はこのようなことが起こらないで、人類が滅亡しなければいいなと願うばかりです。私の記事はどうでしたか？これで皆様が機械について更に興味を持ってくれれば幸いだと思います。
(10の24乗=1,000,000,000,000,000,000,000,000=/*すごく&amp;hellip;大きいです*/)
参考文(？)献 Wikipedia 技術的特異点
https://ja.wikipedia.org/wiki/技術的特異点
Wikipedia収穫加速の法則
https://ja.wikipedia.org/wiki/収穫加速の法則
http://www.nicovideo.jp/watch/sm21068977
↑技術的特異点、人工知能について説明した動画です。私がこの記事を書こうと思った理由です。</description></item><item><title>３を√５進数で表すと？</title><link>https://asanobuturi.github.io/document/2018/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/9/</guid><description>まずは0.1を2進数で表してみる。 整数をn進数で表す方法は学校で習った通りなのですが（知らない人はごめんなさい）、小数をn進数で表すのはなぜか習わないので、その方法を考えてみました。
2進数と10進数を分けて考えます。10進数で2倍にすることは、2進数で10倍にすることに相当しま2未満なら整数部分だけ比べるなら同じなので、図1のように計算でき、このように計算した結果が下です。
\[ 0.1 = 0.000110011001100110 \cdots \] \[ 0.2 = 0.001100110011001100 \cdots \] \[ 0.3 = 0.010011001100110011 \cdots \] \[ 0.4 = 0.011001100110011001 \cdots \] \[ 0.5 = 0.1 \cdots \] \[ 0.6 = 0.100110011001100110 \cdots \] \[ 0.7 = 0.101100110011001100 \cdots \] \[ 0.8 = 0.110011001100110011 \cdots \] \[ 0.9 = 0.111001100110011001 \cdots \]
では、3を(\sqrt{5})進数で表すと？ さっきのように、まずは整数部分を\(\sqrt{5}\)進数に直してから、小数部分だけ取り出して、それを\(\sqrt{5}\)倍し、その整数部分を書いて、小数部分だけ取り出して、...ということを繰り返すことで\(\sqrt{5}\)進数が計算できます。このように計算した結果が下です。
\[ 1 = 1 \cdots \] \[ 2 = 2 \cdots \] \[ 3 = 10.</description></item><item><title>AIを競技プログラミングで活用してみる</title><link>https://asanobuturi.github.io/document/2023/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2023/7/</guid><description>２回目の登場の中3のIです。
ここでは昨今進化が著しいAI、そのうちのChatGPT(GPT-3.5)というAIを使ってプログラミングをしてみよう！という内容で書いていきます。
そもそもChatGPTとは ChatGPTは、OpenAIによって開発された自然言語処理技術の一種です。GPT（Generative Pre-trained Transformer）というモデルの一部であり、大量のテキストデータを学習して自然な文章や会話を生成することができるAIです。GPT-3.5アーキテクチャをベースにしており、さまざまなタスクに対する応答や文章生成が可能です。
この文章は「ChatGPTとはなんですか?」という質問に、ChatGPTが返してきたものです。こんな感じで色々質問に答えてくれるAIです。
競技プログラミングってなんぞや 競技プログラミングとは、プログラミングスキルとアルゴリズムの解決能力を競うコンピュータサイエンスの競技です。主にオンライン上で行われ、参加者は与えられた問題に対してプログラムを書き、そのプログラムが一定のテストケースを通過するかどうかを競います。
競技プログラミングの特徴は以下のとおりです：
1.アルゴリズムの応用: 参加者は様々な問題に対して最適なアルゴリズムを設計・実装する必要があります。これにより、問題解決力や論理思考力が鍛えられます。
2.制限時間とメモリ: 解答プログラムは一定の制限時間内に実行され、またメモリ制限もある場合があります。したがって、効率的なアルゴリズムを使わなければならず、最適化の余地があります。
3.多様な問題: 競技プログラミングの問題は、数学、グラフ理論、動的計画法、文字列処理、幾何学など、さまざまな分野にわたります。これにより、幅広い知識とアルゴリズムの理解が求められます。
4.競技環境: オンラインジャッジと呼ばれるシステムを通じてプログラムを提出し、自動的にテストケースに対する結果が判定されます。正しい解答だけでなく、効率性も評価されます。
5.国際的なコンテスト: 競技プログラミングは国際的な大会も開催され、世界中のプログラマーが競い合います。有名な大会にはICPC（国際大学対抗プログラミングコンテスト）やCodeforces、Topcoderなどがあります。(ChatGPTより引用)
最近では就職試験で競技プログラミングの問題を解く必要があったりもします。(Google社など)
物理部でも多くの部員がAtCoderという競技プログラミングのコンテストに参加しています。
AtCoderについて 今回は先程競技プログラミングの例として名前を挙げた、AtCoderの問題でAIを試してみます。
AtCoderには様々なコンテストが難易度別に分けられており、一番簡単なABC(AtCoder Beginner Contest)や中級者向けのARC(Atcoder Regular Contest)、天才以外お断りパズルコンテストの異名を持つAGC(AtCoder Grand Contest)、アルゴリズムの最適解を求めるAHC(AtCoder Heuristic Contest)などがあります。
ABCの例
{width=500px}
実際にAIを使ってみる A問題 先ほど紹介したAtCoderの、執筆時点で最新のABC315のA問題「tcdr」を解かせていきます。
(https://atcoder.jp/contests/abc315/tasks/abc315_a)
ちなみにA問題はプログラミングの基礎であるif文、for文さえ書ければできると言われるほど簡単です。
とりあえず問題文だけ与えてみます
「英小文字からなる文字列Sが与えられます。Sからa,e,i,o,uをすべて取り除いて得られる文字列を出力してください。なお、Sはa,e,i,o,u以外の文字を一つ以上含みます。
この問題をC++で解いてください」
ChatGPTくん↓
「以下は、与えられた文字列からa,e,i,o,uを取り除いて得られる文字列を出力するC++プログラムの例です。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; int main() { std::string S; std::cin &amp;gt;&amp;gt; S; std::string result; for (char c : S) { if (c !</description></item><item><title>AMDのZen3について考える</title><link>https://asanobuturi.github.io/document/2021/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/6/</guid><description>はじめに 昨年の10月、AMDがRyzen5000シリーズを発売し、CPU業界は大きく盛り上がりました。この部誌ではどうしてRyzen5000シリーズがあれほど大きな話題を呼んだのか考えたいと思います。RyzenThreadRipperシリーズに関してしては大きく省いている点があること、また筆者の個人的な意見を多く含んでる場合がありますのでご了承ください。
## そもそもRyzen5000シリーズとは そもそもRyzenシリーズはAMDが2016年12月13日に発表したCPUのブランドです。これにより当時はIntelがCPU市場を独占していた状況に大きく風穴を開けました。
Ryzen1000シリーズはIntel製CPUに比べ、安価でクロック数が低い一方で、コア数、スレッド数が多いという点で人気を集めました。同時にIntelはCPUの開発に苦戦しており、多少性能を向上させた程度ものを別の世代として販売していたことから、Intelを見捨てた消費者も多かったことでしょう。
グラフを見ればわかるように、Ryzenの発売直後の2017Q1期(1月~3月)に、今まで下がり気味であったAMD製CPUのマーケットシェア率は上昇に転じています。
またデスクトップCPUに関しては2021,Q1(1月~3月)時点ではIntel製CPUのマーケットシェアを追い抜いています。これはおそらくRyzen5000シリーズ発売の影響でしょう。いろいろなWEBメディアでも大きく取り上げられていましたからね。 ちなみに混乱した方もいらっしゃったかもしれませんが、Ryzen5000シリーズはRyzenの第４世代の製品です。(Ryzen4000シリーズは第3世代のセキュリティ強化モデル)
Ryzen5000シリーズの特徴 いままでのRyzen7,Ryzen9シリーズでは、4コア+L3キャッシュ16MBを１グループとしてそれを複数搭載することによって多コアを実現してきましたが、Ryzen5000シリーズからは8コア+L3キャッシュ32MBを１グループとすることでコア間のデータ転送速度を大幅にアップさせ、また１つのCPUが大量のL3キャッシュに瞬時にアクセスできるようになりました。これによりCPUの性能は19%アップしたとされています。参考画像ﾎﾟﾝｯ
Ryzen5000シリーズのRyzen9ではこのグループを2基、Ryzen7では1基搭載しています。こうして性能が飛躍的に向上したにもかかわらず、Ryzenのコストパフォーマンスは維持され続けています。まあ実際すごいのはAMDではなくこのCPUの設計と製造を担当しているTSMCなんだけどね。
この先のRyzenについて すでにRyzen6000シリーズ(Zen4)の情報はリークされていますが、最大の違いはなんといってもソケットの変更でしょう。いままでのRyzenは、デスクトップ向け製品に関してはずっとAM4という規格のCPUソケットを採用し続けてきました。そのおかげでユーザーはマザーボードメーカーが対応してさえいれば「Ryzen1000シリーズのCPUを使ってきたけれどそろそろ性能に不満が…」となった際に簡単に世代を超えてCPUをアップグレードすることができたのです。しかしソケットの形状が変わってしまうとそれもかないません。 10年ほど前からIntelは2世代ごとぐらいにソケット形状を少しずつ変化させるという暴挙に出ていますが。 いままでこのアップグレードの簡単さがRyzenシリーズの売りであったような気もするので、これからパソコンを買う人の中ではRyzenシリーズを避ける人も出てくるかもしれませんね。まぁまだリーク段階なのでソケット形状が変わると確定したわけではありません。今後の最新情報に期待ですね！
終わりに 参考文献 CPUシェアグラフ　https://www.cpubenchmark.net/market_share.html AMD CCXに関する情報 https://www.gdm.or.jp/review/2020/1105/368230</description></item><item><title>AMラジオ製作記</title><link>https://asanobuturi.github.io/document/2016/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2016/4/</guid><description>初めに 僕は今回、文化祭に向けてAMラジオの製作をしたので、それについて簡単に記したい。
製作内容 今回造ったラジオはAM専用で、トランジスターを一個使った（いわゆる一石ラジオ）ものである。
上記が回路図です。
今回使った部品は、主にメインとなるトランジスタ（２SC１８１５）、炭素被膜抵抗、ダイオード、ポリバリコン、電解コンデンサー、ほかにはアンテナとなるミノムシクリップを使ったケーブル、エナメル線を使ったコイル、スイッチ、クリスタルイヤホンである。電池は、９Vのものを使用している。電子部品の基板に関しては、ラグ板を使用した。作成手順としては、まずラグ板に部品をはんだ付けし、その後コイルを自作、そしてラグ板とバリコンを導線でつなぎ、電池系のケーブルなどをはんだ付けし、方眼紙のケースに固定した。上の写真は、製作途中のものである。
所感 比較的簡単だろうと最初は高をくくっていたが、まず、コイルの自作が一番難しかった。コイルを作るうえでは方眼紙で円柱を作らなければいけないのだが、そこできれいな円柱を作ることができなかった。(方眼紙はケースなどにも利用したが、正直言ったところやわらかいかもしれない。)また、エナメル線を巻くときに、線が絡んで玉のようなものができてしまったり、円柱の表面に線の巻けていない部分ができてしまったりするなど、案外コイルの自作は難しいものだと思った。コイルができても、保管中にコイルの輪が外れるなど、維持も大変であった。このようにコイルで大幅に苦労した。また、ラグ板やポリバリコンの端子に部品をはんだ付けする際、一か所にコイルの線やケーブルが何個か重なる部分があり、すべての部品にはんだをなじませるのが大変であった。また、完成後もなかなか動かず、苦労した.また、アースをつけるとかなり音がよく聞こえた。
おわりに 以上製作の所感などを書いてきた。意外と苦労するところもあったが、非常に勉強になるとことも多かった。お読みいただきありがとうございました。ご参考になれば幸いです。
参考文献 「ゼロから理解する 世界一簡単なトランジスターのきほん 伊藤尚未 誠文堂新光社 ２００８」</description></item><item><title>Facto</title><link>https://asanobuturi.github.io/game/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/game/1/</guid><description>文化祭のゲームがWebに登場！
同じ約数を持つ数をつなげて消すだけ
サイズ：約 0.5MB</description></item><item><title>n進法のおはなし</title><link>https://asanobuturi.github.io/document/2022/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/8/</guid><description>初めに この文章を読むにはn進数の基礎知識が必要です。 内容の転載・改変・再配布を禁止します。 内容に関しての質問や、誤字脱字の報告はs2019188@asano.ed.jpまでお願いします。 筆者は淡泊なので文章が味気ないですが、それでもよろしければお楽しみ下さい。
負のn進数 私の知る限り、一般に基数は自然数であるとされています。 しかし基数が自然数でなくても大丈夫です。 というわけで今回は-2進数を紹介します。
四則演算 四則演算は、繰り上がりなどの演算法則が分かればOKです。 足し算&amp;hellip;1+1=110で、1つ上の位に1があったら打ち消す。 $$ (-2)^n+(-2)^n=(-2)^{n+1}*(-1)=(-2)^{n+1}(-2+1)=(-2)^{n+2}+(-2)^{n+1} $$ 引き算&amp;hellip;0-1=11が分かれば他の計算もできると思います。 $$ 0-(-2)^{n}=(-2)^{n}(-2+1)=(-2)^{n+1}+(-2)^{n} $$ -1をかけて足す、というのも可能です。(面倒ですが) 掛け算&amp;hellip; 途中まで2進数と同じように計算して、足すときだけ上記の手法を使う。 割り算&amp;hellip; まだ理解できてないので、説明できません。 宿題ということにします。
2進数を-2進数にする けっこう面白そうですよね。 10進数に直してから-2進数にするのはつまらないので、直に変換します。 人によって考え方が違うと思いますが、私のやり方を書きます。 2進数のある桁は、-2進数に変換出来ます。 偶数乗の桁はそのままです。 奇数乗はその位と1つ上の位に足せばいいです。(上の引き算と同じ) あとは足し算するだけです。 これならプログラムにもできますね。 (プログラムではこんな無駄で複雑なことしませんが)
10進数を変換する 生きていると、10進数を他の記数法にすることがよくあります。 整数なら簡単ですが、小数だと同様には計算できません。 そんな時はこんな風に計算をします。 例:1.2を2進数にする $$ (\frac{1}{4})^{n}の位の数をa_nとする(n:非負整数,0 \leq a_n &amp;lt;4,a_n \in Z)$$ $$ 1.2=a_0+a_1*(\frac{1}{4})^{1}+a_2*(\frac{1}{4})^{2}&amp;hellip; $$ $$ a_1以降の和は0以上1未満だからa_0=1$$ $$ 両辺からa_0=1を引き、2をかけて$$ $$ 0.4=a_1+a_2*(\frac{1}{4})^{1}&amp;hellip;$$ $$ a_1=0$$ $$ &amp;hellip;&amp;hellip; $$ 循環するため、1.2=1.\dot001\dot1 $$
で、ここまでならある程度数学を学んでいる方は知ってると思うんですけど-2進数で同じことをやろうとすると出来ないんですね。
例:0.8を-2進数にする $$ (\frac{1}{-2})^{n}の位の数をa_nとする(n:非負整数,0 \leq a_n &amp;lt;|-2|,a_n \in Z)$$ $$ 0.</description></item><item><title>PC-98でのグラフィカルゲームの作成</title><link>https://asanobuturi.github.io/document/2023/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2023/8/</guid><description>PC-98(with Turbo C)でのマインスイーパーの制作記。
なぜマインスイーパーか 全てがイベントハンドラで書くことができ、厳密なtick管理などが不要で楽。 程よく複雑で勉強に最適。 知っている人が多く、文化祭での展示に丁度良い。 使用する物 PC-9821Xa10 MS-DOS Version 6.20 Turbo C++ Version 4.0 コード 定義部 グローバル変数を定義する。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 const int origin_x = 65; // (0, 0)のマスの左上x座標 const int origin_y = 77; // (0, 0)のマスの左上y座標 const int mines = 10; // 地雷の数 int mode = 0; // `graphics.h`の初期化時に必要なモード番号 int driver = 0; // `graphics.</description></item><item><title>PC-98でファイル転送 with FTP</title><link>https://asanobuturi.github.io/document/2023/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2023/10/</guid><description>インターネットが、見たい。
そういう欲求で書こうと思ったわけではありませんが、物理部に書き込み可能なCDは殆どないので必然的にPC-98とのデータ移動は卍フロッピーディスク卍に限られるわけですが、せいぜい数百Kb/sが限度のフロッピー君を書き込み/読み込みを行い(挙げ句の果てにUSB-FDDが壊れた)、その上に物理部の超低速回線でデータをダウンロードしてFDDがある倉庫からPC-98がある教室までフロッピーを運ぶ手間もあるわけですので、相当遅くなるわけです。
しかしLANならどうでしょうか。我々が使用しているLGY-98というLANカードはIEEE802.3という規格でその速度は10Mb/s、実に2HDフロッピー君の20倍の速度です。これならファイルの転送もスイスイできます。素晴らしいですね。ではやっていきましょう。
ドライバの入手 前述の通り我々はLGY-98というLANカードを使用しているのでBuffalo公式サイトからDLしました。自己解凍形式なので適当なディレクトリを作成してその中で実行しましょう。(私はそれを知らずにAドラ直下が地獄と化しました)
ユーティリティ MELCHK.EXE ・・・ カードの状態をチェックしてくれる。 LGYSETUP.EXE ・・・ カードの割り込み番号やI/O番号を変えることが可能。 LGYSETUP.EXEで割り込みを変えるのなら変えておき、MELCHK.EXEで割り込み番号と割り込み番号を調べてメモしておきましょう。あとで使います。
両ツールともネットワーク使用中は使えないのでTCP/IPプロトコル(LAN Manager/TEEN等)のインストール前に実行することを推奨します。
1.LAN Managerを試す(失敗) 失敗したことを部誌に書くのもナンですが、インターネットに繋ぐことはできたので主目的を達成できた手段ということで記載しておきます。
LAN Managerの入手 Windows NT Serverのディスクから入手してください。CLIENTS/LANMAN/DOS_NEC/DISKS/のDISK1,DISK2,DISK3が必要です。セットアップ内ではDISK2はDOS WorkStation、DISK3はDOS Driversと呼称されます。(そういえばDISKはアメリカ英語らしいですね)
LAN Managerのインストール DISK1をFDDに挿入してSETUP.EXEを起動しましょう。拡張版を選択し二度違うディスクを挿入することを要求されますので挿入してあげましょう。
その後ドライバを尋ねられますので「その他ののドライバ」を選択し、先ほど入手したドライバのディレクトリ(私はA:\LGY98\)を指定し一つエントリが出てきますのでそれを選択しましょう。
{width=300px}
するとプロトコル選択画面になりますので「MS TCP/IP NDIS ﾄﾞﾗｲﾊﾞ」の項を選択してTCP/IPの設定が出てくるまで進めます。これは環境ごとに数値が変わりますが私は下画像のようにしました。
{width=300px}
{width=300px}
ワークステーションの設定ではADの設定を行います。(うちのドメイン名は長すぎて入りませんでしたが&amp;hellip;)メッセンジャーサービスも「いいえ」にしておきます。
{width=300px}
MS Windowsのサポートは「いいえ」のままでいきましょう。そうすれば設定が完了しますので保存を押し、ドライバのコピーが完了するとドライバの入手の際に決めたI/O番号とINTを打ち込む画面が出ますので先ほど設定した値を入力します。ここで注意なのが先ほど設定した値が割り込みレベル(INT)、今回設定するのは割り込み番号(IRQ)ですので対応関係が以下のようになっています。(割り込み番号に2とか入れると文法エラーを吐かれる)
INT 0 INT 1 INT 2 INT 5 IRQ 3 IRQ 5 IRQ 6 IRQ 12 私は5を割り込みレベルに設定しましたので割り込み番号は12を入れます。これでインストールは終了です。
その後は普通に再起動を行えばPING 8.8.8.8が通るはずですしPING GOOGLE.COMもちゃんと名前解決されて通るはずです。
なぜ失敗か このプログラム、ドメイン参加機能などを備えた高機能なプログラムなのですが、それゆえにメモリをバカ喰いします。 そのため、東方幻想郷を起動しようとしたらメモリが足りないと言われるわ、封魔録を起動したら音が出ないかったりするわで東方旧作系は全滅だったので、(ノベルゲーと前記のマインスイーパーは動いた)お役御免となりました。
アンインストールしましょう 一応正式なアンインストール手順を示します。
インストールディレクトリ(デフォルトではA:\LANMAN.DOS\)のSETUP.EXEを実行。 Grph → 登録/削除(L) → 削除(R)でダイアログが出るので「はい」を選択する。 {width=300px}</description></item><item><title>PC-猫だとわからない弊部のネットワーク</title><link>https://asanobuturi.github.io/document/2023/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2023/9/</guid><description>ここでは主に現在の物理部のネットワークインフラについて簡単にまとめられればと思う。わかる人にはわかる内容を目指すことをとりあえずの目標として書いている。
バックボーンネットワーク物理部では現在楽天モバイルの4G回線をメインネットワークに据えており、学校支給のChromebook以外の部活動に関する通信を担っている。電波受信の都合上モバイル回線のアンテナを物理教室(授業でも使用する教室)に設置せざるを得ないものの、後述するサーバー群を教室に置くことができない(ファン等の騒音・設置スペースの都合)ため、現在ではサーバー群の外部との接続時にネックとなっている。
物理部では現在6台のマシンが常時稼働状態となっている。
内訳としては以下の通り
Windows Server 2022 Datacenter Ubuntu Server 22.04 LTS Proxmox VE 7.4 (4台) それぞれのマシンの役割を説明するとWindows ServerではActive Directoryのドメインコントローラー及びファイル管理(NAS)やプリンター共有、Ubuntu ServerではVPN接続用のソフトウェアを常駐させている。Proxmoxでは1マシン当たり4つのUbuntu環境を同時に実行することで、部員がsshやrdp接続して開発や検証ができるようになっている。
これらの6台のマシンは物理教室と廊下を挟んで向かい側の理科倉庫に設置されている。物理教室との2拠点間はメッシュWi-Fiで接続されいるため、どうしてもここがボトルネックになってしまう。PLC等の手段もあるが各部屋のコンセントは別のブレーカーにつながっているようで導入には至っていない。</description></item><item><title>PC98という古いPCで曲をビープ音で演奏してみた</title><link>https://asanobuturi.github.io/document/2022/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/9/</guid><description>はじめに 皆さんこんにちは高2のN.Kです。今回はPC98で曲を演奏するという内容なのですがこの記事を書こうと思った理由の中に後輩へ技術を継承するということがあります。というのもPC98を扱える部員が私の4個上の代で途絶えており、私がこの企画をやるのに苦労したからです。もしかしたら後輩がPC98を扱うかもしれないのでしっかりと文章で書いておこうと思います。(いつまで部にあるPC98がもつのかわかりませんが&amp;hellip;)
PC98とは 物理部の文化祭に来てくださるのは小学生が多いので一応軽くPC98の説明をしておきます。 PC98とはNECが1982年から2003年まで製造・販売を行っていたパソコンのシリーズである「PC-9800」の略称です。 今回使っていくのは1995年発売のPC9821Xa10という機種で本体標準価格税別268000円だそうです。当時のPCの高価さがうかがえます。
PC98でのプログラミング 今回はC言語というプログラミング言語を、統合開発環境はTurboC++4.0を使っていきます。 統合開発環境とはテキストエディタやプログラミング言語を機械語に変換するコンパイラなどの機能を含むソフトウェア開発のための統合的なプログラミング環境のことでTurboC++は1987年にボーランド社から発売されたTurboCの後継である統合開発環境で今回使うver4.0は1995年に発売されました。
PC98での操作 PC98のOSはMicrosoftが開発したMS-DOSとなっており、基本的にはCUIと呼ばれる文字列でコンピュータに指示を与えてディスプレイに文字を表示して応答するUIとなっています。 基本操作はWindowsのコマンドプロンプトと変わらないのでそこまで難しくないです。 物理部のPC98にはFILMTNというフリーのファイルマネージャが入っているので案外コマンドを入力しなくても何とかなります。
日本語入力 日本語入力にはATOKというIMEを使います。入力中にXFER+CTRLを押すことで日本語入力になります。F7でカタカナなど後の操作は基本的に今と変わりません。
実際にコードを書く IDEを起動してコードを書いていきます。ここから先はソースコードの一部を公開して、解説していこうと思います。 ビープ音の高さは周波数で指定するので周波数と音階を対応させています。 長さはミリ秒で指定するので同様にミリ秒と音符の長さを対応させています。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 //音階 const int A = 440; const int AF = 415; const int AS = BF; const int B = 494; const int BF = 466; const int C = 262; const int CS = DF; const int D = 294; const int DF = 277; const int DS = EF; const int E = 330; const int EF = 311; const int F = 349; const int FS = GF; const int G = 392; const int GF = 370; const int GS = AF; //音符 const int eight = sixteen*2; const int four = eight*2; const int one = two*2; const int sixteen = 125; const int two = four*2; その次は音声再生用の関数を作ります。playmsg(音符,歌詞,音階,音程)で歌詞つきで音符を再生します。play()はそれの歌詞なし版です。</description></item><item><title>PWMについて</title><link>https://asanobuturi.github.io/document/2022/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/5/</guid><description>この記事はコロナ感染中に執筆しているため、もしかしたらおかしな所があるかもしれません。大目に見てください。
PWMとは PWMは Pulse Width Modulation の略で、直訳するとパルス幅変調となります。アナログ信号をデジタル信号に変調する方式の一つで、ONとOFFの比率を変化させることで擬似的にその間の値を表現するものです。
用語説明 周期：繰り返しの現象が一周りしてまた戻ってくるまでの時間。 周波数：繰り返しの現象が1秒間に行われている回数。 $$ \frac{1}{\text{周期}} $$ パルス幅：一周期のうち、ONになっている時間。 デューティ比：一周期の中でのONの時間の割合。 $$ \frac{\text{パルス幅}}{\text{周期}} $$で計算できる。 平均電圧：名前の通り、電圧の平均。 $$ \text{デューティ比}\times\text{ONのときの電圧} $$ 実行電圧：周期的に変化する電圧の大きさを表すのに使う値。PWMの場合、$$ \text{ONのときの電圧} \times \sqrt{\text{デューティ比}} $$ で計算できる。 {height=300}
上の画像はPWMの電圧のグラフですが、電流、電力も同じ形になります。
PWM信号の基本的な作り方 PWMの信号を生成するには、２つの入力が必要になります。１つ目は変換したいアナログ信号(当たり前)、もう一つは変調に使うためのノコギリ波(三角波でも可)です。 変換したい信号とノコギリ波の大小を比較し、変換したい信号の値がノコギリ波より大きいときはON、小さいときはOFFを出力することでPWM信号を生成することができます。言葉で説明するより実際に下のグラフをいじってみたほうがわかりやすいでしょう。赤い線がアナログ信号、オレンジの波がノコギリ波、紫の線がPWM信号、青い線がPWM信号の実効値を表しています。半透明の点はドラッグで動かせます。(若干重いです)
上のグラフを見て分かる通り、変調に使ったノコギリ波の周期と生成したPWM信号の周期は一致し、変調したいアナログ信号の最大値、最小値はノコギリ波の最大値、最小値のなかに収まっていないといけません。 また、連続的に変化する信号を変換することもできます。
変調するアナログ信号の振幅を大きくし、ノコギリ波の範囲を超えると、音割れのような状態になってしまうのがわかるかと思います。
Arduino Uno上での実行 先ほど紹介した方法をArduino Uno上で実行します。 Arduino Unoには タイマー０、タイマー１、タイマー２の３種類のタイマーがあり、役割や特徴が少しずつ違います。この３つの違い等については割愛します。 Arduino Unoではタイマーが16Mhzで(1秒間に16,000,000回)カウンタを一ずつ増やしていき、0~255まで数え、255になったらリセットするというのを繰り返しています(自分で設定すれば変えられます)。これをPWMの変調に使うノコギリ波の代わりにします。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include &amp;lt;avr/io.h&amp;gt; //タイマーを設定するのに必要なライブラリを読み込む int duty = 50; //指定したいデューティ比(%) void setup() { pinMode(11, OUTPUT); //11番のピンを出力に設定 } void loop() { // タイマーのモードを指定 TCCR2A = 0b10100001; TCCR2B = 0b00000100; // Dutyの比指定 OCR2A = 255*duty/100; } 上のプログラムを実行すると周波数：982Hz、デューティ比：約50％のPWMがArduino Unoの11番のピンから出てくるはずです。これでも十分短いプログラムですが、単にArduinoでPWMを使いたいだけだったら下の一文で使うことができます。</description></item><item><title>Shooting Game</title><link>https://asanobuturi.github.io/game/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/game/2/</guid><description>暇つぶしにおすすめなシューティングゲームです
的に弾をあてて敵を倒しましょう
使用ライセンス:LICENSE
ライセンスはここにも記載されています。</description></item><item><title>Stable Diffusionをインストールしてお絵かきする</title><link>https://asanobuturi.github.io/document/2022/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/2/</guid><description>はじめに 物理部中２のPC班員です。中３から部誌を書こうと思っていましたが、ちょうどいいネタが転がり込んできたので書くことにしました。
使うライブラリのインストール 今回使うStable Diffusionは最近オープンソース化され、商用利用も可能という素晴らしいライブラリです。 PCの推奨スペックはVRAM10G以上のnvidiaのGPUで、今回はRTX3060というGPUを使っていきます。
リポジトリにアクセスするためのトークンを作る まずここにアクセスして右上のSign Upからアカウントを作成し、次にここにアクセスしてAccess repositoryをクリックした後、サイト右上のアカウントアイコンをクリックしてSettingsから左のAccess Tokensからトークンを作成する。このトークンが後で必要になるのでメモしておく。
必要なソフトとライブラリ Python まずは今回のコードを書くためにプログラミング言語のPythonをインストールする。 Python公式サイトからpythonのインストーラーをダウンロードしてインストールする。インストール時にPythonをパスに追加するオプションを選択するのを忘れずに。
{width=400}
ドライバ {width=400}
今回はAIの演算にCUDAというnvidia製のグラフィックボードについているものを使うので、ここからドライバを手に入れてインストールする。
CUDA Toolkit ここからダウンロードしてインストールする。 そしてコマンドプロンプトでnvcc -Vを実行して正常にインストールされているかを確認する。 このときreleaseの後にある数字をメモしておく。
cuDNN ここからダウンロードして解凍したbinフォルダにパスを通す。 この時、ダウンロードにnvidiaデベロッパーアカウントが必要なので作成する。
PyTorch ここからPyTorchをインストールするためのコマンドを生成する。
PyTorch Build: Stable Your OS:使用しているコンピュータのOSを選択 Package:Pip Language:Python Compute Platform:先ほどメモしたReleaseの数字に合うものを選択 その後、生成されたコマンド(Run this Commandにある文字列)を実行してPyTorchをインストールする。 インストール後、以下のコマンドでPyTorchからGPUが使用可能かを試す。Trueになれば使用可能。 1 2 3 4 5 6 7 PS C:\Users\hoge&amp;gt; python Python 3.10.6 (tags/v3.10.6:9c7b4bd, Aug 1 2022, 21:53:49) [MSC v.1932 64 bit (AMD64)] on win32 Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information.</description></item><item><title>SuperCon 2004参加記</title><link>https://asanobuturi.github.io/document/2004/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2004/6/</guid><description>毎年の夏に東京工業大学が主催するスーパーコンピュータコンテストというものが開かれる。予選を通過した約１０チームが東工大に通って本選問題を解くプログラムを作成し、そのプログラムをスーパーコンピュータ上で動かしてその解答の正確さと速さを競うコンテストだ。これは今年の大会に参加した際の記録である。
公開された予選問題を解くプログラム・レポート及び参加申込書をあわせてメールに添付して送信することで、正式な応募となる。２～３人で１チームを組み、本選ではそのチームで１つのプログラムを作成することになる。
今回参加したのは次のメンバーである：
宮崎（高三）、藤井（高一）、松永（高一）
高三の宮崎は受験がどうのこうのと心配され、高一の藤井と松永は夏休みの講習と本選期間が重なっているにもかかわらず、チームnomeanとして参加を決意した。なぜチーム名が「nomean」なのか？というのは、前回先輩方のチームが出場した際チーム名が「noname」だったので、その文字を入れ替えることによってnomeanとなったのだ。
予選問題は次のようなものであった：
素因数分解した時，重複するものも含めた素数ののべ個数がちょうど12個となる整数をSuperCon数と定義する。 例）3750000=2^435^7
与えられた整数n（ただし、10,000,000≦n≦20,000,000）に対し、nから始めて2004番目のSuperCon数を求めるプログラムを作成しなさい。ただし，与えられた整数nそのものがSuperCon数の時は、nを１番目のSuperCon数とみなします。
これは問題の一部分である。ルールや注意事項など詳細を知りたい方は、東工大のスパコンのホームページを参照して頂きたい。
最初私は数字を１つ１つ素因数分解して因数が１２個のものを挙げていき、２００４番目のSuperCon数を見つけよう、と考えた。しかしそれはあまりにも時間がかかりすぎる上、メモリの消費量も半端ではない。最初に2004番目のSuperCon数がありそうな場所までの素数をエラトステネスの篩ですべて求め、１つ１つ素因数分解していく、ということだ。このプログラムを家で作って走らせてみたところ、確か１５分ほどかかった。
しかし脳にアルゴリズム辞典がつまっているのであろう宮崎は１２個の素数を組み合わせてSuperCon数を求めるという方法でプログラムを作った。もちろん私もそのことは考えていたが、技術不足だったためか上手く作る方法を思いつかなかった。その宮崎が作ったプログラムでは約２５秒で解答が出せたという。具体的な解法としては、まずエラトステネスの篩で素数を求めて配列に保存し、それを掛け合わせて別の配列に保存していく。つまり、素数×素数＝②（因数２個）、②×素数＝③、③×③＝⑥、⑥×⑥＝⑫としてSuperCon数を求め、その2004番目を出力する。
改良を重ね、最終的に1秒未満で結果が出せるようになった。（もちろん、ＰＣの性能によってかかる時間は変わってくる。）実際に審査環境と同じにするためにVine Linux Ver2.6r4を物理部の1台のＰＣにインストールし、GNU C Compilerでもコンパイルできることを確認した。
締め切り前日にソースとレポート、応募用紙を添えてスパコンの大会宛にメールを送信。受理されれば確認のメールが返ってくるはずなのだが、数日後にメールチェックしても返信がこない。もしかして、記入漏れがあって受理されなかったのでは？と不安が募る。
宮崎がスパコン宛に問い合わせのメールを送った。返事が返ってきた。どうやらむこうの手違いで確認のメールが送られなかったらしい。こちらの応募は受理されているとのことで、とりあえず安心した。その後すぐに予選通過のメールが届いた。
予選を通過したチームは次のとおりである。
国 チーム名 学校名 日本 rousers 一関工業高等専門学校（岩手） ekomix 早稲田高等学校（東京） nemui 麻布高等学校（東京） kstpcc 川崎市立川崎総合科学高等学校（神奈川） nomean 浅野高等学校（神奈川） iacc 石川県立金沢泉丘高等学校（石川） nagater 兵庫県立長田高等学校（兵庫） scorpion 灘高等学校（兵庫） emisi 灘高等学校（兵庫） ydobon 八代工業高等学校（熊本） 中国 china Chengdu Experimental Foreign Language School Hangzhou Xuejun High School Nanjing Foreign Language School シンガポール threein1 Hwa Chong Junior College Raffles Junior College Hwa Chong Junior College タイ istar Triam Udomsuksa School Assumption College Suankularb Wittayalai School 韓国 bsabsa Busan science Academy ８月２日（月）開会式・見学など 大岡山駅を出ると、本当にすぐそこが東工大の正門だった。となりに東急ストアがあるし、商店街もある。東工大生はなんて恵まれているのだろうと思った。</description></item><item><title>Windowsドッキリプログラミング初級</title><link>https://asanobuturi.github.io/document/2002/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2002/2/</guid><description>はじめに ここでは、C++を使ってWindows上で動くビックリなプログラム(初級)を厳選して作っていきます。なので、プログラミングの知識が必要となってきます。今回、ここでプログラミングの説明をしている余裕がないので、勝手に、あなたがC++を知っているということにしてしまいます(←超手抜き)。C++での作業にあたってはVC++を使ってください。そうすればここに書いてあるとおりにすれば同じ結果になるはず。あと、ここでは、Windowsの特殊な知識(API)を身につけなきゃならんので要注意。APIについては次の章を読んでね。
APIについて WindowsにはAPI(Application Programming Interface)という、膨大な関数群がある。APIは使用用途によって分類されているのだ(Windowsで標準的に使われるWin32API、DirectX関連で使われるDirectX APIなど)。Windowsアプリケーションはこれらを使っていろんなことができるわけだ(例えばウィンドウの描画とか&amp;hellip;etc)。C++では、APIを直接使うのが一般的(MFCなるものもありますがね)。 C++では &amp;ldquo;windows.h&amp;rdquo; をインクルードするだけで利用可能。具体的にもっと知りたいという読者は、本を立ち読みしたり(プログラミング関連の本って高すぎ)、MSDNライブラリを漁ってみたりしてください。
サンプルについて 我が部には、CD-ROM付録など、高等なことをするほどさいふが豊かではないので、ベーマガ(BASIC Magazineのつもり)同様、人間コピー機を作動させてください。スキャナーを持っているブルジョアな人は、それを使ってもかまいませんよ。あと、新型のヴィールスを作ろうと思っている方、ハッキングを試みている方、この記事はあまりその方面には縁がないと思います。どちらかというと憎いやつを叩きのめしてやりたいと思っている人向けかも?
注意! ここでは、少々アブナイことをするので、要注意。慎重に作業を遂行せよ!あと、生成物は個人で楽しむことを前提としているので、**決して他人に迷惑をかけないように!また、この記事が原因で発生したいかなる損害もわれわれは責任をとらないぞ!**あと、WinNT系での動作は一切未確認。大半はできないでしょう。では、さっそく実践に入りましょう。
マウスが。。。 マウスカーソルが飛び回るものを作ってみましょう。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include &amp;lt;windows.h&amp;gt; WINAPI WinMain(HINSTANCE hI nstance, HINSTANCE hPrevInstance, LPSTR Cmd, int iState) { BOOL ret; MSG msg; // メッセージループ while (1) { // メッセージチェック ret = PeekMessage(&amp;amp;msg, NULL, 0, 0, PM_REMOVE); if (ret) { // 終了判定 f(msg.</description></item><item><title>φの累乗とフィボナッチ数列</title><link>https://asanobuturi.github.io/document/2019/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/11/</guid><description>筆者の独特の文体が原因で怪文書となっております。お読みの際は十分お気を付けください。
問題 フィボナッチ数列の各項を\(F_n\)とし、\(F_1=F_2=1\)とする。\(\phi\)が\(\phi^2=\phi+1\)を満たす\(1\)より大きい実数であるとき、\(\lim_{n \to \infty}\frac{F_n+1}{F_n}=\phi\)となることを証明せよ。ただし、\(F_n\)の一般項を求め、利用してはいけない。
答えはこれを読み進めた最後に書いておいた。なんなら途中をすっ飛ばしても構わないが、その途中がまさに私がこれに気づいたきっかけなので、ヒントが欲しければ途中を読むのをお勧めする。
√5進法と聞いて_冬の図書館 私の頭が一番冴えるのは文化祭直後から冬の間である。夏のように湿度が高いと頭が碌に動かないし、それでいて気温が低いと猶更である。そういう理由で私はこのアイデアを昨年の暮れ、図書館でルーズリーフに落書きをしていたあの時からずっと温めていた。
昨年の部誌では前部長（当時も今も私のクラスメイトである）が\(n\)進法の\(n\)を\(1\)以上の実数（厳密には\(1\)でさえなければ任意の正の実数で考えられるが）に拡張し、\(\sqrt{5}\)進法なる画期的なものを思いつき、それについて考察を行っていた。
この\(\sqrt{5}\)を\(\phi\)に置き換え、分数について考察しようと思ったのは私の不調と丁度重なる2018年が終わろうとしていた時だった。その時偶々大和駅の近くにできた図書館の一部屋が「自習室」として開放されていたのでそこで古典の勉強をしていた時、ちょうどそれがひと段落したので余ったルーズリーフに色々書き込みながら\(\phi\)の累乗を\(\phi^2=\phi+1\)を代入し続けて\(\phi\)と整数だけで表そうとしていた。こんな風に。
\(\phi^1=\phi+0\)
\(\phi^2=\phi+1\)(\(\phi\)の定義。以下この式を①とする)
\(\phi^3=2\phi+1\)
\(\phi^4=3\phi+2\)
\(\phi^5=5\phi+3\)
\(\vdots\)
この①を適宜移項し\(1=\phi^2-\phi\)の形にして両辺を\(\phi^n\)で割れば、これは
\(\phi-n=\phi-n+2-\phi-n+1\)（この後もこれが滅茶苦茶出てくるので、②とする）
となる。これを延々と代入すれば上に示した\(\phi\)の累乗シリーズを負に拡張できる。つまり、こういうことである。
\(1=0+1\)
\(\phi^{-1}=\phi-1\)
\(\phi^{-2}=-\phi+2\)
\(\phi^{-3}=2\phi-3\)
\(\phi^{-4}=-3\phi+5\)
\(\vdots\)
先ほどから\(\phi\)の累乗の\(\phi\)の係数と定数の両方にフィボナッチ数列が出ている。これが証明のカギになるが、その解説は後で。
それはさておき、この式と②を適宜使えば、どんな実数でも\(\phi\)進法で表せるというわけだ。以下、\(\phi\)進数は\((\phi)\)と添えて表すこととする。
\(2=(\phi)+(-\phi+2)=\phi+\phi^{-2}_=10.01_{(\phi)}\)
\(3=(\phi+1)+(-\phi+2)=\phi^2-\phi^{-2}_=100.01_{(\phi)}\)
しかし、①を代入すれば、この\(3\)には別の表し方があることが分かるだろう。
\(3=(\phi)+(1)+(-\phi+2)=\phi+1-\phi^{-2}_=11.01_{\phi}\)
\(1\)だってそうだ。①の両辺を\(\phi^2\)で割って
\(1=\phi^{-1}+\phi^{-2}=0.11_{(\phi)}\)
とできるし、同様の代入を繰り返せば
\(1=0.1010101\ldots\_{(\phi)}\)
という循環小数も得られる。こんな具合に、どんな数も複数通り に表される。
ここで舞台が一旦変わるので、章を区切ることとする。
半分こと4等分_木曜放課後の教室 年が明けて\(\phi\)進法というおもちゃを無事数学同好会（昨11/16、同好会昇格に伴い数学研究会から改称）に持ち帰った私は先ほどの
\(1=0.1010101\ldots\_{(\phi)}\)
を睨んでいた。これをもっとシンプルな形にできれば…と思っていたのである。が、気づけば簡単なことだ。これを\(\phi\)倍すれば
\(\phi=1.0101010\ldots_{(\phi)}\)
となる。これを先ほどの式に足すと
\(\phi+1=1.1111111\ldots_{(\phi)}\)
が得られる。諸君なら左辺に見覚えがあるだろう。そう、\(\phi^2\)である。もちろんこれを\(\phi^2\)で割るしかない。
\(1=0.0111111\ldots_{(\phi)}\)
ここで、\(2=(\phi)+(-\phi+2)=\phi+\phi^{-2}_=10.01_{(\phi)}\)を思い出す。
ここまでと同様の変換で\(2=1.11_{(\phi)}\)を得れば、割り算で\(\frac{1}{2}\)を\(\phi\)進法で表せる、という算段であった。つまり、
\(\frac{1}{2}=0.01001001001\ldots_{(φ)}=0.00110110110\ldots_{(φ)}\)(①を適用)
というわけだ。実際、この二つを足せば丁度\(1\)だ。
\(\frac{1}{2}=0.01001001001\ldots_{(φ)} =0.00110110110\ldots_{(φ)}\)
あるいは、これを\(3\)桁ごとの区切りとみなせば
として、同様に
\(\frac{1}{2}=0.01000111000\ldots_{(φ)} =0.00111000111\ldots_{(φ)}\)
も導出できるので、後者を更に\(2\)で割れば、
\(\frac{1}{4}=0.00100000100\ldots_{(φ)}= 0.00011000011\ldots_{(φ)}\)
と、\(\frac{1}{4}\)も得られる。\(\frac{1}{n}\)が\(0.00\ldots01000\ldots01000\ldots\)という形で循環する整数は他にも
\(11,29,76,199,521\ldots\)
と無限に存在する。ちなみにこれらを小さい順に並べて数列にすると、最初はさておき各項の差はフィボナッチ数列の連続した\(4\)項の和で表すことができる。つまりこういうことだ。
\(11-4=1+1+2+3\)
\(29-11=2+3+5+8\)
\(76-29=5+8+13+21\)
\(199-76=13+21+34+55\)
\(521-199=34+55+89+144\)
後で循環小数のことを前部長に話したところ、彼が\(\frac{1}{n}\)の\(\phi\)進法での表記を\(n=1000\)までプログラミングで求めて印刷して持ってきた。それを見る限りはいかなる\(n\)についても\(\frac{1}{n}\)が循環小数になるようであったが、残念ながら今の私にはそれについて考察できる程の能力はない。
解答と解説 本題に戻ろう。フィボナッチ数列の連続した二項間の比の証明だ。ここで先ほど渋々割愛した\(\phi\)の累乗に出てくるフィボナッチ数列が活きる。</description></item><item><title>アーキテクチャへの扉</title><link>https://asanobuturi.github.io/document/2021/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/5/</guid><description>はじめに（免責） この記事はネットや本などで知識だけを身に着けた経験の浅い人が書いています。この人はこんな考え方をしているんだなぁ位にこの記事を読み流してきちんとした本を読むことをお勧めします。本記事の考えのもとになっている本はを最後に紹介します。
本記事の目標 本記事ではプログラムとはどんなものか、またオブジェクト指向とは何かを説明しながらプログラムの大まかな構造を考えていきます。最終的に、良いと言われているようなプログラムの構造を考えられればなと思います。
プログラムの評価は使う人が直接触るわけではないので、いわゆる絵や音楽などの受け手からの評価とは違ってきます。プログラムに触れるのは仕様を変更したり追加したりする同業者または自分です。つまり、プログラムはそれを作り替える人から評価を受けるわけです。よって良いプログラムとは仕様を変更したり追加したりしやすいプログラムということになります。
プログラムを評価する指標は大まかに三つほどあります。一つ目は読みやすさです。読みづらければプログラムを理解することが大変になってしまいます。二つ目は再利用のしやすさです。同じようなものを何度も書いているとプログラムが無駄に大きくなってしまいますし、それだけ労力がかかってしまいます。三つめは正しさです。当然ですがバグが多いプログラムはプログラマに対してだけでなくユーザーに対しても被害が出ます。
プログラム コンピュータプログラム（英：computer program）とは、コンピュータに対する命令（処理）を記述したものである。
Wikipediaからプログラムの説明を引用してきました。プログラムは仕事の手順を示した静的なデータです。
https://cookpad.com/recipe/2477629 これは生チョコのレシピの一部です。プログラムはこのような料理のレシピと同じように「最初にこれをやる、次にこれをやる……」ということが書かれたデータです。
料理をするときには材料が必要となり、その材料をもとに食べ物を作ります。プログラムも同じく、あるデータを使って決まった仕事を行い、得られたデータを出力します。つまり、プログラムは入力、処理、出力で構成されています。（このうちのどれかが欠けることはあります）関数について考えてみても、この構成要素がわかります。関数は引数が入力され、中である決まった処理をして、戻り値を出力します。関数はそれ自体が一つのプログラムになります。
入力の段階で処理しやすいデータになっていると関数などで中に書くコードが少なくなるのでプログラムが単純になります。料理でいうところの下ごしらえです。3分クッキングでは下ごしらえを完璧にすましてあるので実際の処理内容（レシピ）がとても分かりやすくなっています。関数の中でデータを動的に取得して（現在時刻の取得など）から、そのデータと引数を使って処理をしたいことがあると思いますが、やってはいけません。これは処理の部分でデータを用意していることになります。また、ある引数を入れたときに常に同じ戻り値が返ってこないことになります。これは、入力と出力を見てプログラムが正しく動いているかどうか判断することができなくなるのでやってはいけません。現在時刻なども外で取得してから関数の引数などに渡しましょう。
プログラムの依存関係 プログラムはプログラムの中で使うことができます。関数の場合関数の呼び出しと言ったりします。依存関係は使うものと使われるものの関係です。使うものは使われるものに依存しているといいます。車で考えてみましょう。車はタイヤを使います。タイヤは車に使われます。車がなくてもタイヤの機能は成り立ちますが、タイヤがないと車の機能は成り立ちません。つまり、タイヤは車に依存しておらず、車はタイヤに依存していることがわかります。AプログラムがBプログラムを使っているとすると、BプログラムがないとAプログラムを使うことができませんが、AプログラムがなくてもBプログラムを使うことができます。なので、AプログラムはBプログラムに依存していることとなります。
さて、車はタイヤに依存していると話しましたが一般的に物が製品を使う、つまり製品が部品に依存するという関係が成り立っています。しかし、プログラムの中では部品と製品との違いがあいまいなことがよくあります。ではどのようにプログラムの依存関係を考えるかというと、より根本的かつ汎用的なプログラムのほうに依存します。製品と部品では部品のほうが汎用的です。汎用的な部品は一つの製品だけでなく、様々なところで使うことができます。タイヤはネジに依存していますが、ネジを使っている製品はとてもたくさんあります。また、AプログラムがBプログラムに依存しているとBプログラムの仕様が変わったときにAプログラムの仕様を変えなければならない可能性があります。しかし、その逆はありません。ネジの太さが変わってしまうとそのネジを使っているタイヤは使えなくなってしまいますが、タイヤのネジ穴が太くなってもネジが使えなくなることはありません。
アプリケーション アプリケーションはプログラムその物ではありません。入力、処理、出力では説明できないからです。ただ、アプリケーションの仕様を分解するとそれぞれを入力、処理、出力で説明できるようになります。ここからアプリケーションは複数のプログラムが集まって出来ていることがわかります。
アプリケーションのユーザはパソコンやスマホなどのデバイスを操作して画面に何かが表示されたり音が鳴ったりすることを期待します。ユーザの操作がプログラムの手順を始めるトリガーとなり、処理に必要なデータを作ることがあります。
ユーザの操作から得られるデータ以外にアプリケーションやサーバ上にあるデータが必要となるときがあります。これらのデータを得るためのデータアクセサが必要になります。ユーザの操作によって得られるデータや、データベース、ファイルなどのデータはそのままでは処理に向いていないことがよくあります。よって、処理に必要なデータを処理しやすいデータに直すプログラムが必要になります。
ロジックに必要なデータは様々なところから持ってくるので、それらを一括にまとめてロジックに渡せると便利です。様々なデータとプログラムを繋ぐことからこのプログラムをロジックと名付けます。
出力されるデータもただのデータでしかないので、出力されたデータを解釈して画面に表示したり音を鳴らしたりなどのユーザの体験を提供するプログラムが必要です。
これらを踏まえてアプリケーションの中のプログラムの基本的な構造を考えてみます。
ユーザの操作で処理がスタートします ユーザの操作で得た入力データを処理しやすいデータに変換し、「ジョイント」に入力します。 「ジョイント」で「データアクセサ」からファイルやデータベースのデータを持ってきて「ロジック」に入力します 「ロジック」で入力されたデータに対してある決まった処理を行い、得たデータを「ジョイント」に返します 「ジョイント」で帰ってきたデータを複数の「出力」に渡します。 「出力」で渡されたデータを解釈して画面に表示したり、音を鳴らしたりと様々なことをします これら一つ一つのプログラムも入力、処理、出力で出来ていることがわかります。
では、依存関係の話をアプリケーションのプログラムに応用してみましょう。アプリケーションのプログラムは基本的に入力、ロジック、出力、データアクセサ、ジョイントでできています。アプリケーションにとって根本的なのはロジックです。ロジックには仕様その物が書かれています。また、ロジックは同じ仕様の別アプリケーションでも使うことができます。
一方、入力、出力はアプリケーションごとにUIが異なり、UIが変わってもアプリケーションが成り立つ（パズドラは何回かUIが変わっています）ことから根本的ではないことがわかります。また、データアクセサもファイルの拡張子やデータベースの種類などによってアプリケーションの根本的な仕様は変わらないので根本的ではありません。
そして、ジョイントは入力、出力、データアクセサとロジックの間を取り持つので根本度も中間になります。よって、ジョイントがロジックに依存して入力、出力、データアクセサがジョイントに依存することになります。しかし、ジョイントはデータアクセサや出力を参照する必要があるのでこれらの依存関係を守ることは難しくなってしまいます。
アプリケーション構造_手続き オブジェクト指向 これまで話した構造がBasicやC++などの手続き型言語で出来る構造です。この構造をC#やJavaなどのオブジェクト指向言語を使うことでさらに強化していきます。（PythonやC++などのオブジェクト指向言語では対応していない機能がありますが、代替手段があります。多分）ただ、その前にオブジェクト指向の機能はどんなものがあるか確認していきましょう。
クラス クラスは型と呼ばれることもあります。型、つまり物を作るときに元となるものです。クラス自体は使うことができません。クラスを使って物を作るのですが、その物をインスタンスと呼びます。クラスには主にフィールドと呼ばれるデータ（変数）とメソッドと呼ばれるフィールドを使ったプログラムを定義することができます。クラスには二つの使い道があり、一つ目はインスタンスを生成することで、二つ目はインスタンスを入れる変数にすることです。
インスタンス インスタンスの中にはクラスで定義されたデータとプログラムが入っています。このデータやプログラムは公開するか非公開にするかクラスで決めることができます。公開するとインスタンスの外で使うことができて、非公開にするとインスタンスの内側でしか使うことができません。
インスタンスには二種類の使い方があります。データのまとまりと共通のデータに対するプログラム群です。これは二種類の使い方どちらでも使えるわけではなく、どちらか一つの使い方に絞る必要があります。データのまとまりとして使うインスタンスをデータ構造、共通のデータに対するプログラム群として使うインスタンスをオブジェクトといいます。データ構造もオブジェクトもデータが主となっていることがわかります。よって、クラスはデータのまとまりとして名前を付けるべきです。
データ構造はデータのまとまりです。それ以上でもそれ以下でもありません。プログラムにデータを渡したりデータを出力したりするときに使います。データ構造はただのデータなのでクラス内には公開フィールドしか定義してはいけません。
プログラムは入力、処理、出力で出来ていると話しました。当然メソッドもそれに従わなければなりません。メソッドの入力は引数のほかにフィールドがあります。（メソッドにフィールドを入力しない場合、そのプログラムはメソッドではなく関数で実装した方がよいことになります）引数はメソッド内の処理を実行するときに入力するデータなのに対し、フィールドはあらかじめ決めておくデータになります。メソッドを使うときには引数しか設定しないのでフィールドをころころ変えてしまうとある引数に対して常に同じ戻り値が返ってこないことになります。よって、オブジェクトのフィールドは外からも（できれば中からも）変更できないようにするのが好ましいです。ここでフィールドを非公開にする必要が出てきます。オブジェクト内のデータが欲しいときには公開したいデータだけをまとめた専用のデータ構造のクラスを作り、そのインスタンスを返すメソッド（またはプロパティ）を返します。
インターフェース インターフェースは各プログラムのつなぎ目です。インターフェースには実装されていないメソッド（またはプロパティ）を定義することができ、それらをクラスに実装させることで間接的にクラスのメソッド（またはプロパティ）を使うことができます。インターフェースは複数のクラスを「同じ機能を持つもの」として同じように扱えます。インターフェースを変数にすることによってその変数にはインターフェースが実装されているクラスだったらなんでも入れることができます。
また、インターフェースを介してクラスをつなぐことによって依存関係を逆転することができます。例えば、根本的なロジックを持つクラスAが詳細的なロジックを持つクラスBを参照したいとします。
依存関係逆転の問題 しかし、これだと根本的なクラスが詳細的なクラスに依存していることになってしまいます。そこでクラスA専用のインターフェースBを用意してクラスBがそれを実装します。
依存関係逆転の解決 インターフェースBはクラスA専用なのでクラスAが欲しい機能だけが定義されています。クラスAの仕様が変わりインターフェースBに対して必要な機能が変わるとインターフェースBは中身の処理を定義していないので簡単に機能を変えることができます。インターフェースBの機能を変えるとクラスBを変更するかインターフェースBの機能を持った新しいクラスを作る必要があります。これで詳細的なクラスBが根本的なクラスAに実質依存することができます。
抽象クラス 抽象クラスはインスタンスを生成することができず、型として使います。その代わり抽象クラスを基に派生クラスをつくることができ、派生クラスは抽象クラスとして扱うこともできます。派生クラスはその名の通り抽象クラスから派生したものです。よって派生クラスは抽象クラスとして扱える必要があります。イメージとしては抽象クラスが種類、派生クラスが物となります。抽象クラスは厄介な機能なのであまり使う頻度は高くありません。というか安易に使ってはいけません。機能をまとめたいだけならインターフェースを使いましょう。
オブジェクト指向を使ったプログラムの構造 オブジェクト指向の主な機能を確認したところでこれをアプリケーションのプログラムに適用してみましょう。オブジェクト指向は再利用のしやすさに特化しています。
ソフトウェアのプログラムは入力、出力、ロジック、ジョイント、データアクセサで出来ていること、そして入力と出力がジョイントに依存していてジョイントがロジックに依存しているべきだということをプログラムの章で話しました。関数だけではこの依存関係にすることが難しいですが、オブジェクト指向の機能であるインターフェースによって依存関係を逆転させることで可能になります。
インスタンスを使うことによってデータとプログラムが一体となり、処理プログラムを再利用できるようになりました。そこで、様々なデータに対する処理をそれぞれクラスで定義し、それらを使って一つの大きな処理をこなすプログラムを作ります。このような小さなロジックを複数フィールドに持ち、それらをつかって大きな処理をするメソッドを持つオブジェクトを制御フロー(またはトランザクション)と名付けます。
ジョイントがデータアクセサのインターフェースに依存することでファイルの拡張子やデータベースのツールが変わったときもジョイント部分を一切変更せずにデータアクセサを付け替えるだけでよくなります。
これらの変更を加えたプログラムの構造を図にしてみます。
アプリケーション構造 この構造がアプリケーションの中に複数できることになります。ファイルやデータベース、画面表示やサーバ通信はそれぞれ例です。実際はこの構造からクラスを付け足したり減らしたりして仕様にあった構造を作ることになりますが基本的にこの構造を維持することでそれぞれの機能を再利用しやすくなると思います。また、使うツールによっては変換が必要ないデータが出てくる可能性があります。しかし、必ず別の処理専用のデータ構造にデータを移す必要があります。なぜなら、処理で扱うデータ構造と入力、出力で扱うデータ構造を一緒にすると入力、出力の都合でデータ構造を変更しなければいけなくなったときに処理もその影響を受けてしまうからです。
先人の知恵 今回のプログラムの構造に使われている知恵 DRY(Don’t repeat yourself) OAOO(Once and only once) SRP(Single Responsible Principle, 単一責務の原則)　注：名前に惑わされて間違った説明をしていることがあります OCP(Open Closed Principle, オープンクローズドの原則) ISP(Interface segregation principle, インターフェース分離の原則) DIP(Dependency inversion principle, 依存性逆転の法則) SDP(Stable-dependencies principle, 安定依存の原則) プログラムの構造を考えるうえでの知恵 GOFのデザインパターン　注：目的ではなく手段です DDD(Domain-driven design, ドメイン駆動設計) LSP(Liskov substitution principle, リスコフの置換原則) 求めるな、命じよ デルメルの法則 読みやすいコードにするための知恵 PLS(Principle of least surprise, 驚き最小の原則) ループバックチェック 正しいプログラムを作る上での知恵 テスト駆動設計 ハンブルオブジェクトパターン おすすめの本 リーダブルコード（清和書林にあります！！） Clean Architecture オブジェクト指向でなぜ作るのか（清和書林にあります！！） さいごに これまでつらつらと書いてきましたが、小さいアプリケーションではこの構造を完璧に守らなくてもあまり問題にならずにかけちゃいます。しかし、プログラムの構造を適切に作ることによって機能を拡張しやすくなるのは事実です。この記事でプログラムの構造を作る上で様々な考え方があることを知ってもらえたら幸いです。</description></item><item><title>カーベー</title><link>https://asanobuturi.github.io/game/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/game/3/</guid><description>Scratchゲームの展示です</description></item><item><title>アクションゲームのブロックの当たり判定</title><link>https://asanobuturi.github.io/document/2019/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/8/</guid><description>注意！この私の部誌は日本語がおかしいところが多々ありますのでご注意ください。
ゲームはフレームごとに処理されている この部誌を読んでいるみなさん、こんにちは！突然ですが皆さんは「ゲームはフレームごとに処理されている」ということを知っていますか?
「フレームってなんぞや?」と思うかもしれませんが、実はビデオゲームというのはパラパラ漫画のように素早く画面が切り替わって、1画面ずつゲームの処理が行われているのです。この一画面をフレームと言い、一秒間にフレームがいくつ切り替わるかの値をFPSという単位で表します。ディスプレイの性能の関係で、大抵のゲームは60FPSか30FPSで動作するように設計しますが、処理が追いつかなくなるとまれに遅れることもあります。
それではこの1フレームの間にどのようなことが起こっているかの具体例をあげましょう。例えば某マ○オの移動です。実際は素早くフレームが切り替わっているのでなめらかに移動しているように見えますが、実は一枚一枚はただの静止画なのです!
どういうことかを理解するために、まずは右の図を見てください。例えば、一枚目のフレームでプレイヤーがAの位置に、二枚目のフレームでプレイヤーがBのいちに居た場合には、画面の前ではプレイヤーが左から右へなめらかに移動しているように見えるのです。
図1
プレイヤーとブロックの当たり判定 ここからが本題です。この章では「プレイヤーとブロックの当たり判定」について説明します。そもそも、当たり判定とはなにかわかりますか?簡単に言えば、ゲームの中にある何かと、また何かとが当たっている(触れている)かどうかの判定です。
この技術を使えば、例えばアイテムとプレイヤーが当たっているかを判定して、当たっていた場合にアイテムが消えてプレイヤーが回復したりなどの動作を実装することができます。
これはただ触れているかどうかだけを調べればいいので簡単です。ですがマ○オとブロックの当たり判定となるとそう簡単にはいきません。なぜかというと、「マ○オがブロックに対してどちらの方向から当たったのか」まで調べなくてはならないからです。
どうしてこのようなことを調べなくてはいけないのでしょうか。それはブロックに当たったときにその当たってきた方向に戻さなくてはならないからです。ここで戻さなければ、マ○オはプレイヤーがその方向の操作をやめるまでずっとブロックにめり込み続けてしまいます。
例えば、図2のように上から当たってきたのなら上に戻し、また左からなら図3のように左に戻します。
図2
図3
ということで、「どの方向からブロックに当たったのか」を調べなければいけないのですが、これが難しいのです。この調べ方は色々ありますが、私は次のような方法で調べています。
図4を見てください。
図4
この図を1ブロックだと思ってください。まずこのようにブロックを分けて考えます。(ブロックの見た目を変えるわけではありません。図の中でわかりやすいように変更しているだけです。)まずブロック全体ではなく灰色の部分だけに重点を置いてあたりを調べます。そして触れていた場合には、プレイヤーが上へ移動している途中なら図5のように下に戻し、
図5
図6のように下に移動しているか、または当たっているのに動きは止まっているという場合には下へ戻します。
図6
内側の灰色には触れておらず、右側の黒色に触れているなら図7のように右へ戻し、左なら図8のように左へ戻します。
図7
図8
と、言う仕組みです。
皆さん、ここまでお読みいただきありがとうございます。よければ僕の作ったアクションゲーム1を遊んでみてください。このゲームもこの当たり判定が使われていますよ!
それではまた!
編集部注:文化祭のみでの展示です。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>バーゼル級数を用いた円周率の計算</title><link>https://asanobuturi.github.io/document/2021/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/2/</guid><description>バーゼル級数とは \[\sum_{k=1}^{\infty}\frac{1}{k^2}=1+\frac{1}{4}+\frac{1}{9}+\cdots=\frac{\pi^2}{6}\]
これがバーゼル級数です。今回はこの級数を利用して円周率を計算していこうと思います。また、プログラミングに疎い人でも楽しめるように表現を曖昧にしていたり多少ずれていることがあります。
Pythonでの計算 今回はプログラミング言語にPythonという言語を選択しました。
Pythonは文法が比較的簡単でわかりやすく、優れたツールの豊富さが魅力の言語です(もちろん文法が比較的に簡単といえどもしっかり理解しようと思うととても時間がかかります)。
デメリットとしては、仕様上比較的実行に時間が掛かり、用途によっては向かないことなどが挙げられます。
Pythonの実行環境 Python 3.8.2 64bit
ソースコード 方法としては左辺を計算しそれを6倍して√を取るのですが、$\frac{1}{k^2}$を\(k = 1\)から無限に足し続けることは不可能なので、今回は\(k = 100, 000, 000\)まで足し続けたいと思います。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 from math import * #桁の多い小数を正確に扱うためのツールを利用する from decimal import * if __name__ == &amp;#34;__main__&amp;#34;: #変数sumを定義 sum=Decimal(0) #k=1からk=100000000まで for i in range(100000000): #1/k^2を計算してsumに加える sum += Decimal(1)/((Decimal(i)+Decimal(1))**2) #級数の左辺の結果を6倍し√をとる pi = Decimal(sum*6).sqrt() #結果を表示 print(pi) 実行結果 1 3.141592644040496686182218894 これだけではどれだけ正確に計算できているのか分かりづらいので、合っている桁に色を付けてみたいと思います。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 from math import * #桁の多い小数を正確に扱うためのツールを利用する from decimal import * if __name__ == &amp;#34;__main__&amp;#34;: #変数sumを定義 sum=Decimal(0) #k=1からk=100000000まで for i in range(100000000): #1/k^2を計算してsumに加える sum += Decimal(1)/((Decimal(i)+Decimal(1))**2) #級数の左辺の結果を6倍し√をとる pi = Decimal(sum*6).</description></item><item><title>いったいどのくらい大きな声を出せばブラジルの人に声が届くのか</title><link>https://asanobuturi.github.io/document/2018/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/8/</guid><description>はじめに 皆さんは、「ブラジルの人、聞こえますかー！？」というネタをご存知でしょうか？
サバンナというお笑いコンビの八木(高橋じゃないほう)のギャグで、地面に向かって叫び、上記のセリフを言うというもので、数年前に流行って(？)いました。そして、そのギャグを見た時誰もが思ったであろうことの一つとして、「いったいどのくらいの声を出したらブラジルの人に声が届くのだろう」というのが有ると思います。なので今回は、実際にどのくらいの声を出せばいいのか、計算し導いていきたいと思います。
計算過程 実際にどのような計算をするかが、以下になります。
距離減衰を求める まず、距離減衰について簡単な説明をすると、「音の大きさが遠くに伝わっていく間にどんどん小さくなること」、これが距離減衰です。また、減衰は音の発生源(音源)によって違うので、まずはその数値を出します。ここでは、ブラジルが地球上において日本のちょうど反対に位置するとし、地球の半径を \( (6371→)6400km \) とすると、\( 距離減衰量(A) = 20 × log_{10}(r ÷ r0) \)となります。
※\( r \) は距離、\( r0 \) は、音源からの基準となる距離なのでこの場合、\( r0=1 \) とすると\( A = 20 ×log_{10}((12800000 × 3.14 ÷ 2) ÷ 1) = 146.06 ... \) →\(約 146dB \) と求められ、これがこの場合の距離減衰となります。
出す必要があるdBの量を求める 前項で減衰量を求めたので、右の図より、日常的な会話 \( 60dB \) を聞こえさせるとすると、\(60+146=206dB\) となり、これがブラジルの人に声を届けるのに必要な声の大きさということです。ちなみに、どのくらいの大きさかを比べるのに飛行機付近の音と比べると、飛行機のエンジンから \( 30m \) 離れた場所での音の大きさが \( 120dB \) なので、差が約 \( 86dB \) であり、\( dB=20×log_{10}(音の倍率) \) なので \( 86(dB)=20×log_{10}(音の倍率) \) であるため、音の倍率は約 20100 倍となります。</description></item><item><title>いろんなソート</title><link>https://asanobuturi.github.io/document/2019/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/6/</guid><description>ソートとは タイトルにある「ソート」を聞いたことがあるでしょうか？Excelを触ったことのある人ならご存知かもしれません。
英語の動詞であるソート(sort)は「分類する」「区分する」という意味を持ち、「並び替える」という意味で使われることが多いです。ここではプログラム上でこのソートを実行する方法について述べていきます。
用語確認など 昇順でソートする、降順でソートする、という表現がありますが、昇順は小さい順、降順は大きい順、と読み替えてください。
また、ここでは計算量、というものを使って説明をしていきます。よく用いられるのは「ランダウの記号」や「オーダー記法」と呼ばれる記法で、
\( O\left( N \right) \) や \( O\left( N^2 \right) \)
と表します。
ここで右上についている数字は累乗を表すもので、 \( N^3 = N \times N \times N \)
(\( N \)の\( 3 \)乗 ) 、 \( N^4 = N \times N \times N \)
(\(N\)の\(4\)乗)といったようにその数字の分だけ
\(N\)というなんらかの数字を掛け合わせる、というものです (
冪
(
べき
)
乗の場合もあります)。
また\( \log \)(ログ)という対数関数を用いますが、これは先程の累乗の逆で、 \( \log_{2} N
\) は「\( 2 \)の何乗が\( N \)になるのか」を表し、 \( \log_{2} 8 = 3 \)
(ログ2の8)、 \( \log_{3} 243 = 5
\)(ログ2の243)となります。ざっくりと言うのであれば、桁数だと考えればよいです。 \( \log_{10}
100 = 2 \)、\( \log_{10} 152 = 2.</description></item><item><title>ヴィトゲンシュタインのカブト虫</title><link>https://asanobuturi.github.io/document/2022/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/7/</guid><description>「シュレディンガーの猫」を考える 「シュレディンガーの猫」は有名だろう。（細かい説明は割愛するが）かの有名な物理学者シュレディンガーが
猫と任意の放射性物質を箱に密閉する。 放射性物質が崩壊する確率を一時間あたり50%とする。 崩壊した原子が出す放射線を検知すると毒ガスが放出される。
といった条件下で、観測者が箱の中身を確認するまで「猫が生きている確率」と「猫が死んでいる確率」がそれぞれ50%ずつである、 つまり猫は「生きているし死んでいる」という、今までのマクロな世界における解釈と矛盾した奇妙な状態におかれることになるとした。 彼はこの思考実験をもってミクロの世界における確率の解釈に対して問題提起をしたのだ。
なぜ「シュレディンガーの猫」がここまで有名になったのだろうか。物理（量子力学）と関係ない文脈においても、「奇妙な思考実験」や「結果として導かれるパラドックス」 の代名詞のようにこの名前はしばしば登場する。 これはおそらく「＜人名＞の＜一般名詞＞」という言葉の組み合わせの覚えやすさ、そして「シュレディンガー」「猫」という言葉を組み合わせた時の 語呂の良さに起因するのではないか。今回はもう一つ、この人名/一般名詞の思考実験を紹介しよう。「ヴィトゲンシュタインのカブト虫」だ。
ヴィトゲンシュタイン？ ゆっくり解説レベルの雑な導入ではあるが、まずは今回触れる「ヴィトゲンシュタインのカブト虫」の前提知識から紹介していこう。 ルートヴィヒ・ヴィトゲンシュタインはオーストリア出身の哲学者だ。第一次世界大戦の直後に出版した『論理哲学論考』、 そして遺稿をもとに出版された『哲学探求』で有名で、特に『論考』は文庫本にもなっているほか、
語りえぬことについて、人は沈黙せねばならない。
という一節においてよく知られている。 （そして非常に難解なことも）
では『探求』はどうか？ 『探求』は一言で言うなら自己批判だ。『論考』で示された
言語に含まれる言葉一つ一つはそれそのものを表す像（実体）と対応していて、全ての言葉には決まった意味がある。目の前のものを指さして、それに対応する名前を呼ぶのに近い。
といった、ヴィトゲンシュタイン以前の哲学者と同じ潮流にある古典的な言語観に代わる新たな言語観の提示など、後期ヴィトゲンシュタインの思考を辿る上で欠かせない著作だが、 こちらは『論考』の影に隠れあまり語られることはない。
例えばある人の思い出を記録したアルバムのように、通し番号が付され独立した節（アルバムにおける写真）を最小単位として、 あるものは独立して、またあるものは他の節と共に一つの記述に対する一連の考察を構成する「アルバム形式」や ダッシュ（――）を挟み一方では現在（執筆時）のヴィトゲンシュタインが、 もう一方では『論考』以前の言語観をもつある哲学者（過去の彼を念頭に）が語る「疑似対話」などの独特な論述や分量の多さ、 そしてそもそも文庫本になっていないなど読破する上でハードルが高いのが原因だろうか。
今回は、『哲学探究』でヴィトゲンシュタインが示した考え方に少しでも触れてもらうため、彼が無意識下に想定しているであろう前提なども明らかにしながら、 『探求』で行われた「カブト虫」に関する思考実験をなるべくわかりやすい形で「追試」してみよう。
追試 「カブト虫」の思考実験は§243から行われる私的言語、とりわけ「痛み」に代表される感覚語についての哲学的考察の一環だ。まずは「カブト虫」の思考実験の前提知識を以下に示す。
ヴィトゲンシュタインは先に触れた『論考』的言語解釈を疑問視している。（「対称と名」モデル） 代わりに、言葉の意味は実際に「言語ゲーム（独：Sprachspiel）」でどう扱われているかで解釈すべきと考えている。 ニュアンスは「ことば遊び」が近い。言葉を用いたやり取りなどを「ゲーム」にたとえ、言葉の意味をゲームにおける機能に注目してとらえる。
この「論考」的な「対象と名」モデルを前提にして以下の思考実験を行うとわかりやすいはずだ。
あるグループの人たちがそれぞれ箱を持っていて、その中に「カブト虫」と呼ばれる何かが入っている。 他の人が持つ箱の中身は見えない。 「カブト虫」が何を表すかは自分の「カブト虫」を見ることによってわかる。
という条件で、「カブト虫」という言葉と「カブト虫そのもの」の関係について考えてみよう。 お互いの箱の中身が見えるなら、「カブト虫」が何を指すかは明確だ。 しかしここでは他人の箱の中身が見えない。もしそうであれば、箱の中身が何であっても「カブト虫」という名が指す「何か」は 実は何であってもよいのではないか。自分にとって、他人の箱の中にある「カブト虫」はおおよそカブト虫とは呼べないような代物であっても、 はたまた常に変化し続けるような何かであっても、 本人がそれを「カブト虫」と呼んでいるなら「カブト虫」という言葉を用いる言語ゲームにおいて 何か齟齬が生じるわけでもないし、そもそもそれを判別する手立てもない。 ヴィトゲンシュタインはそう考えたのだ。
それでもこの人々の『カブト虫』という言葉が使用されているとしたら？（§293）
その場合、箱の中にある「カブト虫と呼ばれるもの」 （注：カブト虫という名前のことではない。本人は「カブト虫」と呼ぶが他の人が見たら「クワガタ」と呼ぶようなものでもあってよい、ということ。） 自体はこの言語ゲームにおいて「あるもの」としてすら意味を成さず、そもそも言語ゲームに属していないといえるのだ。 そもそも、これは箱の中に何も入っていなくとも成立するのだから。
ヴィトゲンシュタインはこの思考実験を通して 「痛み」に限らず感覚を表す文法を「対象と名」――ここでは痛みと痛みそのもの（痛みの像？）――というモデルに即して解釈しても、 上記の理由でこのとき想定した「痛みそのもの」は意味を成さず、これを想像することはナンセンスであることを示している。 （そして我々がそう解釈したくなる誘惑に駆られることも） つまり痛みの対象、痛みそのものが「存在する」か「存在しない」かではなく、それを想定すること自体がナンセンスということだ。
ここで私は、それを回しても他の歯車が一緒に動かないような歯車は、機械の一部ではない、と言いたいのだ。（§271）
ここで先述の言語ゲーム的解釈を適用してみよう。つまり「痛みそのもの」は想定せず、 もっぱら「痛み」という語が人々の間でどう使用されるかに注目することで、 我々は「対象と名」モデルには縛られず――カブト虫が本当は何であるか考えることなく――パラドックスを解消できる。
さいごに 『哲学探究』ではこのカブト虫の例の他にも「理解」「読むこと」「規則」など我々が言語を解釈するときに駆られるさまざまな「誘惑」に対して、 複数の思考実験やたとえ話を用いた精緻な考察から、それらに惑わされないための考え方を彼の実際の思考過程に即して示している。 『論考』的解釈はアウグスティヌスを始め、我々現代人も様々な媒体から無意識のうちに受容してしまっているかもしれない。 彼独特の思考過程を辿りこの解釈を打破して「考えたところでナンセンスでしかないもの」から解放される経験は、多くの読者にとって ある種爽快な意外性をもって受け入れられるだろう。 これをきっかけに多くの人が彼の著作に触れることを願っている。
参考文献 L.</description></item><item><title>ゲームのBGMについて</title><link>https://asanobuturi.github.io/document/2021/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/3/</guid><description>1.はじめに 皆さんこんにちは、中学3年生の{明松 | かがり}です。今年初めてポジトロンの記事を書かせていただくことになりました!!!中2のときにこの記事を書いたのですが、新型コロナウイルスによる文化祭の規模縮小により物理部が部誌を出しませんでした。
さて、本題へ移っていきましょう!僕はゲームをするとき、BGMを気にしてしまうような人です。また、僕が作るゲームのBGMは基本自分で作ります。そんな僕が思ったことをまとめます。
ゲームのBGMを作ってみたい!と思われている方はこの記事を参考にして、僕なんかよりもっとBGMを作られている方やこれを職業とされている方は、へえ、こんなかわいい考え方があるんだなと思いながら読んでください。くれぐれも「あいつ幼稚な考え方だな」と思ったりするのはおやめください。傷つきます。
2.それぞれの種類の音符はどのようなところに使われるか まずはそもそも音符にはどういう種類があるの?という方のために、種類の説明をします。こちらをご覧ください。音符の名前とその記号の対応表です。
音符の種類 全音符 2分音符 4分音符 8分音符 図 その他にも譜点付きや16分音符、32分音符などがありますがそれでは細かい話になってしまうので省きます。気になるという方は調べてみてください。
さて、それぞれの音符についての説明をします。 まず、全音符とは、4拍分音を鳴らしてしまう音符です。あまり主旋律で使われることはありませんが、使われるとしたらどのような場面で使われるのでしょうか？ 2分音符とは、2拍分音を鳴らす音符です。こちらもあまり主旋律で使われることはありません。こちらの使いみちも気になりますよね？ 4分音符とは、1拍分音を鳴らす音符です。これはよく使われます。しかしBGMのジャンルによっても使われる頻度が異なります。 全音符、2分音符、4分音符だけではのんびりしたBGMしか作れません。そこで活躍するのは8分音符です。8分音符とは、2分の1拍分音を鳴らす音符です。この音符があることでBGMも大きく変わっていきます。
さて、ここまで音符の種類について解説していきました。では、それぞれの種類の音符はどのような種類のBGMを作るのか、見ていきましょう。 まず、全音符が主旋律に使われる場合としては、悲しい曲の偶数小説目や、神秘的な曲の冒頭などがあります。また、低音に使われる場合としては…とはいっても 僕の場合は 低音の部分を作っているときに全音符は乱発するのでまあ「たまに出てくるだろう」と思っとけばよいでしょう…（個人の意見です） しかし、全音符そのものが使われることは少ないのです。次の図のように、付点2分音符で3拍分演奏しつつ、後ろに1拍分のメロディーを入れる、というもののほうが多いと思いますね。
次に、2分音符が主旋律に使われる場合では、先ほど挙げたように、付点をつけて3拍分演奏されることがあります。 2拍分演奏させる場合としては、悲しい曲や、神秘的な曲の冒頭などがあります。 うん。2分音符はほぼ全音符と同じ役割を果たすのではないでしょうか？ いえ、多くのジャンルの曲の最後や8の倍数小説目の部分に使われることも多くあります。低音のパートにおいては、もうスターと言ってしまえるくらいたくさん出てきます。
また、一番よく使われるであろう4分音符が主旋律に使われる場合としては、かっこいい系のBGMが挙げられます。また、3拍子のものの場合にも使われます。しかしながら4分音符だけで使われる場合は少なく、8分音符と組み合わせて使われることが多いです。4分音符は本当に8分音符との組み合わせが良いのです！例えば、4分音符→8分音符→4分音符→8分音符→…や、8分音符→4分音符→8分音符→4分音符→…などという組み合わせがあります。また、4分音符に付点をつけて1.5拍分音を鳴らす場合もあります。低音に使われる場合では、4分音符がそのまま4拍分並べて使われたり、ほかの音符に交じって出てきたりします。
8分音符が主旋律に使われる場合では、4分音符や16分音符などと並べられて使われることが多いです。あるいは付点のある音符の前や後ろに入ったりしています。8分音符は、低音においても隠れたスターとして大活躍します。8分音符だけで並べられたり、他の音符に混じって使われたり…まあとにかくたくさん使われます。
ここまで僕はめちゃめちゃな説明をしてきたのですが、いかがでしたか？言いたいことは、音符の並べ方としては、単独で使われるときとほかの種類の音符と並べて使われるときとがあるということですね。さて、それでは次の章へ行きましょう。
3.テンポの違いはBGMにどのような影響をもたらすのか さて、テンポの違いとBGMの関係についてみていきましょう。一つだけ皆さんにこの章では覚えていただきたい言葉があります。「BPM」です。これは&amp;quot;Beats Per Minute&amp;quot;の略です。つまり何かというと、1分間に4分音符を休まずにいくつ演奏することができるのか、ということです。例えば、皆さんは楽譜の最初に「♩=83」みたいなものは見たことがありますか？これは、1分間に4分音符を休まずに83回演奏できる、ということなのです。この単位は心拍数にも使われています。
では、テンポ数の具体例を挙げていきましょう。ざっと説明していくと、まず、80BPM前後では「遅い」テンポであり、ゆっくりしているので、落ち着いたような曲、神秘的な曲、悲しい曲などの例が挙げられます。
100BPMは、いわゆる「とても遅くはないが速いとか普通のテンポではない」といった中途半端なリズムであるため、緊迫した場面や、何かを考えさせるような場面のBGMで使うことができます。
120BPM前後の曲の用途はいろいろあります。例えば、かっこいい系の曲、少し落ち着いた曲、少し元気な曲、少し緊迫感のある曲などがあります。なぜ「少し」という表現をたくさん使用したかというと、あまり強い表現ができないからです。120BPM以外のテンポで強い表現をすることができます。でも一番使い道が多いのはこの120BPMなんですけどね。
そして150BPM前後は「速い」リズムであるため、とても激しい音楽に使われます。ここに低音などをたくさん入れると工夫次第では120BPMくらい、またはそれよりもかっこいい音楽を作ることができます。
また170BPMは「更に速い」ことから、更に激しい雰囲気になります。
使い道は結構少ないですが応用として、ゲームのワンシーン内でも雰囲気の起伏が激しいときには、テンポを途中で変えるものもあります。これを見て「ボス戦のBGMとかのことじゃない？」などと思った方もいらっしゃると思います。確かにボス戦が「雰囲気の起伏が激しい」の典型的な例と言えるでしょう。
このように、テンポの違いもBGMの雰囲気を変え、様々な使い方ができるのです。 むしろ、ゲームの雰囲気に合わせたBGMを作る際、まずはそのシーンにあったテンポとは何かを考えることが重要となってくると僕は考えます。
4.BGMに声は入れるべきなのか さて、ここからはレベルを少し上げます。基本的な音楽の構成要素について見ていったのですが、ここでBGMに歌詞は要るのかということを考察します。本来BGMには歌詞がないのが普通なのですが、歌詞を入れるか否かでだいぶ奥が深くなります。 声の入れ方にはどのようなパターンがあるのか見ていきます。
よくある普通の歌みたいに歌詞のようなものを入れる 「アー」「オー」などの単母音の声を入れる 意味不明な(文字起こし不可能な)歌詞を入れる 1単語や短い文章など、1つのフレーズをある場所に入れる サビだけに歌詞を入れる サビにだけ歌詞を入れない ほとんど声だけ などいろいろあります。パターンを挙げたらきりがありませんね。このように、歌詞に声を入れるというのは奥が深いものなのです。 しかし、本題はここから。BGMに歌詞を入れるのには次のような目的があると(少なくとも僕は)考えます。
ゲームをする上で、BGMの存在感を一層強める 今のゲームのシーンをより鮮明に反映する 何かしらの演出をより豪華にする 声のない単調なBGMからより複雑に、より長くし、ゲームの奥深さを増す などいろいろあります。しかしながら、BGMの声には短所もあります。
ゲームのクオリティがある程度高くないとBGMとのギャップが際立ってしまう 音量を調整しないと声が際立ちすぎたり、逆にまったく意味がなかったりしてしまう 特に日本語など、歌詞が聞き手にとってとても良くわかる言語だとゲームよりも歌詞のほうが印象に残りやすくなってしまう 声にはこのような短所もあり扱いが難しく、曲制作に長けているような人でもなかなか難しかったりします。
上の短所にもありましたが、BGMの声の音量調整は特に複雑です。そこで、音量と声との印象の関係を表にまとめてみました。表の横の列は、声パートの音量がその他の楽器の音量の何%なのかを示し、縦の列は全体音量を示します。なお、特にこの表は、作曲の経験があまりなく、ゲームもほとんどしない僕の独断と偏見のみに基づいています。くれぐれも参考にしすぎないように。
〜50% 〜100% 100%〜 静か 声はほとんど聞こえない、BGMの存在感は薄い ある程度バランスが取れている、存在感は小さい ほとんど声だけが印象に残る 普通 ゲームに集中しやすい 特にバランスの取れたBGM、ゲームの雰囲気を感じやすい 何かしらの演出に使われそうな独特な印象 うるさめ 声よりはメロディを気にしやすい BGMの存在感そのものは特に大きい 声の印象が大変高い このように、声を扱うのはとても難しいのですが、使いこなせるようになると曲の幅がとても広がります。みなさんがゲームをするときも、特に声を気にしてはいかがでしょうか。 また、どんなに声を工夫しようとも声が似合わないような演出やシーンもたくさんあります。「こんなシーンは果たして声を入れるべきなのか」と考えてみるのもとても楽しいものです。 しかし、更に難しいポイントが次の章にあります。みなさんはなんだと思いますか?</description></item><item><title>ゲームプログラミングと数学が出会う時</title><link>https://asanobuturi.github.io/document/2018/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/7/</guid><description>シューティングゲームばかり作っている中２の中野です。今回はいろいろな物理・数学に関することをここに記したいと思います（内容は至って真面目です。期待しないでください）。
微分の基礎 第一章では微分の基本中の基本について説明します。まず、微分とは読んで字の如く“微小部分で考える”ということです。たとえば正比例などのグラフの場合は直線なので、傾きが一定です（傾きの求め方：\( \frac{𝛥𝑦}{𝛥𝑥} \)（ここの𝛥というのは変化量という意味です））。しかし直線じゃない線を考えた場合に、\(𝛥𝑥\)の範囲を変えると\(𝛥𝑦\)が変わってしまいます。では例として \( 𝑦 = 4.9𝑥2 \) を考えてみましょう。
x=2 から x=3 の変化を考える場合 \[ \frac{𝛥𝑦}{𝛥𝑥} = \frac{(4.9 × 3 × 3) - (4.9 × 2 × 2)}{3 - 2} = 44.1 - 19.6 = 24.5 \] x=2 から x=4 の範囲を考える場合 \[ \frac{𝛥𝑦}{𝛥𝑥} = \frac{(4.9 × 4 × 4) - (4.9 × 2 × 2)}{4 - 2} = 29.4 \] 上記より𝛥𝑥の範囲によって傾きが違うことがわかります。では、いよいよ本題に入りましょう。上記の変数を使って考えてみましょう。\(𝑥 = 2\)から\(𝑥 = 2 + ℎ\)の範囲まで考えることにしましょう。
\[ \frac{𝛥𝑦}{𝛥𝑥} = \frac{4.</description></item><item><title>ゲームを作るうえで大切なこと</title><link>https://asanobuturi.github.io/document/2018/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/1/</guid><description>物理部中 2PC 班の吉田(行人)デス。我々PC 班はプログラミングをして、ゲームやソフトを 作っている訳ですが、僕たちがゲームを制作していく中で大事なことが幾つかあります。 ここでは、その大事なことを幾つか紹介したいと思います。
ユーザーに分かりやすい画面 いわゆる UI(User Interface)ですネ。この UI がしっかりしていないとユーザーはゲームやソフトの画面を理解できません(理解しにくいです)。この UI をしっかりするための職業もあるぐらいです。昔は CUI ソフト(コマンドプロンプトを使ったソフト)がほとんどでしたが今ではほとんどのソフトが GUI ソフト(ユーザーに分かりやすいように画像などを使ったコンピュータの操作を容易にしたソフト)になっています。
これは今ではたくさんの人が PC を使うようになったのでユーザーに対して分かりやすいソフトの需要が急激に増えたことによると思われます。
なので我々物理部員も、この風に乗って画面をできるだけ見やすいようにゲームを作っています(気にしない人間もいますが)。
UI をしっかりするために日常生活で実践できることがあります。それは――お母さんからよく言われるようなことですが――自分の伝えたいことを他人にしっかり理解してもらえるように生活する事です。
これを普段から行えば、UI はしっかりとしたゲームとなります。
皆さんも、もっとユーザーがあっと驚く作品をいつか作りたいのであれば、上記のことを試してみては如何でしょうか?
ゲームが、人をゲームに夢中にできる理由 前置きしておくと、ここでいう「ゲーム」とは堂々巡りですが「人を夢中にできるゲーム」の事です。ここでは、なぜ「人を夢中にできるゲーム」が人を夢中にできるのか、という事についてお話します。
少し難しい話になりますが、人がゲームに夢中になる時、モチベーションの問題が大きく関わってきます。モチベーションについての研究で(僕が知っている範囲で)最も有名なのは、恐らく「マクレランドの欲求理論」だと思います。
マクレランドは、人が抱えている欲求を次のように分類しました。
達成欲求:一定の目標に対して、達成し成功しようと努力する欲求 権力欲求:他者に対して影響力を与え、コントロールしたいという欲求 親和欲求:友好的で親密な対人関係を結びたいという欲求 回避欲求:失敗や困難な状況を回避したいという欲求 この欲求を満たせば、基本的には人はゲームに夢中になれると言われています。
例えば、達成欲求だったら、ゲームをクリアするために主人公を強化する要素をゲーム内に入れたり、権力欲求だったら、主人公をプレイヤーによって不自由なくコントロールできるようにしたり、親和欲求だったら、ユーザーとユーザーが共にプレイできる要素を加えたりとか、回避欲求だったら、どんな技も回避出来たりカウンターできたりするようにする、等があげられます。
一つのゲームに夢中になっている人なら、上の 4 つの欲求をそのゲームが満たしていることが分かると思います。少し考えてみてくださいネ。
この事について、日常生活で気を付けなければならないことは特にないと思います。
強いて言うのであれば、周りの人の人間観察をすることです。これをすれば「あっ、あの人今達成欲求が強くなっているな」みたいなことです。
※周りの人の迷惑にならないようにやりましょう(あと、普通の人から見たら変人に見えてしまうので度を越えないようにしましょう)。
日常生活の1つ1つのモーション 最後の 3 つ目です。私たち人間は脳から電気信号を送り、それを元に体を動かしています。
この事は、それなりに有名なので知っている人もいると思います。人間が行っているモーションは全てプログラムで表せると言っても過言ではありません。要するに、私たちは四六時中プログラムを実行していると言っても(厳密には少し違いますが)過言ではないということです!
日頃の自分の腕の動きを想像してみてください、あるいは、今そこで自分の腕を動かしてみてください。
例えば腕を 90°曲げるには、自分の肘を中心として、三角関数を使い座標の値を色々いじってたりして、ようやく曲げることが出来ます(三角関数などについては理解していなくてもいいです。ここでは腕の動きをプログラムで表せることを分かってくれればいいです)。
少し難しいですが、体の動きのほとんどは(何度も言う通り)プログラムで表せます。ただ、日常生活でいちいちそんな事を考えていたら埒が明きません。
そこであげられる物が一つ。物事を論理的に考えてみましょう。
熱いコーヒーを飲むことは、
「息で冷ます→カップを手に取る→カップを自分の口辺りに近づける→カップを傾け自分の口にコーヒーが入るようにする(→香りと味を嗜む)→飲み込む(→息をつく)→カップを元の場所或いは自分の近くに置く」
という一連の動作によって成り立ちます。これでご理解いたただけたでしょうか?このように、一つの動作を論理的に表すことによって、ゲームプログラミングがある程度やりやすくなります。皆さんも、日常生活で慣れれば楽にできることなので、試してみては如何でしょうか?
終わりに この3つの事を実践することで(2つ目はやってもやらなくてもいいですが)かなりゲームプログラミングがやりやすくなり、またプログラミングをこれからやるという方もタメになると思いますので、この文章を読んだその日から、是非実行してみてください!</description></item><item><title>レールガンについて少し考えてみる</title><link>https://asanobuturi.github.io/document/2023/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2023/3/</guid><description>皆さんどうも、匿名です。
なんとなくレールガン作りたいな、と思って(主にブル●カのア●スのスーパー●ヴァのせい)書き始めました。
1.レールガンって？ レールガンとは火薬を使わずに、物体を電磁気力を使って加速させ、撃ち出す装置です。2本のレールの電極棒の上に発射させる金属を乗せ、電極棒に電流を流して金属を発射させます。
これだけではどのような原理で発射するのかあまりよく分かりませんよね。では原理を詳しく解説していきます。
まず、フレミング左手の法則をご存知でしょうか。左手を3つの方向に向けるなんかかっこいいやつ(個人の感想)です。
親指は力の向きを、人差し指は磁界を、中指は電流を表します。レールガンはこの法則を利用します。ローレンツ力ってやつです。また、力、磁界、電流の向きはそれぞれ直角に交わっています。赤の矢印が力の向き、青の矢印が磁界の向き、橙の矢印が電流の向きを表しています。
{width=300px}
また、もう1つ、右ねじの法則というのも使います。
{width=300px}
図解するとこんな感じになります。赤の矢印が力の向き、青の矢印が磁界の向き、橙の矢印が電流の向きを表しています。
{width=300px}
コイルガンと何が違うのか？ コイルガンもレールガンと同じく発射物を電気と磁力を使って高速で撃ち出すものです。しかし、コイルガンとレールガンの原理は全く異なります。
レールガンは前述の通り、フレミング左手の法則、ローレンツ力を利用しますが、コイルガンはコイルの電磁石の力を利用します。コイルに高電圧を流し、一瞬だけ強力な電磁石にしてその磁力で発射物をコイル内部に引き寄せた勢いで発射物を撃ち出します。
2.回路をざっくり考えてみる レールガンは大きくこんな感じに分かれてます。
電源、昇圧チョッパ 充電対象(コンデンサ)、(念のため安全装置) レール、発射物 結構さっぱりしてますね。
1.電源、昇圧チョッパ レールガンを発射するためにはとても大きな電圧が必要です。家庭電源は100V。対してレールガンに使う電圧はそれ以上のものが必要です。そのため、電圧を上げる機械が必要になります。そこで使用するのが昇圧チョッパです。
(昇圧チョッパの構造など詳しく知りたいについては一昨年の部長が書いた部誌のコイルガンの解説のところにかなり詳しく書かれているのでそれを参照してください。)
2.充電対象(コンデンサ)、(念のため安全装置) 昇圧チョッパで電圧を上げてた後にコンデンサに充電します。充電することで、一気に大きな電圧を一瞬で流すことができます。
電荷を放電させる安全回路は作っておいた方が良いです。コンデンサに充電した高電圧の電荷を万が一の時そこから放電できます。必須ではないですが、レールを通さずに放電するとなるとコンデンサの両極に直接電気伝導体を当ててショートさせるという強硬手段で行かざるを得なくなります。高電圧をショートさせる時はかなり大きい音と火花が発生するのであんまりやりたくないです。やり方悪いと感電しますし。そのために電荷を放電させる安全回路を作ります。メタルクラッド抵抗あたりを使用するのが良いですね。
3.レール、発射物 発射物は電気伝導体です。
レールに関してなのですが…発射物を走らせた場合、摩擦でえっぐい音と摩擦熱や、空隙の放電による熱が発生します。電流がものすごく大きいとレールや発射物がプラズマ化したり蒸発したりします。
レールを走らせるという機構上、摩擦が発生するのは仕方ないですね。
3.最後に レールガンについて調べながらこの部誌を書いていたのですが思ったより製作は簡単そうでした。思ったよりコストもかからなさそう。レールを走らせたときに出る騒音や熱の対処、昇圧チョッパの回路の簡略化などができたら作ってみたいですね。
ここまで読んでいただきありがとうございました。</description></item><item><title>オタクから見る精神論</title><link>https://asanobuturi.github.io/document/2017/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2017/11/</guid><description>前書きみたいななんか いきなり分けのわからないタイトルだが気にしないでほしい。筆者自身もそう思っている。タイトル通り「オタクと呼ばれるもの』について語ろうと思う。
オタクの定義 オタクとは何か。この論題については今までに多くの論争が起こってきた。
“オタク”と置いて最初に思い浮かべるのは何だろうか。アニメオタク、アイドルオタク、鉄道オタク。まあ、この3つを思い浮かべる人が多いだろう。中には健康オタクなどの他の〇〇オタクを思い浮かべる人もいるだろう。だが、この相違は『オタク』の本来的な意来からの乖離のよって生まれる。
オタクの本来的意味とは何か。これははっきりしている。1983年、『漫画ブリック』において、『「この頃やたら目につく世紀末的ウジャウジャネクラマニア少年達」「友達に「おたくら さぁ!」なんて呼びかけてるのってキモイと思わない?」と評し、「彼らをおたくと命名する」』と蔑称、名詞として使われ始めた。このように『オタク』とはもともと軽蔑の意味を持つ言葉である。
反対に、健康オタクなどのマイナスイメージが極端に大きいわけではない『オタク」を思い浮かべた人は、かつてあった『オタク』という蔑みの意味を持つ言葉に縛られていない人物だ。本来の意味とは異なった使い方ではあるが、寧ろ良い傾向だ。
『オタク』が蔑称として用いられたのは20世紀までであり、最近ではこのような蔑みの意味が薄い「オタク』が表に出てきている。このように最近では『オタク』というものはかつてとは違い、言葉の持つ意味が多様化し、ある程度社会に浸透し一般化してきた。
本題に戻ろう。『オタク』の定義だが簡単にそういうものとするのは困難だ。語源から考えると『気持ち悪いやつら』となる。だが最近言われるようになってきた『オタク』たちは必ずしもそうではないだろう。「気持ち悪いやつら』ではなく、『理解に苦しむ奴ら』の意味合いが強くなってきている。冷静に考えてほしい。例えば健康オタクとアニメオタクについて比較してみよう。
このグラフは私の個人的な偏見を織り交ぜた一般人から見た両者の違いを表したものだ。この2つの最大の違いは理解可能領域の有無だ。長さは知らん。この理解可能領域は『へー、ふーん。あぁなるほどそういうことね』程度には理解できる領域を表す。全く健康に興味がない人なんてほとんどいないだろう。ちょっと行き過ぎてる気もするけどわからなくもないと思えるレベル、それがこれだ。対してアニメオタクゲージにはそれがない。考えてみてほしい。自分がまったく興味ないどころか初めて聞いたことについて語りだす人間を。理解するしない以前に関わりたくないと思うだろう。だがどちらも行き過ぎれば気持ち悪いというのは共通している。
まとめると、『オタク』の定義は”興味ない人からしたら理解しがたい人々”ということ になる。
さて次はオタクが対象とする趣味について考えよう。どんな趣味なら『オタク』でありどんな趣味なら『オタク』ではないのか。
これは一言で言えば『マジョリティかマイノリティか』ということである。
たとえば、アニメとサッカーで考える。サッカーは間違いなくマジョリティだろう。WCや国を挙げてのイベントだ。それに生きてきて一切サッカーに関係しなかった人はほとんどいないだろう。WCの時期はテレビをつけると大体関係したことが取り上げられている。サッカーは誰でも知っている、ということになる。それはさておき、サッカーはマジョリティというのはいい。アニメはどうだろうか。最近は多少は浸透してきたとはいえそれでもまだマイノリティだろう。
ここでこの図だ。前述のモノとほぼ同じものだ。ここで理解可能領域に注目してほしい。マジョリティとマイノリティの最大の違いはこのゲージの有無だ。この図からわかるように、マジョリティは理解される、という点が大きい。少しばかり行き過ぎても自分も少しは知ってるから&amp;hellip;&amp;hellip;とある程度は理解される。この辺りは前に述べたので省く。
マジョリティとマイノリティの境は個人の基準だ。誰でも理解できる、という点で区切るのがいいかもしれない。もしくは初対面の相手に対する自己紹介の際に言えるかどうか、でもいいだろう。
どこからが『オタク』なのかについてはまた後ほど。
ようやくまとめに入ろう。『オタクの定義』とのことだが、
意味の対象がマイノリティ マジョリティでも英味がない人からすれば気持ち悪いレベル 『マニア』も『オタク』の範囲内 ということである。
オタクレベルと日常生活 ここからは、何事も程度が大切である、ということについて語る。
ここでは主にサッカーとアニメ、この2つから見ていこうと思う。
まずはレベル 0。というか普通の人。サッカーならばテレビで放送してることに気づき、気が向いたら見る、アニメも同じ。興味ないわけじゃないけど能動的ではない、というような感じ。尚、アニメとは深夜以外も含むことにする。日常生活には一切影響はない。
レベル 1。サッカーならばテレビでやっているなら見る。さらに好きなチームあるわけではなく『サッカー』そのものが好き。アニメならば好きな漫画などがアニメ化したら興味を 持つぐらい。この程度まではまだまだ普通。アニメの方は人によっては理解不能になるかも。それでも普通の人でもこのぐらいだと思っている。
レベル 2。サッカーなら好きなチームができたり、選手ができたりするレベル。そのチームの試合や選手が出る試合は前日からチェックしたりもする。アニメならその時期に放送しているアニメの中から興味のあるものを選んで見るレベル。人によってはこの時点でオタク認定が始まる&amp;hellip;..のか?もう少し早いかもしれない。流石にアニメを見るだけでオタク認定する人には何も言えない。このレベルは興味ない人にでも理解してもらえるぐらいだろう。 理解してください。
レベル 3。 サッカーなら好きなチームの試合が近くであるのならスタジアムにいき観戦するレベル。人によってはグッズを買ったりもするだろう。アニメならば好きな『声』ができたり、『絵』に対しても注目するようになり、ただのアニメ観賞から一歩進む。このあたり から日常生活にも影響が出てくる。話題としても十分通用するぐらいだろう。とはいっても、軽くだが。
レベル 4。サッカーなら好きなチーム試合があるならどれだけ遠くても行こうと努力する レベル。人によっては応援団の一員になっている。アニメならワンクールあたりに見るアニメの本数が増え、グッズの購入が増加したりする。日常生活にかなり影響が出る。ここまでくれば立派なオタクの一員と言える。
レベル 5。 末期。サッカーなら日本代表サポーターとして海外にまで行く。アニメなら生活費を切り詰めてまでグッズを買ったりする。ここまで来たらもはや日常生活に影響が出る以前に趣味の合間に生活するか、趣味が日常になる。もはや気持ち悪い領域に入る。
上記に書いたのはあくまでも一例かつ偏見であり色々と言いたいこともあるだろうが、ご了承願いたい。
日常生活に影響がある、といっても人それぞれで個人差がある。アニオタのなかでも結構深い方にいるのにグッズはあまり持たずに、イベントにもあまり参加しない人もいる。逆にあまり深くはまっていないのに大量にグッズを買ったりイベントに行きまくる人もいる。日常生活への影響は趣味への深度よりも個人がどのように趣味と生活を分けているのかが関係している。
『オタク』と日常生活への影響を語るうえで『NEET』や『ひきこもり』との関係性は欠かせないだろう。『オタク』と聞けばそれらを思い浮かべる人も決して少なくないだろう。それは間違っていない。確かに『NEET』や『引きこもりは』そのほとんどが『オタク』に分類 される。だが必ずしも『オタク』が『NEET』や『ひきこもり』になるわけではないと認識してもらいたい。
『NEET』や『ひきこもり』になりやすい『オタク』もいればなりにくい『オタク』もいる。中にはそうなることを危惧してアニメやラノベなど一切触れさせようとはしない親がいるだろう。だがそれは悪手でしかない。そのように押さえつけられてしまうと将来独り立ちした際に一気に解放されてしまう。そうなると自分で稼いだ金ということもあり歯止めがきかず、どんどんと深みにはまってしまう。押さえつけられていた故の反発が起こってしまう。そうなると日常生活にも影響が強く出るようになる可能性がある。対して幼いころからアニメや漫画に触れ、制限されなかった場合はというと、中学、高校あたりでピークを迎え、多少下がって落ち着く。グッズを買う金があったとしても制限があり、欲しいものをすべて買ってはすぐに底をつく。そのため浪費はあまりせず、大人になってもイベントなどのために節制するようになる。中学生、高校生のころから趣味と生活を分けて考えさせることが重要だ。『NEET』や『ひきこもり』にしたくないというのなら押さえつけるのはあまり得策ではない。さらに親がそのような趣味に対して理解があるのならば、親子間のコミュニケーションツールとしても機能する。日常生活云々はどれほどの深度にいるかではなく、個人の精神的な問題の方が強いのではないだろうか。
ここからが本題 ◆ オタクはなぜ 「オタク』なのか 『オタク』とは決して好まれるものではない。『キモオタ』という言葉があるとおり、『オタク』は気持ち悪いものであるといった悪感情は存在する、ではなぜそのように思われるのだろうか、それを考えていこう。
見た目 なんといっても見た目は重要だ。初めの印象に大きく関わってくるところだ。普通ならば見た目に多少は気を遣うだろう。だがオタクはそうではない。
まずは服装だ。『着られればいい』『服を買う金がない』そんな理由で服を買わない。いや、オタク以外だってそう言う人はいるだろう。しかし、オタクはあまり服に対して関心がないのは恐らく『普通』がおかしいからだろう。学生のころから同じような趣味の相手とだけ関係を持つとこのようなことになってしまう可能性がある。
痛〇〇 痛車、痛スマホ、痛T&amp;hellip;&amp;hellip;あげればキリがない。街中で痛車を見るとすごいと思うのもあれば「うわぁ&amp;hellip;」となるものも多い。オタクではない人やオタクでも公私ではっきりと分けている人からすればかなりのインパクトがある。一部のオタクにはこういった類のものを所有したがる傾向がある。
このようにオタクに対する印象が悪くなってしまう原因は多数存在する。
オタクと精神論 『オタク』を精神的な意味で考えていこう。
『オタク』にはよく『地雷』と呼ばれるものが存在する。ある特定のことについて、触れられたくないことを不用意に触れてしまうと逆上したりすることだ。『オタク』に限らずほとんどの人にはあるだろう。だが『地雷』というと何かと『オタク』が怒ることをさす場合が多い。なぜだろうか。ここには人間としての本質がかかわってくる。
人間の本質とは何か。それは『否定』であると考える。「いや、それは違うんじゃないか」と思った時点で当てはまる。『疑問に思う』という行為は軽度の『否定』であるからだ。『オタク』はよく人の話を否定する、と言われることがある。それは正しいが何も『オタク』に限った話ではない。人間ならすべて当てはまる。自分の意見を持つ、ということはすなわち相手の意見を『否定』するということだ。『オタク』がよく人の話を否定する、と言われるのはこの『否定』が『全否定』だからではないだろうか。
では『全否定』と『部分否定』の違いは何か。『全否定』は文字通りすべてを否定するということだ。それはつまり他人の話を聞かない、意見を取り入れない、ということだ。対して『部分否定』はどうかというと逆だ。他人の意見を全肯定するわけでもなく全否定するわけでもない。他人の意見で共感できる部分や自分にとってプラスになることを吸収し、自分または大多数にとってマイナスになる部分は否定する。それが『部分否定』だ。この部分否定は自分の意見の昇華につながることになる。
『地雷を踏む』と呼ばれるのはそんな『全否定』をたたきつけているのと同じことだ。そんな意識は全くなくとも、受け取る側にとっては全否定されている気分になっている。『地雷』を踏まないためにはいろいろと工夫しなければならない。
この『否定』だがアニメが年に何十本も出ている理由でもある。それまでにあったアニメを『部分否定』し、また別の要素を入れることで同じようなジャンルの愛好家やそれ以外からも新たに引き込むことができる。そのようにどんどんと新しい、限りなく理想に近いものがどんどんと出てくるため、『オタク』は泥沼から抜け出すことが難しい。シリーズ物はそれが顕著に表れる。
おおむねこんな感じ。これが続くことで古参にも新規にも対応したものが出来上がる。
この『否定』は理解することにもかかわる。『理解不能』とはつまり全否定である。趣味の否定は駄目だと先ほど述べたが、それが『地雷』だ。ここで『部分否定』とはかなり効果がある。ある程度は容認するが、限度はある。そんな対応が一番いい。また、他の『部分否定』の一例として『無関心』がある。この無関心というのが一番多い『部分否定』かもしれない。それはそれ、これはこれの精神で行こう。</description></item><item><title>カップラーメンの儀式</title><link>https://asanobuturi.github.io/document/2002/rejected/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2002/rejected/1/</guid><description>昨年、本当にいくつものボツ企画が存在しました。その中の一つが、またこのように日の目を見たわけで、我々一同死にかけております。さて、今回の企画はカップ麺にステキなブツを放り込んで食べようという企画であります。
ドクターペッパー、カルピス夕張メロン味(もろ原液)、午後の紅茶(ミルク)
これらが昨年放り込んだ物であります。
今年は、何を入れましょうか?それを決める会議が最初にありました。
軽油!絵の具!猫!昇竜拳!覚○剤!
手に入れろと言われたら、彼はどうしたんでしょうか?
まぁ、いい。最終的に以下の物に決定した。
1ポカリスエット
2野菜ジュース(ALLVEG)
3ヤクルト
4コーヒー(BOSSブラック無糖)
5飲むヨーグルト
FINALメッコール
ほとんどの物は何かわかるだろうが、一つ、わからない物があると思う。
・・・・・・・・「メッコール」・・・・・・・・・
あたりまえだ。普通の店では売っていない。
何故か?
マズイ。クサイ。ヒドイ。
メッコールを一缶飲みきった人を俺は知らない。
ちなみに、カップ麺試食者の一人Mはまだ飲んだ事が無い。
存分に味わって頂こう。
ちなみに、炭酸飲料である。
ポカリスエット まず、被験者3人衆を紹介しよう。
I・・昨年度挑戦者。死んだはずだが、ド○ゴンボールで生き返った。
M・・今年度主催。曰く、「祭りの本番より準備してる時のが楽しい」
K・・当日飛び入り。後に、後悔する事になる。
それでは開始だ。ポカリスエットを紙コップに移し、理科職のレンジに温めに行く。
ホットポカリの完成だ。
・・・・・暖めたことにより薬品臭さが微妙に出ている。
同じポカリスエットでもこんなに違う物だろうか?
* 良い子のみんなはポカリスエットを暖めて飲むのは止めましょう。
そして、カップ麺に入れて3分。さて、記念すべき1発目。
テンションも高まり期待も高まります。
(以下:被験者yazrow氏談)
匂いをかいで一気に期待DOWN今回2度目の挑戦であるyazrowの勘が叫ぶ。
ヤバイヤバイヤバイヤバイニゲロニゲロニゲロニゲロ、と。
なんで1発目からこんなんやねん、と。しかし、食べないわけにはいかない。
自分のカップに麺を取り分ける。
「先輩の麺少ない!」という被験者Kの叫びはほっとく。
そして、一口。
・・・・・ポカリの酸味と甘味、それからカップ麺の味。
これが見事に混ざり合って殺人兵器と化してます。
やばい、1発目からこれは危険過ぎる!!しかし、1発目ぐらいは完食せねば!!
と、気合で完食するも、なぜか被験者Kが一番に食べ終わっていました。
評価:スポーツドリンクは体にいいわけじゃない(-48)
ここまでがyazrow氏の話である。
だが、一人、しょっぱなから食いきれなかった奴がいたのだ。
そいつの名はM。奴は食う事が出来ずに途方に暮れていた。
S「食べてもいいですよ」
彼には後輩Sがこの瞬間神に見えたそうだ。
野菜ジュース(ALLVEG) 続いて野菜ジュース。最近の野菜ジュースは飲みやすいのが多い。
野菜だけでなく果物も入っているからだ。『充実野菜』とかがいい例だろう。
期待は裏切られた。
そうです、よくよく名前を見ると、「ALLVEG」=「全て野菜」。
Yazrow氏は基本的に甘くない野菜ジュースは嫌いらしいのに・・・・
グダグダ言っても仕方ないですよね♪
暖め、カップ麺に入れる。
しかし、どろどろしすぎなので暖める時に水で少しうめる事にした。
3分待ち、彼らは食った。
以下:yazrow氏談
なるほど、これは野菜ジュース味が強い。
野菜ジュースが飲める方なら全然平気であろう。
うん、これならまだ食べられる方と言う部員K。
野菜ジュースが平気な人なら大丈夫なようだ。野菜ジュースが平気なら。
yazrowとMは残しました。
俺はこれで食い終わるぞ。 「・・・・・・・・」 評価:すーぱーやさいじん(-21)</description></item><item><title>コヒーラ</title><link>https://asanobuturi.github.io/document/2004/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2004/7/</guid><description>コヒーラコヒーラとは電波探知機と言ってしまっていいのです
身近なものにはラジコンとかに実装されております
有名なお話では
日露戦争のとき
日本艦隊が装備していたのです
だから東郷平八郎が勝ったんだ……
と誰かが言っていた気がするが彼曰く
「７分は運であった」
って言ったらしんだが？
それはいいとして
『電波探知機』というのですから
電波を探知(実際検知のほうが正しいのでは？)しちゃうのです
辞書で調べると
無線電信の初期に使われた検波管。 ガラス管内の金属電極間にニッケル細粉を入れたもの
とある
はっきし言って「そう」みたいである
辞書でも『初期の検波管』と述べているので
個人の力でも作成できたりする
では一体どうやって作るか？ 別に管なんて使う必要ないです
おわんみたいな器にアルミホイルでも敷いて(てか付箋紙状にして突き刺すもの可みたい)
器内にアルミホイルを丸めたものをたくさん入れる
敷いたアルミホイルに電線を接合する
な感じで出来ちゃいます
実際どうなのか？ 私自信まだ作ってないという現実を許してほしい
一応こんな感じ？
↑時間が無くて簡略化されたコヒーラ検波器 図のように解説すると
①器。これがないとアルミホイル球が漏れて悲惨に… ②豆電球。電波が検知されたら電流が流れるのでわかるように光を… ③アルミホイル球。たくさんいる。(図ほどではないと信じるのみ)大きさは均等に ④銅線＆電池(電池は省略)。これ、重要。ないと検波されたのかわからない ⑤電波。コヒーラが感知できる周波数は100KHz～１GHz程度。(ストライクゾーン大) ⑤の電波？
これはいろんなものから採用できる
たとえば
ライターの圧電装置(これを使用するときは注意を)
モーターで電気火花
とか使えばいいのではないのでしょか
仕組み 肝心なのを述べていなかった
仕組みは
電波を検知する→アルミホイルの皮膜が破れてホイル同士の接地面が通電状態になる→電流が流れると
という感じ
なんか微妙である
1865年時では2.4キロ先からでも検知できたそうです
しかしさっきの仕組みのままだとずっと電流が流れてます
なので器自身を揺らしてやれば接地面が変わるので
また通電しなくなります
うれしい限りだ
何度でもできるよ
因みに恐らく微調整がいります
理由はめんどくさいので省きます
あと
図では電池を省略してあるので銅線に電池を入れてください
ここまできて語るものがなくなってきました
時間があれば(執筆時九月)もっとましなのが書けたかもしれません
あと書いている時間。
数時間後には登校しなければなりません
本当は『無線』関係を
書きたかったのですが
あとがきに今年度は無線班は活動しないようなことが書かれてるはずなので
今年は書きません
来年は再興して
きっと地味な原稿を書くはずです
これを読んでくれて
コヒーラを作ってくれたら
うれしい</description></item><item><title>コイルガン 四年間のすべて</title><link>https://asanobuturi.github.io/document/2021/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/9/</guid><description>お久しぶりです。そうでない方もお久しぶりです。高二になってしまった部長です。前回部誌を寄稿してから早二年、今でもバカの一つ覚えみたいにコイルガンを作り続けているわけですが、その間いろいろありましたね。「いろいろ」の中身はあえて触れませんが。
ただのコイルガン？ コイルガン…なんて漠然と言ったところで、人によって色んなやり方があります。電源、昇圧回路、コンデンサ、スイッチング素子、コイルの段数、コイルの巻き。どんな理由で何を選んだか、そこに焦点を当てて解説します。
電源 コイルガンはEML(Electro Magnetic Launcher)の一種で、その名の通り電気を使って金属製の弾を発射するものです。電気を使うということは当然電源が必要で、その電源をどうするかも人によって様々です。
一番簡単(に思える)のは、コンセントのAC100V電源をブリッジダイオードで整流して、コンデンサで平滑した後にそのままコイルに流す方法でしょうか。ただこれはコンセントからコンデンサの間にトランスを挟まないといけないという欠点があります。(なぜかはググってください) いや、少し言い方が雑でした。実を言うとACアダプタにもトランスは入っていますし、トランスを挟むことそのものが欠点になるわけではないのです。そう、50~60Hz用の大きくて重いトランスを挟むことが欠点なのです。 今のACアダプタはスイッチング回路を使って相当小さく、軽くなっています。半導体技術の賜物ですね。このスイッチング回路を一から自作するのは大変ですし、コイルガンの機能の肝になるわけではないので市販のACアダプタで済ませることにしました。 また電池駆動も考えたのですが、乾電池は一瞬で無くなってランニングコストが相当高く付きそうなのと、eneloopなどの乾電池型の充電池も容量が少ないので交換の手間がありますし、かといってニッケル水素電池やリチウムイオン電池を組み込んで、充電制御回路まで作るのも面倒です。幸い僕が製作で使う物理教室にはあちこちにコンセントがありますし、文化祭の展示の時はコイルガン用に電源タップを用意すればいいですからね。
さてACアダプタと一口に言っても電圧、電流、電源容量と色んな種類のものがあります。 これをおざなりにすると痛い目に遭います。何て言ったって中2の文化祭で充電が異様に遅かったのはそのせいでしたから。 例えば電源容量(平たく言うとW数です)の小さいものを選ぶと、電力量は電圧と電流の積ですから、高電圧を扱うコイルガンでは引き出せる電流量が極端に少なくなってしまいます。5V2AのACアダプタで100Vのコンデンサを充電する、ぐらいなら待ち時間も気にならないぐらいだとは思いますが、今回のコイルガンは400V2720μF(後述)を10秒ぐらいで充電したいので、あんまり電源容量の少ないやつでは困ります。売ってる中で一番大きいやつがいいですね。
電源容量が大きければ何でもいいわけではありません。極端な話0.1V500Aだったりすると困るわけです。例えば半導体の耐電流は電圧に関わらず絶対的な電流で決まります。今回はなるべく大きくして電流を小さくする方針で行きます。仮に電圧が高すぎるなら抵抗で分圧すればいいのに比べて(電流消費が小さい場合に限りますが)、低すぎるから昇圧するのは色々面倒ですし。 結果電圧は15V前後にすることにしました。これは昇圧回路で使うNE555(後述)というICの耐圧が16Vだからです。16VのACアダプタもあるのですが、電源電圧でギリギリを攻めるのはさすがに怖すぎます。
また取り回しも重要です。先述の通り物理教室はあちこちにコンセントがありますが、かといってコンセントから全く動けないのは困ります。ですからできればPC用のACアダプタぐらいの大きさで、ATX電源のような大きいものは使わないことにしました。
この「なるべく電源容量の大きなもの、でもPC用のACアダプタぐらいの大きさで」という条件を元に、秋葉原の秋月電子で探してみたところ、15V 3.34Aがちょうどよさそうですね。何でよりにもよって3.34Aなのかは知りませんが。
(https://akizukidenshi.com/catalog/g/gM-08432/) これで電源については解決です。
昇圧チョッパ コイルガンの肝となる部分の一つが昇圧チョッパです。「高速充電」や「連射」など、使いやすいコイルガンを作るにはここの改良が不可欠です。
これだけ言っておきながら、昇圧チョッパに関してはほとんど改良点がありません。本当はネットで色々調べたり、どこを改良するか構想も描いていたのですが、何しろ時間がなくて…。基本も大事だということでお許しください。
さて、一番簡単にやろうとするなら使い捨てカメラの(ストロボの)昇圧回路にコンデンサを繋げるのがいいのでしょうか。確かに簡単ではあるのですが、当然欠点も多くあります。
まず一つは性能が低いことです。ストロボの消費電力はコイルガンと比べてかなり少ない(はず)なので、回路もかなり簡素です。これでは充電に相当時間が掛かるでしょう。
二つ目、これが一番大きいのですが、僕にわざわざ写真店に行って「回収した使い捨てカメラ、いくつか頂けませんか」なんて言う度胸がないことです。「コイルガンに…」なんて言ったところで相手にとっては意味不明ですし、そこまでして性能の低いものを集めに行く必要はありません。
また昇圧チョッパ単体で市販品があればいいのですが、コイルガン用なんてものは当然なく、そもそも昇圧チョッパ自体がマイナーなんです。降圧はPCやスマホ用にICもたくさんあるのですが…。 ICレベルなら昇圧チョッパもあるのでしょうが、だからといって「400Vまで耐えられて、数A出せる」ものは調達も難しいでしょう。ここに関しては使い捨てカメラを諦めるなら自作しかありません。
自作するにはまず昇圧チョッパの原理を理解しないといけません。 昇圧チョッパは次のような回路構成になっています。
スイッチON時 まずスイッチQ1がONのとき、電流は赤線の経路で流れます。 このとき、コイルに電流が流れるとエネルギーが次第に蓄えられていきます。電流I[A]が流れるリアクトルL[H]に蓄えられるエネルギーP[J]は次式で示されます。
$$ W = \frac {1}{2} LI^2 $$ スイッチOFF時 ここでスイッチQ1をOFFにしてみましょう。スイッチQ1がOFFのとき、電流は青線の経路で流れます。 このとき、Q1がON状態のうちにインダクタに貯まったエネルギーが矢印の通りにコンデンサに蓄えられます。コンデンサの両端に電流が流れればエネルギーもその分蓄えられ、両端の電圧も上昇していきます。 また出力電圧(=コンデンサの電圧)Voutが入力電圧Vinより大きくなったとしても、ダイオードD1の働きでVout側から電流が流れ出ることはないので、負荷抵抗を繋がない限りコンデンサに蓄えられたエネルギーは保持されます。
こうしてコイルガンに必要な数百V、今回は400Vの電圧が得られるわけです。ちなみに、今回は主に執筆時間の関係で説明が相当雑ですが、数式を交えた詳細な解説はネット上にたくさんあるので、気になった方はぜひ調べてみてください。
スイッチ」を「切り替える」 さて、問題はこの先にあります。先ほどの解説ではスイッチを「理想的な」、つまり電圧電流の制限もなく、ON時の電気抵抗はゼロで、一瞬でON-OFFの切り替えができて、なおかつ制御が不要なものとして扱っていました。 現実的にそんなものがあるかどうかなど言うまでもないでしょう。ありません。 そこでこの「理想的な」スイッチの代わりに何か使えそうなものを用意しないといけません。
「スイッチ」と漠然というと多くの方はこの「トグルスイッチ」を思い浮かべるでしょう。確かにこれもスイッチの役割を果たせますし、扱う電流が小さければ全く問題はありません。射撃用のトリガーなどはこれを使っていますし。
ただし、昇圧チョッパの「スイッチ」となると話は違います。まずは電圧です。 回路構成からもわかるとおり、このスイッチには出力電圧がそのまま掛かります。今回は400Vですね。一応スイッチそのものの耐圧の条件は満たせるはずですが、問題はそこではありません。
出力電圧がそのまま掛かって、なおかつスイッチON時の電流を見てみると、このとき電源-インダクタ-スイッチで閉回路ができるわけですが、この回路かなり大きな電流が流れます。 具体的には…これはインダクタの定数なども考慮して色々計算してやる必要があるのですが、結局のところACアダプタの最大電流程度になりそうです。勘ですけど。
また、「スイッチ」を「切り替える」速度も問題です。 先ほど「スイッチON時インダクタにエネルギーが貯まり、スイッチOFF時それが放出される」ことを述べましたが、これはすなわち「インダクタにどれほどエネルギーが貯められればいいか」はスイッチがONの時間、すなわちスイッチのON-OFFが切り替わる周期に依存することになります。
「インダクタにどれほどエネルギーが貯められればいいか」というのはインダクタの定格電流のことです。当然ながら定格電流の大きなインダクタは大きく、重くなります。 なるべく回路は小型化したいので、インダクタも例外ではありません。 スイッチング周期を短くしてインダクタを小型化しましょう。
(今後は数値として扱いやすい一秒間の振動数、つまり周波数f[Hz]で解説していきます。周波数fは次式で求められます。)
$$ f[Hz] = \frac {1}{T[s]} $$ さて、スイッチング周期を短く、つまり周波数を高くするにあたって大きな制約が立ちはだかります。それは「スイッチ」です。 具体的に今回はスイッチング周期を10kHz程度にしたいのですが、周期にすると1/10000秒です。こんな早さでトグルスイッチのON-OFFを切り替えられる人はいるのでしょうか。 もし我こそは！という方がいらっしゃいましたらお近くの物理部員までお声かけください。詳しくお話を伺います。</description></item><item><title>コミケは準備が９割</title><link>https://asanobuturi.github.io/document/2023/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2023/6/</guid><description>初めまして中3のIです
題名通り、ここでは毎年2回開催されている世界最大規模の同人誌即売会である、コミックマーケット(以下コミケ)に初めて行ってきた話に もし行くならしたほうがいいことを交えて書いていきます(時刻表記はJST)
準備編 コミケは準備が9割でした　準備にも色々ありますが特に重要なのは以下の3点だと考えています 1.入場券を買う 初っ端から何当然のこと言ってるんだと思われるかもしれません　しかし、以外に考える工程です(特に学生にとっては)
まず、コミケの一般参加チケットは入場できる時間帯別で3種類あります
アーリー入場
名前の通り一番早い10:30から入場できるチケットです　価格は5000円
絶対に手に入れたい作品がある人はこれを選ぶことをオススメします　同人誌の在庫数にもよりますがほとんどの場合、確実に入手できます
また、最遅でも11:00までには入れます(スタッフが無理やり案内する(午後入場との差別化のため))
しかし明らかに高いです　5000円あれば一般的な同人誌を10冊買えます　加えて、チケットを取れるかは抽選で決まります
抽選に落ちたら地獄の午前入場へ…
午前入場
11:00から入場できます　価格は1210円
アーリー入場とそんな時間変わらんやんけ！、と思うかもしれませんが実際に入場する時間はだいぶ変わってしまいます
多分一番人が多いところで、ニュースとかで報道されてる長蛇の列は午前入場の待機列です
人気サークル(所謂壁サー)は午前入場で早めに並ばないとすぐに売り切れてしまします
例として、C102ではぼっち・ざ・ろっくのアニメ総作画監督が同人枠で原画集を出品していたのですが、午後入場が始まる時刻である1時半前に売り切れてしまいました
しかもこれ何がヤバいかっていうと、列の長さが半端なくて1時間待ちくらいだったんですよね
私は買っていないのですが知り合いに買っている人が居まして、その人は9時くらいから入場列に並んで完売するほんのちょっと前くらいに手に入れてました
商売故仕方ないのかもしれませんが、転売も横行していました
{width=500px}
午後入場
13:30から入場できます　価格は550円
(私はこれで入場しました(金欠だったので…))
実は午後入場にも待機列があって私はそれに11:30くらいから並んだのですが、なんか12:30くらいに入れました　いいね
時間が遅い以外のデメリットは特にないので初めて行くならこれ買っとけばいいと思います
ちなみに午後入場待機列は入場口とはかけ離れた場所にあるのでスタッフさんに場所を聞きましょう(コミュニケーション能力が試される…)
当日券(番外編)
コミケは一応当日券も売っています　しかし、長蛇の列に並ぶことになるのでやめたほうが良いとは思います
コスプレだけ見たいって人ならいいかも
2. 買うものを決める これが一番大事です　使える金の量によってどれくらい調べるべきかも変わりますね～
とりあえずどの地区のどのスペースにいるかを記録しておきましょう
企業が出店してたりもしますが、死ぬほど並ぶし後日販売もあるので行かないほうが良いです　にぎやかで面白いので通るだけなら全然いい
1. 金ないひと Twitterとかでフォローしてる絵師がコミケに出るか確認するとちょうどいい金額になります(もちろん人によりますが)
アカウント名の後ろに　～＠C102東～みたいな感じで書いてると思うので、それをまとめておくと良いですね　人によってはお品書きを作っている人もいるので必要な料金を把握しておいてください
{500px}
2. 富豪 カタログを見て決めましょう　ウェブカタログと普通のカタログの2種類あります
ウェブカタログ
だいぶクソです　何故かスタミナ制で5分経つと見れなくなります　回復するまで見れません
しかも、サークル数は2万くらいあるのでめっちゃ時間がかかります　でも無料で見れるので余裕がないならこっち選ぶしかない {500px}
普通のカタログ
有料です(2750円)　内容はウェブカタログとそんなに変わらない　買う場所によっては特典でイラストがついてたりしてます</description></item><item><title>コラム 動的計画法</title><link>https://asanobuturi.github.io/document/2018/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/5/</guid><description>例えば、探し物が家の中にあるはずなのに見つからないとしましょう。そのときに、まず家を部屋ごとに分けます。そして、その各部屋を、また細かく分けます。例えば部屋を50m 四方くらいに分けていくとします。すると、その50cm四方の中に探し物があるかどうかは簡単に分かると思います。それを繰り返していくと、その部屋に探し物があるかがわかるはずです。
というように、いきなり答えを出すのが難しい問題（家に探し物があるか？）を解くときに、その問題を小さな問題（50cm四方の中に探し物があるか？）に分け、その小さな問題をすべて解くことで最終的な問題の答えを出す方法を、分割統治法といいます。
この分割統治法は、数学の問題を解くのにも使えます。中学受験をしようとしている、または経験した人なら、次のような問題を解いたことがあると思います。
問. 図のような道があったとします。このとき、左下から右上まで遠回りしないで行く道順は何通りありますか。（上の図） この問題は、交点それぞれに、その交点まで行く道順の数を書き込んでいくことで答えが出せます。（下の図）例えば、図の点Aでは、点Aの左から来るのは6通り、下から来るのが4通りなので、点Aに行く道順は 6+4=10通りです。これを繰り返すと、右上まで行く道順は225通りと出ます。
この場合は、「全部で何通りあるか」という問題を、「ある交点まで行く方法は、それぞれ何通りか」という問題に分割しています。また、このように小さな問題を解くときに、他の結果を再利用（左と下の道順の数を利用して次の道順の数を求める）するような分割統治法のことを動的計画法といいます。
では、動的計画法を使って、１つ問題を解いてみましょう。
問. Aくんは、（1から6までのサイコロだと問題が複雑になって、ただでさえ狭いこのページの余白で計算できなくなってしまうので）1から3の数字が書いてあるサイコロとすごろくを用意し、Aくんの駒をスタートに置きました。Aくんの駒は、1から3の数字が書いてあるサイコロを振って、1が出たら1つすすみ、2が出たら2つすすみ、3が出たら1つもどります。ただし、スタートより前には戻れないので、そのときはスタートにとどまります。
このとき、サイコロを5回投げたら、スタートから3つ進んだところにAくんの駒があるようなサイコロの目の出方は何通りあるでしょう。必要なら下の図を使ってください。</description></item><item><title>サブカルについて</title><link>https://asanobuturi.github.io/document/2017/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2017/10/</guid><description>はじめに 今日、日本は、国ぐるみでサブカルを海外に向けて発信していこうとする方向に向かっているわけですが、日本の文化の一つと言われているサブカルも、一部の人々からは嫌われてしまっています。
アニメ好きでも漫画好きでも、サブカル好きのオタクというのはほかの人々から下に見られ馬鹿にされいじめられているものです。
そんなマイナスの印象が強いサブカルですが、筆者はサブカルに少し触れた者として、そのマイナスの印象を少しでも払拭できたらと思いこの文章を書きました。
サブカルとは何か サブカルというのは、簡単に言ってしまえば大衆文化と異なった文化のことをいいます。日本で言えば、皆さんご存知の通りアニメ、漫画、ラノベ、ネトゲといったものたちです。ちなみに、海外ではこの単語は全く別の物を指し示すことがほとんどなので、濫用は&amp;hellip;&amp;hellip;やめようね!サブカルにあまりなじみがない方々のためにラノベとは何か少しだけ解説させていただきます。
ラノベ ライトノベルの略。ライトノベルと一般的な小説の境界ははっきりと定義されていない。中高生を主なターゲットにしており、世界観が幻想的、または学生に身近なものが多く、現在はどのラノベも同じような話ばかりである。アニメの原作となっているものも多い。
サブカルの衰退 ラノベをこよなく愛するオタクたちは、それぞれの好きな作品を持ち上げ、他の作品を下げる傾向にあります。
具体的な事例は多く挙げられますが、それぞれのファンどうしが争うことによって、その作品が大衆の目に晒されることになります。
争いと共に日の目を見た作品は多くの人に悪印象を与えることになり、結果として作品全体の価値を落としてしまっています。
サブカルの衰退というのは、往々にして思慮の浅いファンによって引き起こされるのです。
二次元と現実の混同 よくテレビでは、「犯罪者がアニメや漫画を見ていた!やはりやばい!」と言っています。最近ではとある18禁同人誌を模倣した事件も起きました。そういった事件は取り立てて大きく報道されます。これの原点はやはり東京・埼玉連続幼女誘拐殺人事件の犯人が「アニメによる異常性癖」と報道されたのが最初になります。
マスコミはオタクを下に見ているように受け取れます。自分たちは現実に満足していると思い込んでる根暗な人たちのように思われます。
このように二次元は現実に影響を与えると騒ぎ立てられていますが、よく考えてみると、人々は仮想世界で実行できることが現実でもできると本気で信じているのでしょうか?
所詮、二次元というのは空想の存在でしかありません。二次元を根拠にした行動はありえないのです。
最後に 筆者自身、自らが過激かつ理解しがたいことを述べていることは自覚しています。この内容が部誌に掲載されることに疑問も感じてます。
ただひとつ言っておきたいことは、サブカルを表に出すべきではないということです。たとえば、国を挙げてサブカルというものを推進していくのは避けるべき、というのも、この国にはほかに誇れることがあるはずだからです。
この文章をここまで読んだ方には、もっと有意義な時間の使い方を学ぶことをおすすめします。
以上です。共感してくださった方がいれば幸いです。</description></item><item><title>サムネイルジェネレーター</title><link>https://asanobuturi.github.io/edit/thumbnail_generator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/edit/thumbnail_generator/</guid><description/></item><item><title>スペースコロニーについて</title><link>https://asanobuturi.github.io/document/2004/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2004/8/</guid><description>この考えがでたのは実はアメリカ人が月面に降り立ったときらしい
その犯人は「ジェラルド・Ｋ・オニール」(アメリカの教授)
やっぱりこの人。1974年に『ヘリオポリス』みたいな形のを提唱している
規格としては
形　状　：円筒状
居住人員　：100万人
サ イ ズ　：長さ33~km；直径6.5~km
自転周期　：114秒（1~G）
昼　夜　：地上と窓が交互に3つずつ
構造物重量：3000万トン以上
といってなんかすごい
島三号モデルでの設計らしいが・・・
これでは良くわからないはずなので解説を
形としては円筒の両端に半球がくっついていて円筒の太陽の反対側(光を取り入れるため円筒は光線と平行になっている)のは人間が出す熱とかを排出し、その反対側はドッキングベイ(多分空港と考えてよろしい)が作られる
内部は側面を六分割して一つ置きに「窓」を作る
これには紫外線を通さないガラスを使うのだとか
その窓に光を通す感じに鏡を設置
その馬鹿でかい鏡が採光して太陽からの光の入射角を変えるなどして
日照時間を変えて四季をつくるみたいである
コロニー自体が回転することにより重力を擬似的に創出。
さてこれよりもっと早い段階で提案した人がいた
その人の名はＪ・Ｄ・ベルナール(イギリスの生物学者)。1920年代にやっていた
設計は
形　状　：球型
居住人員　：1万人
サ イ ズ　：直径512~m
自転周期　：30秒（赤道で0.95~G）
昼　夜　：球を取り巻く34枚の主鏡と副鏡で導く
構造物重量：320万トン
内部重量　：40万トン
という感じ
うーんスケールが遥かに違う
詳しい資料がないので外見を説明しようがない
ほかにもこれぐらいのレベルの大きさでドーナツ型が考えられている
それはというとスタンフォード大学で検討されていたらしい(人物不詳？)
形　状　：ドーナツ型
居住人員　：1万人
サ イ ズ　：半径830~m；内径130~m
自転周期　：57秒（1~G）
昼　夜　：主鏡と副鏡，ブラインドの組合せ
防護機構　：外壁50~cm厚の岩石（対隕石用）</description></item><item><title>スマホ世代の為のパソコン活用の心得</title><link>https://asanobuturi.github.io/document/2016/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2016/7/</guid><description>10年目 初代iPhoneが世に出てからもうじき10年、今では小学6年生の実に7割がスマホを使っているというデータも出るほど、子供にとっても身近な存在となっているスマホ。一方で生活から離れつつあるとも言えるのがパソコン、2015年実施の総務省の調査によると、20代以下で普段パソコンよりもスマホを使うとした人は60代以上の1割に対し6割にも上る。
問題点も… そんな中顕在化してきているのがパソコンに触れてこなかったことによる20代以下のパソコンスキルの低下だ。その深刻さは今年3月のNIKKEI STYLEで「スマホ世代のＰＣ知らずスキル低下、職場で波紋」という記事が出来ている程である。
確かにパソコンを使わずとも、スマホさえあれば日常生活では事足りる。だが現状パソコンを生活から完全に切り離せるかというと決してそうではないと思う。普段スマホしか使ってこなかった人がいざパソコンを使うとなったとき、どのように向き合えばいいか、その心得をここでは記しておきたい。
スマホとの差とは？ そもそもアプリを使って何らかの作業をするという点で、パソコンとスマホに大きな差は無い。それでも、スマホは使えるのにパソコンは苦手という人がいるのには大まかに2つの差異があるからと考えた。その2点を克服すればパソコンが苦手ということは無い筈だ。
結論を述べると、タイピング練習をすることとファイルという概念を理解すること。これをすればスマホが出来る人はパソコンも出来る。
タイピング まずタイピングについて、直感的に操作できるスマホに比べ、100近くのボタンから成り立つパソコンのキーボードには初め間違いなく戸惑う筈だ、人によっては苦手意識すらあるだろう。まずここに関してはキーボードは文字の入力の為だけにあると割り切り、文字を打つ以外の事はマウスでやることを心掛けてほしい。特殊キーは後々必要に応じて覚えればいいのだ。
ファイル もう一方のファイルという概念についてだが、実はコンピューターの本質にも触れる重要な概念であり、ここで全てを解説することは不可能である、だが次の3点は理解してほしい。
パソコンもスマホも数字しか扱えない、文字や色といった情報は特定の数字に関連付けて保存されている。
文章や音楽や画像といった数字情報の纏まり1つ1つをファイルと呼ぶ
ファイルはどんなに少なくても一台のパソコンやスマホに数万以上あり、目的のファイルを見つけやすいようにフォルダというもので分類するものである
スマホではこのファイルという概念を意識しなくても使えるようになっているが、パソコンは基本そうではない。ファイルの保存場所を一々自分で決めなくてはならないからだ。
そうは言ってもWordやExcelくらいは知らなくても使えると思ってる人、例えばそのデータをCDやUSBメモリ、それこそスマホに入れて他の人に渡せるだろうか？
繰り返すが、ファイルに関する概念はパソコンの本質ともいえる。理解できるまでWeb検索や、本を読むことが大切だ、最初期のパソコンから続く概念なので、図書館にあるような古い本で構わない。
最後に これまでPC-98について、MS-DOSについて、とマニアックな担当ページを作ってきたが、ここに来てこういった初心者向けの文章を書いてみることとなった。
なるべく素人にも分かりやすく、簡潔な内容となるよう心掛けたつもりだが、やはりというか、どことなくマニアックな内容になってしまったような気もする。
ここまで読んでくれた読者の、少しでも役に立つことを祈るばかりである。
2016/08/25 物理部部長 大浦</description></item><item><title>ゼロから始めるコイルガン製作</title><link>https://asanobuturi.github.io/document/2022/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/4/</guid><description>初めに 初めまして、高二の電工班長のM.Yです。今回の部誌では、今年製作し、展示しようと思っている、コイルガンの製作過程についてちょっと解説を加えながら語っていこうと思います。 (ガッツリ解説については去年のものとほぼ同じになると思うので)
コイルガンとは コイルガンは、超強い電磁石のコイルを用いて金属製の弾を発射するものです。コイルの巻く数やコイルの動力となる電圧の違いによって色々弾の速度が変わっていきます。勿論電圧を大きくしたり、コイルの巻数を増やしたりすれば、弾の発射速度も上昇していきます。
製作過程 昇圧チョッパ・充電回路 昇圧チョッパとは、コイルガン製作において最も肝になる部分です。使いやすいコイルガンの製作にはここの改良が必須です。 今回製作する昇圧チョッパの回路図はこのような感じ。
実は去年、コイルガンを展示するためこの昇圧チョッパの製作をしていました。 が、遅々として進まず、去年の文化祭前に出来たものがこれ
なんだこれ… 正直今見ても愕然とするレベルの汚い配線です。 裏側はこんな感じ。本当に汚い
とまぁ去年はこんな感じで見栄えも悪く、さらにこんなに導線がギャンギャン伸びててどこかでショートしそうで怖いので新しい物を作ろうとしました。 が、技術不足等で遅々として進まず。 電工班長のくせして電工の知識がほとんど皆無なのです(電工班長のくせに)。前部長に聞きながらかなり日数を要しましたがなんとか完成にこぎつけました。
{height=200}
まぁ去年よりはマシ…かな？ 裏側はこんな感じ
{height=200}
そこからせっせとコンデンサの充電回路の製作に励んでいました が、またしても問題発生。 導線の直径の定格電圧を完全無視してました。今回400Vの電圧を流す予定なのですが、案の定、定格電圧をオーバー。(定格電圧とは、定格として定められてる上限の電圧です。導線の太さによって変わってきます。これを超えると安全の保証がなくなります。多分大抵の場合焼き切れます。)急いで付け替えてなんとか完成。
電源 コンデンサの充電に絶対必要な部分です。これが無いと回路を全部作ったとしても一生動きません。今回昇圧チョッパに使用するNE555という部品の耐圧が16Vが限界なので、15V前後のものを電源に使おうと思います。
安全回路 コンデンサに充電したけど射撃回路が動かなくてコンデンサから放電したい…。そんな時1番手っ取り早いのはショートさせることですが、何せ高電圧の電流です。ショートさせれば閃光と大きな音が出ます。(この大きな音に驚いた後輩の悲鳴が部内ではミームになってたり…)また、やり方が悪いと感電する可能性があります。いちいちショートさせるのは怖いので、メタルクラッド抵抗という抵抗を回路上に入れ、ダイオードから放電する際、安全に放電できるようにしました。 メタルクラッド抵抗とは、熱の拡散がしやすい、環境変化に優れた機器です。
電圧計 回路に流している電圧が分からないと最悪充電対象のコンデンサが爆発するかもしれないので電圧計が必要です。しかし、今回使う電圧は400V。500Vの電圧計が必要になります。500Vの電圧計は9/13現在、Amazonで¥1,620。少し高いです。ということで、50Vの電圧計の中に入っている抵抗の値を10倍にして500Vの電圧計にします。元々中に入っている抵抗は51kΩなので510kΩに取り替えれば良いわけですね。
スイッチ コイルの電源のONとOFFを切り替える重要な部分です。今回はトライアックを使用します。 部誌を書いている現在(9/13)未だに製作に至っていません。はよしろ
コイルと弾 これが無いとコイルガンじゃありません。 コイルは倉庫にあったものから、弾は部品箱に入っていたものを使っています。コイルは改良するかもしれません。
まとめ ここまで書いたことを全部回路図にするとこうなります。 昇圧チョッパ以外右側のトライアックの部分を除けば結構スッキリしてますね。 (抵抗の値など細かい部分は省いています。)
終わりに いかがでしたでしょうか。 今年コイルガンを作ってみた感想ですが まずめっちゃ大変でした。ド素人の技術からどうにかしてデータシートを読めるようにし、あまりなれていないユニバーサル基盤に部品をはんだ付けをし…という作業にとにかく時間がかかる。本当はもっと改良を加えたい点も沢山ありましたが、時間に追われ、出来ず終いです。反省点も多々あります。基盤をもうちょっと大きくすればよかった等…(書いていくとキリがない)。しかし、大変でしたが、とてもやりがいがある、というか楽しいものでした。 また今度、コイルガンを作る機会があれば、もっと電工について学び、筐体をつくったり、指定の電圧で充電が停止できるような回路を作ったりしたいものです。(Re:ゼロから始めるコイルガン製作) 最後に、ここまで技術を提供して頂いた前部長、部誌の校閲・発行等をして頂いた顧問の先生方、編集担当の方々、このPositronを読んでいる皆様に感謝申し上げます。 それでは皆様、物理部展#2022をお楽しみください。</description></item><item><title>とあるペルシャ人の手記</title><link>https://asanobuturi.github.io/document/2023/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2023/4/</guid><description>貴重な機会なので,今まで生きてきて考えてきたことの一部を記録しておこうと思う。
何かに役立ててほしい。
才能と努力のはなし 知っての通り,世の中には「才能」と「努力」と呼ばれるものがあり,対照的に扱われている。
そして,これらはどちらが優れているのか。
これについて話そうと思う。
議論を始める前に,まずは言葉の定義を明確にしておこう。
これは書物なので,ここでは私の定義を用いるが,
あなたはそれとは違う定義を考えるならば,興味深いのでぜひ私に教えてほしい。
私は,「才能」は無意識の,「努力」は意識的なものであると考える。
例外は存在しうるが,殆どの場合当てはまるのではないだろうか。
例えば,理学が好きだと言う生徒は多くいる。
そしてその中には稀に,卓越した技能を持つ者がいるのだが,大抵の場合,そうした者たちは小さなころからそれが好きだ。
勿論,年を重ねるほど,嫉妬や羨望などの不純物が生まれ感情の純粋さが減っていくから,というのもある。
理学が一番好きなのか,一番ではないけど好きなのか,それとも成績や受験のための道具なのか。
理学が好きで,それに明るいものは物心のつかぬころから周りに興味を持ち,体全体でそれらを感じ,探求する。
これは誰かの意思ではなく,無意識にそれを行っている。
一方でそうでない人は物心がつき,学校に入ってから授業で教科書を読んでそれを知り,努力して習得する。
ここで好きになった者の感情については上に述べた通りだ。
この２つの違いは何か。
それは,かけてきた時間である。
努力をするものが意識して行うことを,才能ある者は当然のこととして,常に実行している。
それゆえに費やす時間が非常に長い。
その時間の長さは無意識の行動の注目すべき特徴であり,これが能力的な差に大きな影響を与える。
また,無意識の感覚でしか知覚できないものもある。
才能は努力に勝る。この言葉は正しい。
同じ土俵の上ならば。
費やした時間と感情の純度が違う以上,無意識の行動に意識した行動が勝つ可能性は低い。
それは確かだ。
しかし,無意識であるゆえに,その方向は自分で決められない。
対して意識した行動は,種類や質を変えることができる。
日本刀は横から叩けば容易に折れるように,彼らの鋭い自己主張も,方向が違えば意味を成さない。
少し野蛮な表現を使えば,彼らの背後に立ち,不純物を染み込ませた刃を首元に突き立てることができるのだ。
この問題に限らず,意識は非常に大切である。
意識をすることで,自分の世界を変えることができ,好きなようにカスタマイズできる。
上で話したことも,「努力は才能に劣らない」ということを,意識していなければ意味がない。
これは反証できない,非科学的なものだが,心の片隅に留めておいてほしい。
創作と模倣のはなし 手本や正解があるものを模倣,無いものを創作というのであれば,あらゆる行動はこれらの比率によって分類できるだろう。
そして,意外に思うかもしれないが,創作だけのものはない。
絵描きや物書きなどでさえ,模倣と創作の両方の要素を持っていると言えるだろう。
今まで見てきた他人の作品は勿論,自分の過去の作品や,経験した記憶なども作品に影響を与える。
今話している内容や,前の節の内容も,実は誰かの言葉に私の言葉を混ぜたものかもしれない。
そして,創作的な部分には,人の魂は宿ると,私は考える。
創作には人の精神が深く関わっているからだ。
模倣だけでは100年程度しか生きられないが,自身の精神を込めた創作物があれば,
例え肉体が朽ちようとも,忘れられない限り生きていられる。
今まで学校の中で生きてきた身としては,模倣だけの人間はつまらない。
辞書や計算機が歩いているだけのような人間は掃いて捨てるほどいるし,それらにも満たないような肉塊も多い。
彼らが全員美しい人形に変わればどんなにいいだろうか。
これを呼んでいるあなたは,努力してそうならないようにしてほしい。
おわりに いつかあなたが魅力的な人間となって,私の前に現れてほしい。
ここまで読んでくれたことを感謝する。</description></item><item><title>トレインシミュレーター</title><link>https://asanobuturi.github.io/game/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/game/4/</guid><description>シンプルなシミュレーターです</description></item><item><title>バニージャンプ</title><link>https://asanobuturi.github.io/game/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/game/5/</guid><description>中1(当時)が4ヶ月でWEBゲームを作ってくれました
ゲーム説明</description></item><item><title>パソコンで絵を描くには？</title><link>https://asanobuturi.github.io/document/2017/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2017/8/</guid><description>こんにちは。物理部で主に会計などの事務作業をしておりますI.H.です。まあ、事務専門でありますのでそこまで物理部らしい専門的な話はできませんが&amp;hellip;。この紙面ではパソコンで描画をするとき使用するソフトについて解説したいと思います。
パソコン上での描画に使用する主なソフトについて 皆さんはパソコンで描画をしたい時&amp;hellip;どのソフトを思い浮かべますか。多くの人はWindows標準搭載のペイントを思い浮かべるのではないでしょうか。単純な図形であればペイントでもかまわないかもしれません。それではグラデーションをかける、など複雑な作業をしたいときは?このときに使用するソフトとしては Photoshop Gimp2.0 があげられます。ほかにもペンタブレット(パソコン上で手書きで描写するための周辺機器)で紙に描くような絵をパソコンで描画したいときには、ClipStudioPaint , SAI , Pixia ,MediaBangPaintPro などがあげられます。
画像加工ソフトについて(photoshop Gimp2.0) ここからは各種ソフトの説明を簡単にしたいと思います。
Photoshop 画像加工ソフトの中で最も有名なソフトです。このソフトはビットマップ画像という、画像をドットという小さな色の点の集まりで現した画像を編集するのが主な機能です。ですので線で描画する絵ではなく、このソフトは写真や背景などの素材画像作成、全体的な色味やトーンの調節に向いています。グラフィックデザイナーやWEBデザイナーのプロが使用するほどの充実した機能とパフォーマンスを兼ね備えたソフトですが、価格はPhotoshop CCで月額使用料3980円(デザイナー向けコンプリートプラン)、家庭向けのPhotoshop elementsですら税別9800円と、非常に高額であるのが難点です。また、(あくまで個人的な実感ですが)機能が複雑な面もありソフト使用技術の習得には若干時間がかかります。
Gimp2.0 画像加工ソフトの中でもPhotoshopと同様に非常に著名なソフトです。Photoshopと同様、背景などの素材画像や写真の編集に適しています。しかし、なんとこのソフトはフリーソフト、無料で使用することができるのです。また、有料の画像編集ソフトと引けをとらない高機能で多くのユーザーを今日までに引き寄せています。ただ、このソフトの悪い点を上げるとすれば、ソフトの起動の際に多くのデータを読み込む?らしく、パソコンのメモリが不足していると正常に動作しないところです。もし自前のパソコンでGimpが起動できない場合はその軽量バージョンであるGimp Portableを使用することをお勧めしま す。(ただし機能は若干削減されています。)
線画描写ソフトについて(ClipStudioPanit など) ClipStudioPaint このソフトはドットの処理が可能なレイヤーであるラスタレイヤーのみならず、画像を座標やベクトルの概念を用いて表すレイヤーであるベクターレイヤーを扱うことができます。ベクターレイヤーでは拡大縮小を行っても画像の解像度が損なわれないため、線画(線のみの画像)の描写に適しています。また、ペンタブレットの筆圧を反映することができます。価格が税込 5000円と安価である一方、3Dデッサン人形をパソコン上で扱えるなど機能は非常に多彩で、コストパフォーマンスが非常に高いソフトです。ちなみに、Amazonや家電量販店での売り上げでは2015年から3年連続で一位を記録しています。
SAI このソフトは先のソフトと同様、線画の描画と画像処理を行うことができるソフトです。価格は5400円(税込)で、動作は比較的軽く、書き心地もよいので多くのユーザーがら支持を得ているソフトです。ただし、かなり前からソフトの更新がされていないようなので、現在販売されているソフトと比べて、機能が若干古めであったり、少ないといった印象をうけてしまいます。
Pixia このソフトは無料で配布されている、線画の描画と画像処理を行うことができるソフトです。ツールが文字ではなくアイコンで大きく表示されているなど、操作画面が初心者にとっても非常にわかりやすく、フリーソフトであることもあって、デジタルイラストの入門用ソフトとして定評があります。
MediaBangPaintPro このソフトも同じく無料で配布されている、線画の描画と画像処理を行うことができるソフトです。操作画面は比較的わかりやすく、動作も軽いことから多くのユーザーから指示がありますが、ペンタブレットで描画する際の動作は有料ソフトと比べてあまり滑らかとはいえません。
総括 主な画像処理ソフト、線画描写ソフトの説明は以上です。自前のPCの諸事情により、GIMPとPhotoshopの操作画面を掲載することはできませんでした。なお、編集中の画像は自作のものであるのですが、使用してて線画ソフトの中で個人的に最も使いやすいソフトはClipStudioPanitでしたね。有料のものと無料のものの間では圧倒的な質の差があるのは否めません。ただより安い飯はありませんが&amp;hellip;。ただ、有料のソフトはどれでも無料体験版をダウンロードすることができるので、ソフトの購入を検討される際はフリーソフトとの比較をしつつ、無料体験版の試用をお勧めします。紙面の都合上、説明を簡略化した箇所や詳しい説明を控えさせていただいた箇所がありますがご了承ください。一部読みにくい箇所もあったかとは思いますが、最後までお読みくださってありがとうございました。
(文責:IH)</description></item><item><title>パラメトリックスピーカーを作った</title><link>https://asanobuturi.github.io/document/2023/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2023/11/</guid><description>初めに こんにちは。高二の平部員です。
この部誌も私で最後です。ここではパラメトリックスピーカーの製作記のようなものを書いていきます。
パラメトリック スピーカーとは 簡単に言うと、超音波を使って指向性1の鋭い音を鳴らすスピーカーのことです。
一般的なスピーカは指向性が弱く、横からも、後ろからでも音が聞こえるのですが、パラメトリックスピーカは正面からしか音が聞こえないという性質があります。
作り方 今回は以下のサイトを参考に制作しました。
パラメトリックスピーカー(指向性スピーカー)の自作 by Pinus0079 | elchika スピーカー部分にあたる超音波トランスデューサは超音波距離センサのものを使いました。集中力のいる単純作業なので、基板から取り外す作業ものすごく疲れました。
仕組み ざっくり説明すると下の図のようになります。
flowchart LR JACK(イヤホンジャック)-->|音声信号| NE555[["NE555で FM変調"]] NE555--> InvertingAmplifierA{反転増幅} NE555--> InvertingAmplifierB{反転増幅} InvertingAmplifierB--> InvertingAmplifierC{反転増幅} InvertingAmplifierA-->|反転|FullBridgeCircuit[[フルブリッジ回路]] InvertingAmplifierC-->|順転|FullBridgeCircuit FullBridgeCircuit-->UltraSoundTransducer[(超音波トランデューサ x35)] FullBridgeCircuit-->UltraSoundTransducer UltraSoundTransducer-->|???|EAR((音)) 上の図にあるフルブリッジ回路というのは、Hブリッジ回路とも呼ばれ、主にモーターの回転方向や回転の速さを制御するのに使れる回路です。今回は、大量の超音波トランデューサを制御するのに使っています。
回路の解説はできるのですが、FM変調された超音波からどのようにして音が聞こえるのかはよくわかりませんでした。
wikipediaによると、約110dB以上の音圧の超音波を流すことで、空気の粘性から生じる「非線形特性」により可聴音が出ているようです2
ただ、wikipediaで解説されているのはAM変調の場合であり、今回のFM変調のスピーカーでも同じ仕組みなのかどうかは謎です。
もう少し分かりやすくて踏み込んだ説明をできる方はどうか私に教えてください。
安全面について 先ほど、約110dB以上の超音波を流すと紹介しました。
今回使用した超音波センサのデーターシートには音圧についての記載は全くありませんでしたし、超音波の音圧をどのようにして測定するのかもわかりません。しかし、他の超音波トランデューサのデータシートを比較してみると、今回の物も115dB程度の音圧がでているものと推測できます。
ここで、WHOが出している&amp;quot;Hearing loss due to recreational exposure to loud sounds A review&amp;quot;3（娯楽目的で大きな音量に曝されることによる難聴 レビュー）を見てみると、下の表がありました。
{width=500px}
ということで、一日あたり28 秒までなら使えますね。
冗談は置いといて、人間が聞くことのできる音域、つまり可聴域は20Hz〜20kHz程度だといわれています。一方、今回のパラメトリックスピーカーから発されている超音波は平均周波数は40kHzです。つまり、上の表はヒトの可聴域の話なので、40kHzの超音波は想定していないと思われます。また、星貴之氏の&amp;quot;超音波曝露に関する再考&amp;quot;4によると、
本稿では，強力超音波が日常生活に浸透しつつある状況を背景として，超音波曝露について再検討を行った。これらの技術が主に40kHz周辺の高い周波数帯域を扱っていることを指摘した。文献調査により，その場合の暫定許容値として140dBを提案した。
とあるので、ある程度離れて使う分には特に問題ないと思います。
ただ、違和感を覚えた時には、使うのを中断するに越したことはないでしょう。
出来栄え これを書いている時点では、正直言って微妙という感じです。
低音域を流そうとするとノイズが大きくなりますし、それほど遠くまで音は届きませんでした。ただ、当然と言えば当然ですが、電源圧や変調度合い言の大きさで音量等が変化することがわかっているので、文化祭での展示までに改善できるといいです。
終わりに 今回、FM変調方式のパラメトリックスピーカーを作ってみて、AM変調方式やパラメトリックアレイなど、他のタイプのものも作ってみたいと思いました。一般に流通しているのはAM変調方式のようなので、もしかするとそちらの方が性能が良いのかもしれません。 最後に、私は今年度の文化祭のホームページの制作も担当しました。良かったらついでに見ていってください。
では、また。
指向性 : 特定の方向への、感度やエネルギー（今回の場合は音の大きさ）が強いこと。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>フォークリフト製作記</title><link>https://asanobuturi.github.io/document/2002/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2002/1/</guid><description>フォークリフトロボットについて 今年、私はフォークリフトを製作することにしました。埠頭や運送会社などでコンテナを運んだりパレットを運んだりと活躍しているあの車です。このロボットを作ろうと思ったきっかけに「しむりふと」1(右図)というゲームがありました。このゲームは名前のとおりにフォークリフトのシミュレーションで、与えられた指示どおりにフォークリフトを動かし、ミッションをクリアしていくというゲームです。このゲームのフォークリフトの動きが気に入ってしまいました。それを見て、「これはロボットとして作るしかない!」と思ったわけです。
今まで物理部で作られてきたロボット(ショベルカーなど)は左右の車輪が完全に独立して回転し、直進・後進・回転を行っています(左図・左カーブの場合)。後輪のキャスターは車の動きに従ってぐるぐる回っているだけでした。そのためにその車の走り方は普通の自動車の走りとかけ離れたものになっています。
それならば、と今回は普通の自動車のように実際にハンドルを切って走るように作ろうと考えました。フォークリフトはハンドルを切ると後輪が動いてカーブを描きます。コントローラーにハンドルに相当するスイッチをつけ、それに応じてロボット本体のほうでモーターを使いタイヤを転回するようにします。
今年のロボットは「物理部初!ステアリングを切って走るロボット」ということで作り始めました。しかし、この原稿を書いている段階でまだこのロボットは動いていません。この原稿では最初の目標のまま書いていますが、展示に間に合わせるために妥協策を講じているかもしれません。
フォークリフトロボットの構造 このロボットの要はコントローラーの入力に合わせてステアリングを切るところです。この部分はコントローラーに左右にハンドルを切るためのスイッチを取り付け、そこからの入力信号をPICと呼ばれるICで処理するようにします。実際にタイヤを動かす構造はギアボックスを使いタミヤ製のステアリングセットと組み合わせて作りました(右図、右写真)。当初はステッピングモーターを使いダイレクトにコントロールする予定でしたが、思いの外ステッピングモーター2のパワーが弱かったためギアボックスに変更しました。
コントローラーのスイッチを倒すと、倒した方向に曲がるようにタイヤが動く 回転の限界位置にリミットスイッチをつけ、曲がり過ぎないようにする。 コントローラーのスイッチを戻すと、タイヤが中心位置に勝手に戻る。 ここで問題になったのが最後の「勝手に中心位置に戻る」というところです。普通の電子回路だとなかなか作りにくいところです。今回はPICというICを使ってみることにしました。PICとはICの中にプログラムを書き込むことができ、そのプログラムによりICの端子につながっているセンサーやモーターなどを動かすことができます。今までPICを使ったことは無かったので、「First PICk」というトレーニングキットを買ってきて使い方を習得するところから始めました。このキットには習得用の実験基板と、PICへプログラムを書き込む回路がくっついた基板(左写真)が付いているので、一通りPICについて理解した後もずっと使えます。PICはプログラミング言語がアセンブラ3なのでとても難しいですが、使いこなせればかなり複雑な事までできる面白いパーツです。
このPICを核に電子回路が組まれています。基板の上にはICが2個と大き目のトランジスタ、リレーが1つにその他抵抗などの小さい部品がたくさんついています。基板の表面にパーツが乱雑に乗っている様子や、裏面の適当はんだ付け実装による高密度配線などもなかなか見ごたえがあります、が完成してからではなかなか見えません。
また、タイヤを中央で止めるためには中心位置を判定するためのセンサーも必要です。このロボットではフォトインタプラタというパーツを使うつもりです。このパーツは発光部と受光部に分かれていてその間に物が入ると反応を示すという働きをします。このパーツをクランクのところに取り付ければ、クランクが中心位置に入ったときにモーターを止めるということができます。しかし、まだここまで製作が進んでいないので何とも言えません。
電源はICとモーターを両方とも動かす必要があるので5V電源と3V電源が必要です。単3電池4本と単2電池2本を搭載しています。今の段階ではロボット本体にすべての電池を搭載しているのでとても無骨な印象を受けます。あまりにも重いためステアリングの動きが悪くなっているのでコントローラーに一部の電池を移動させようか検討しています。
ベースになったショベルカーロボット ロボット本体は2年前に作ったショベルカーロボット(2台あった)を解体して部品や形を流用しつつ作りました。駆動用のギアボックスを取り付けるアルミアングル2本をそのまま使い、その上に乗って車体のベースとなる2本のアルミアングルをショベルカーロボットのパーツと同じ構造で作りました。
リフトの上下はギアボックスとベルトを使い、上下端の判定のためにマイクロスイッチを二つ使っています。ベルトは左図のように2つかけてあり、垂直方向のベルトにリフトが固定してあります。これは配置の関係でこのようになりました。ギアボックスについた大ホイールが白矢印のほうに回転するとリフトが上昇し、黒矢印のほうに回転すると下降します。一番上までリフトが昇ると上端にあるスイッチを押し、昇るための回路が切れてこれ以上上昇しなくなります。逆の降りるための回路はつながっているので、コントローラーで逆のスイッチを押せばリフトを下ろすことができます。一番下にリフトが下りてきたときはこれと反対に動作します。スイッチのついている位置は前ページの写真を見てください。上端はロボットの前面についていて、リフトでスイッチを押します。下端は支え棒の裏側にありリフトの金具でスイッチを押すようになっています。この判定回路にはダイオード4が使われていて多少電圧が失われますが、最も簡単なこの方法を選びました。
フォークリフトロボット製作小話 このフォークリフトロボットの前輪にはギアボックスが2つついていて、そこにタイヤがついています。実はこの2つのうち右側のギアボックスは動作しないようになっています。タイヤをまげてカーブするように車を作ると、実際にカーブするときに左右のタイヤで進む距離が微妙にずれてくるのです。このずれがあるのを無視して両方のタイヤを同じ速さで回転させると全くカーブしない車になってしまいます。そのためにこのずれを生かすように片側駆動になっているのです。後輪が直進の向きになっていれば片方のタイヤしか回転しなくても直進することができるので、その場で回転してしまうということはありません。
また車体に関して、今回はじめて穴開きのアルミ板を使いました。これは見た目がいい上にネジ穴をあける必要が無く便利だろうと思って買ってきたのですが、なかなか間隔と合わずに、ネジ穴を押し広げたり無理やりネジ止めしたりと結構苦労している代物です。最終的に、基板の覆いとして取り付けたりすれば結構見栄えのするパーツだと思います。
電子回路にも小話があります。このロボットではPICというプログラムを書き込むICを使っています。プログラムを書き込むためにICを書き込み基板に差込み、ちょいと休憩を取っていました。そろそろ作業を再開しようと基板の前に戻り少し浮いていたICを押し込もうとして手を触れた瞬間。アチッ!!火傷しました。原因はICの逆挿しでした。不注意でICを逆向きに基板に差してしまったのです。ICは決まった端子に決まった役割があるので、それをつなぎ間違えてしまったために思いっきり発熱してしまったみたいです。触ったときの温度は半田ごての先に触れて火傷したとき並みでした。半田ごての先端が300度近くになっているのでICもかなりの温度になっていたことが分かります。指先にICの形のままの長方形の火傷の跡ができました。ちなみにそのICは破損。その後まともに動作してくれなくなりました。予備のICを使っています。高かった書き込み基板とそれに接続しているコンピューターが壊れなくて良かったです。
&amp;hellip;現在このような事をしながら試行錯誤中です。まだ完成までは多少かかりそうですが地道に進めています。無事に文化祭で展示できていることを祈りながらこの稿を終わりにしたいと思います。
藤石達也さんが製作されたシミュレーションゲーム。フリーソフト。 http://www.h2.dion.ne.jp/~ame/こちらからダウンロードできます。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
普通のモーターが磁石の間を整流子の付いたローターが回転するのに対して、コイルの間を磁石が動くようになっているモーター。外側のコイルにパルス信号を送ることで好きな角度だけ回転させることができる。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
プログラミング言語の一種。ハードウェアの中で使われている機械語にちょいと飾り付けしただけのような言語なので、最も機械に近い言葉である。よって非常に難しい。プログラミングにコツが必要である。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
一方向のみに電気を流す働きのある半導体。決まった方向からしか電気を通すことが無く、逆からだと全く流れない。これの性質を利用してリフトの上下回路が製作された。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>プラレールの改造について</title><link>https://asanobuturi.github.io/document/2022/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/3/</guid><description>はじめに 物理部の中3の電工班です。今回が初めての部誌となっています。今回は、文化祭で展示する作品の説明的なものを書かせていただきます。
始めたきっかけ 部活の先輩から譲り受け、引き継ぎました。その時はラズパイ内蔵でライトが光り、モーターが回っていましたが、レールの上は走っていませんでした。 先代ではラズベリーパイを使用していましたが大きすぎて、配線の都合で何故か起動もしなくなったのでArduinoというマイコンを使用しました。 しかし、ArduinoにはWi-Fi機能がないため基本外部との通信ができませんでした。そのため、下に書いた通り、赤外線信号を使用することにしました。
全体像 この改造では、PC、ArduinoMega、ArduinoUnoとその他諸々の部品を使いました。使用部品のすべては下に書いてあります。この3台の通信の関係は以下のようになります。
赤外線通信や、シリアル通信については後ほど説明します。
今回の改造での使用部品 今回使用した部品です
プラレール Arduino Nano 1台 トランジスタ 2SC2120-Y 1台 LED4本と抵抗器4つ(前と後ろのLED) 9V型電池1つ 配線用の線と基盤 必要数 信号装置側 Arduino mega1台とそこに取り付ける自作シールド 信号装置ユニット(LED3つと照度センサー) 4組 専用線路(信号装置ユニットを取り付け、CdSセル各1つ) 4台 液晶モジュール 1602A 1台 ブレッドボード ジャンパピン 必要なだけ その他配線用導線 必要なだけ そもそもArduinoとは Arduinoとは、マイコンの一種であり、デジタル入出力、アナログ入力、アナログ出力(PWM(パルス幅変調)を使ったデジタル出力)、USBを使ったシリアル通信などに対応しています。下の画像はArduinoの中でも一番有名なArduino Unoです。(Arduinoの画像3つはArduino公式ストアからです。)
しかし、これではプラレール本体に積み込むのには大きすぎます。そのため、今回プラレールの中に入れたのは下のArduinoNanoです。 こちらはUnoよりも小さいのですが、機能はほとんど変わらないので、便利です。しかし、部活には、Nanoの正規品がなかったので、ほぼ仕様が変わらない互換品を使用しました。 また、信号装置側では、信号ユニット4台、液晶モジュール1台、赤外線送信線1本、その他諸々をつなぎたいのですが、UnoやNanoにはデジタルピンが13本(正確には、アナログピンもデジタルピン扱いできるので、実質、18本ですが、ここでは面倒ですので割愛します。)しかないので、足りなくなりました。そのため、ピン数が、53本(デジタルピンのみでは)ある、ArduinoMegaを使いました。
赤外線通信とは 今回は、信号装置からプラレールへの送信のために使用しました。赤外線通信とは目には見えない赤外線を高速で点滅させることにより、データを送信することです。それをArduinoでやろうとすると、高速に赤外線LEDを点滅させる必要があるうえ、他のプログラムとの同時実行を行う必要があり難易度が高いため、専用ライブラリを使用しました。それが、IRremoteという赤外線通信用のライブラリです。これを使用することで赤外線信号を簡単に入出力できます。IRremoteは参考にしたサイトに合わせてバージョン2.8.1を使用しています。このライブラリでは、赤外線の受信、送信が可能で赤外線信号を16進数32ビットで管理していて容易に通信を行えます。
シリアル通信について この改造ではPCとArduinoMegaとの接続に使用しました。厳密にいうと、シリアル通信をUSBに変換していますが、シリアル通信と同様に使用できます。ArduinoMegaでは、パソコンから送られてきた速度情報を赤外線信号にして、ArduinoUnoに渡す役割と、パソコンに自作した線路上のセンサーを使って取得した車両の位置を送信しています。シリアル通信については詳しくはこちら を参考にしてほしいのですが、簡単に言うと、一本の信号線で電圧の強弱をもとにデータを送る方法です。
https://qiita.com/hsgucci/items/eee5894e3651d0a8cb75から引用。パラレル通信については後ほど解説
ここでシリアル通信でArduinoMegaと接続しているPC側の説明をします。こちらは、Arduinoで使用しているC++(厳密にはArduinoではC++の拡張言語を使用)とは全然違うHTML+CSS+JavaScriptで操作しています。理由は、単純にJavaScriptのほうが環境構築が楽だったからです。webブラウザでも、chrome89から使用可能になったWebSerial APIを使うことでシリアル通信ができるので(詳しくは長くなるので説明しませんが、こちらを参考してください)これを使用してシリアル通信を行っています。
液晶モジュールについて 今回使用した液晶モジュールは1602Aという型番のものです。 これをArduinoで制御するにはパラレル通信か、シリアル通信での接続が必要ですが、シリアル通信に必要な専用の変換基板がなかったのでパラレル通信にしました。シリアル通信は前述したとおりですが、パラレル通信は、複数の線で制御するしくみです。
パラレル通信によって液晶モジュールにたくさんArduinoのピンが取られてしまいましたが、ArduinoMegaにしたので問題はありませんでした。 液晶モジュールをArduinoで制御するには信号線4本(か8本)を制御する必要がありますが、難しいので、ここで配布されている専用のライブラリを使用しました。 このライブラリは最初に設定(ライブラリを読み込み後、LiquidCrystal(rs, rw, enable, d0, d1, d2, d3, d4, d5, d6, d7);)をすれば、あとは対応する文字をそのまま関数の引数に書く(必要ならカーソル移動後に lcd.print(表示したい文字);)だけで制御できるので簡単です。
自作線路の下にあるもの ArduinoMegaの車両位置を確認するため、4箇所に自作線路をつけました。</description></item><item><title>プログラミング入門の言語は何が良いのか問題</title><link>https://asanobuturi.github.io/document/2018/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/3/</guid><description>こんにちは、中学二年の永田と申します。ここでは、最近「プログラミング教育」が注目される中で、入門に適したプログラミング言語は何なのかを私の考えで綴っていこうと思っています。(※プログラミング言語=コンピュータをプログラムするときに使う専用の言語。人間にもわかりやすく、コンピュータにも分かりやすいように設計されている。)
プログラミングの目的 今、世界中で私達のようなこどもにプログラミングをさせる動きが広まっています。日本ではおおよそ文部科学省の新学習指導要領2020への改訂で、小学校でのプログラミングが必修化されたことからプログラミング教育が注目されるようになったと言われています。今回必修 化される予定なのはあくまで小学校で、中学校技術科の学習指導要領を見ると、既に「プログラム」の文字があります。では何のために文部省はそんなことをしたのでしょうか。文部省はその目的として以下のようにまとめています。詳細は文部省のWEBサイト(編集者注:リンク切れしていたのでWebBackMachine)を参照してください。
プログラミング言語を覚えたり、プログラミングの技能を習得したりといったことではない。 論理的思考力を育むとともに、プログラムの働きやよさ、情報社会がコンピュータをはじめとする情報技術によって支えられていることなどに気付き、身近な問題の解決に主体的に取り組む態度やコンピュータ等を上手に活用してよりよい社会を築いていこうとする態度などを育むこと。 教科等で学ぶ知識及び技能等をより確実に身に付けさせること。 どうやら、「論理的思考を育み、情報社会がコンピュータによってささえられていることを理解する手段」としてプログラミングが選ばれたようです。
これ以外にも、アメリカのオバマ元大統領が在任中(2014年末)に、プログラミング教育の重要性について全国民に訴えた動画が公開されたことも、世界での動きを加速させる原因になったといわれています。
これとは別に、単純にIT企業のプログラマーになりたいだとか、ゲームクリエイターになりたいだとか、そういった理由でプログラミングを学ぶ人もいます。先に挙げた場合と、この場合では、学ぶべきことが全く違ってくると私は考えています。次頁からの文では、それについて私の考えを書いていこうと思います。
「論理的思考」を身につけるためのプログラミング 先に挙げた資料で、文部省は小学校におけるプログラミング教育の目的を「論理的思考力を育む」などと言っていました。論理的思考、というのは何でしょうか。論理的な、考え方ということなので、それぞれの意味を Wiktionary(Wikipedia の系列プロジェクト・辞書)で調べてみます。論理は「議論や思考を進めていく筋道」、思考は「論理に従い考えること」とあります。思考そのものが実は論理でした。
文部省は、プログラミングを使って「ものごとを行う際に筋道を立てて考える力」を育てたいということなんだと思います。この場合、プログラミングはどういう形で効果を発揮するのでしょうか。実は、プログラムでコンピュータに何かをさせるときには、先に書いた「筋道・論理」が必須になります。プログラミングで「筋道・論理」が必要だということは、NHKの番組「10min.ボックス テイクテック」内のコーナー、「プログラムテック」を見ると分かりやすいです。NHKのウェブサイト、NHK for Schoolで視聴することができます。
第一回放送「流れを操る」のプログラムテックから、自由に指令をできるロボットを使って二分以内にトムさんのところへジュースを運ぶミッションをもとに論理を組み立ててみます。(リンク)
番組では、まずジュースを持つところまではできました。それを持ち上げて歩いていけばよいのですが、「持ち上げて」と指令を出すと、頭の上まで腕を大きく振り上げてしまい、ジュースがこぼれるという展開になりました。ロボット(=コンピュータ)は人間のように「察する」事ができません。人間なら「持ち上げて」と言われたら普通胸の高さまでだと理解できるでしょう。ロボットをプログラミングするなら、もっと明確に、筋道を立てて司令を出していかないといけないのです。この例なら「ジュースを、胸の高さまで、持ち上げて」とします。これが、文部省が小学生に求める論理的思考力だと思います。
このとき、学習に最適なプログラミング言語は何でしょうか。小学生(または中学生も)へのプログラミング教育に盛んに取り入れられている言語として、MIT(マサチューセッツ工科大学メディアラボ)製の「Scratch」というものがあります。この言語の最大の特徴は、ほとんど文字を書かなくて良いことです。Scratchは、「ブロック」という、それぞれに指令としての意味が含まれたものをくっつけていくことでプログラムを作ります。さらに、ブロックの表示は日本語にすることができるのでSF映画などでありがちな小難しいアルファベットの羅列を書く必要がありません。文字を打つことが必要になるのは、キャラクターにセリフを言わせたり、~~度回転させたりするときだけです。
ただし、Scratchと言えど中身はコンピュータです。(実際ロボットをScratchで動かすのはいろいろと面倒なのですが)ロボットに「ジュースを運べ」と言うだけでジュースを運んでくれるほど簡単ではありません。Scratch でも、「ジュースを持て」、「持ち上げて」、「体を回転させて」、「トムさんの前まで歩いて」と順に指令を出す必要があります。つまり、日本語を使って論理を組み立てることができるのです。これはほとんど日本語しかわからない小学生(+中学生)に論理的思考をさせるのに非常に都合が良いです。
ちなみに、最近はScratchのようにブロックを使ったプログラミング学習環境が増えてきていて、文部省がScratchをもとに自分で作った「プログラミン」や、Life is Tech!とディズニーがコラボした「テクノロジア魔法学校」などです。また、マイコン(手に乗るような小さなコンピュータ)用に作られたものでは、モータやLEDをつないでちょっとした機械を作ることができるものもあります。英放送局BBCのマイコン「micro:bit」に向けて作られた「micro:bit JavaScript ブロックエディター」や、有名な教育用マイコンRaspberry Pi向けの「Scratch GPIO」などです。モータやLEDなどの現実世界との接続ができるのなら、情報技術学習よりもさらに広げることができそうです。
プログラマーを目指す人のためのプログラミング プログラマーを目指すなら話は別です。目的がそもそも違います。小学校で取り組むプログラミングの目的は「論理的思考力を身につける」ことなどですが、プログラマーを目指すならそれだけでは足りません。プログラマーが行っているのは実務作業ですから。筋道を立てた思考、論理的思考力はもちろん必須でしょうし、実際にプログラムを書く力が求められます。それに、技術的な知識もたくさん覚えなければいけません。この辺りはしばらく真面目に勉強していれば覚えていけると思いますが、学習に適した言語は何でしょう。
Scratchを考えてみます。Scratchはなかなか有能です。基本的な考え方はほぼ学ぶことができますし、オンラインコミュニティのおかげでわからないことはすぐに質問することができます。ただし忘れてはいけないのが Scratchはあくまで教育用であるということ。例えばScratchは単体のアプリにできません。Scratchのソフトの中でしか動かないのです(外部ツールを使えばできないこともないです)。また、ゲーム向けに作られているのでそれ以外のプログラムを作るのは苦手です。このように、Scratchは実用的な言語ではありません。現にScratchで制作されて、世の中で販売されているソフトは見たことがありません。
世の中ではブロック型の言語はまだ主流ではなく、SF映画でよく見るような文字を書くタイプのものが多いです。有名所ではC(C++&amp;C#),Java,Pythonなどです。プログラマーを目指すなら、このような広く使われている言語を一つくらいは使えないと駄目だと思います。入門用としてどの言語を使うかは自由でしょう。はじめから実用的なCなどの言語をやるのも手ですが、もし小学生がプログラマーを目指すなら、はじめはScratchなどで考え方を身に着けてから本格的なプログラミングをするのが良いと私は思っています。Scratchのよいところは、機械音痴でも少しのパソコンの基礎(マウス操作や、キーボードのタイピングくらい)を覚えてしまえば簡単にプログラムが作れるというところです。はじめに難しい言語を使って、自分には向いていないと挫折するより、プログラムの根本の部分は難しくないということを理解したほうが続けやすいと思います。
以上のことから、プログラマーを目指すならScratchにとどまらず、少し基礎を理解したら積極的にC,Java,Pythonなどの汎用的なプログラミング言語を学ぶのが良いというのが私の考えです。
実は私も前までScratchをやっていましたが、3年以上Scratchにどっぷり浸かっていたせいでなかなか新しい技術を取り入れられずにいます。ですが、Scratchで得た感覚は今も役立っています。
まとめ 最後まで読んでいただいてありがとうございました。近頃テレビやネットでやたらとプログラミングプログラミング言われているので、プログラミングと一概に言ってもそれをするための手段(言語)はたくさんあるよな、と思い私の考えを文章にしました。 2つ目で書いたScratchは、実際多くのプログラミング教室などで採用されているようです。小学校で必修化されるのは2020年からなので、すでに取り組み始めた学校もありますがまだどうなるかは分かりません。
3つ目で書いたC,Java,Pythonについてちょっと余談です。私はPythonが好きなのでPythonの宣伝をします。最近流行りの人工知能なんかはPythonで作られることが多いです。Pythonは文法が書きやすい設計なので、初心者の入門におすすめです。
画像はScratchBlocksとTwemojiを使った自作のものです。
入り切らなかったので参考にしたウェブサイトはそれぞれ文中に散りばめられたURLを辿っていただければと思います。</description></item><item><title>ホバークラフトをつくろう!!</title><link>https://asanobuturi.github.io/document/2017/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2017/6/</guid><description>ここでは、特殊な機材などを使わずにどの家庭にもあるパーツを使って“人が乗れるホバークラフト”を作っていきたいと思っております。
そもそもホバークラフトとは何ぞや？ 空気の圧力で浮上して移動する乗り物である!
ホバークラフトの原理 (下の図を主に参照して理解してください。)
本体とスカートでつくられた隙間に空気を送り込みます。隙間の気圧が高まります。すると、空気圧によって本体が持ちあげられます。このとき、スカートと地面にほんのしこし間が空き、スカート内の空気が漏れだしますが、少量なのでスカート内の気圧にはそれほど影響はありません。
製作における注意点 原理に則って考えると、スカートを水平方向に広げ、空気圧を受ける面積を大きくすると本体を持ちあげる力も大きくなります(格好良く言うとパスカルの原理のことです)。また、スカート内に空気を送り込む圧力を強めるとスカート内の気圧は高くなり、持ち上げる力は大きなります。
スカートは地面との隙間を小さくするために地面と密着する必要があります。
設計!! 「まず、スカートに使う素材を決めます。上記の理由により地面と密着できるようにするには、柔らかい素材にする必要があります。また、上記の通り出来るだけ大きいものが良いです。そこで、120cm の大人用うきわを使うことにしました。
次に、空気を送り込む機械を決めます。これはある程度の風量があり、強い圧力をつくれるものが良いです。ここでは、掃除機に使われているモーター及びファンを使います。掃除機を分解すれば簡単に入手できます。実は、掃除機のモーターというのは非常に便利な代物で、家庭100v電源で稼働できる上にファンと一体になった構造をしているのです。掃除機のファン及びモーターは掃除機の構造上、強い圧力をつくれるようにできています。まさにホバークラフトにぴったりではありませんか!
やっと製作に取り掛かります 巨大うきわに図1の本体となる板を取り付け、モーターを取り付け、補強をします。同じような物をもう一つ作り、二つをつなげて完成です。空気もれがないように注意しましょう。(実際の作業は木工というあまり物理らしくないものなのでここでは割愛します。)
そして起動!! モーターを交流電源に並列につなぎ動かします。フワフワと床の上を浮いています。手で押してやると何の抵抗もないようにすいすいと進みます。さっそく乗ってみましょう。板に座り後ろから押してもらう。上手く進まない。
問題点 掃除機のファンが生み出す気圧はおよそ0.25気圧($25\mathrm{kPa}$)です。ホバークラフトの気圧を受ける面積は二つ合わせて $0.8\mathrm{m^2}$ です。$25\mathrm{kPa} \times 0.8\mathrm{m^2}=20\mathrm{kN}=約2000\mathrm{kg}$持ちあげる力がある計算になります。
そんな大きな力があるにもかかわらず人が乗ると動かなくなってしまう。なぜ?・・・どうやら左右のバランスが悪く、片側から空気が漏れもう片方が地面についてしまっているようです。板の上に重りを乗せたときは動いていました。また、バランス感覚の良い人が乗った時も動いていたので、やはり左右のバランスが問題です。
解決策としては“うきわを3個搭載した形状にする” “バランス感覚を鍛える”等がありますが、時間や予算の関係であしからず・・・。
以上、ホバークラフト製作記でした。</description></item><item><title>マウスレーサーの仕組みについて</title><link>https://asanobuturi.github.io/document/2016/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2016/2/</guid><description>前書き 電子工作班中２の安藤です。はじめまして。
マウスレーサーについて、作り方や材料について詳しく書こうと思ったのですが、B5２ページで、と言われたので、マウスレーサーに使われている主要な部品と仕組みになどについて補足程度に書こうと思います。
主要部品の説明 トランジスター
足が3本あり黒く小さい部品はトランジスターという部品です。流れた電気を増幅する能力などを持っています。
このマウスレーサーの回路では、センサーで感知し出された電気を増幅し、リレーに流す役割を持っています。
店で買うと1個10円ぐらいで買えると思います。
リレー
ボックス状になっている、大きい部品は、リレーと言います。仕組みは説明すると1ページでは収まらないので、簡単に書くと複雑になっているスイッチのようなものだと思って下さい。このマウスレーサーの回路では、モーターの動きを制御してマウスレーサーの動きを変えています。店で買うと種類によって変わりますが、ここで使ったものは1個360円でした。
LED
プラス（アノードA）とマイナス（カソードK）を間違えると光らないというあのLEDです。今回は光を反射させたいので超高輝度というものを使っています。本来は高輝度ですが、大丈夫みたいなので、超の方を使っています。保証はしません。
お詫び
ページ数の関係で写真を載せられませんでした。すみません。
仕組みについて マウスレーサーは、簡単に言うと、壁に沿って一定の距離を保ちながら走るロボットです。どうやって一定の距離を保つかと言うとLEDの横にある合計３つのセンサー（フォトトランジスター）で、LEDから出て壁で反射された光を感知します。光を感知すると電気が流れるので、それをトランジスターやリレーでスイッチを切り替えたりしてモーターの動きを制御しています。壁から遠ざけた場合は、左のタイヤだけが回るように、壁に近づけた場合はそれの逆になるようにします。また前の壁に近づけた場合は右だけが回るようにします。
そしてそのセンサーの感度は、前方のセンサーは500ｋΩの、残り２つの右と左を制御するセンサーは、100kΩの半固定抵抗で、ドライバーを使って調整します。この調整が思ったより大変です。（というか、いくら調整しても完璧に作動するか分からない。）
展示されている部屋の光などにも影響されるので外光避けをセンサーにつけても中々あいつは言うことを聞いてくれません。これを作って片山さんの言っていた「センサーは難しいよ。」という意味がようやく分かった気がします。
展示されているコースについて 展示されているコースに関して、説明します。中央が四角く囲ってあり、横に4枚立ててある変なものはこのマウスレーサーを動かすためのものです。へこんでいる部分にL字の板や、３枚がくっついた板と1枚の板を全ての箇所に入れ、自分で好きなように動かせます（マウスレーサーの調整がとてもうまくいっていたら）。また板が少し白くなっていますが、それは白色が光を反射しやすいのでスプレーで塗ったからです。板によって白さが異なることは仕方ないと思ってください。
##終わりに スペースの問題で書ける事はこれぐらいになります。参考にさせて貰ったサイト及び検索の仕方も載せるので、興味があったら、調べてみてください。作り方や部品の詳細について載っています。最後に、電子工作を初めて1年程の素人の僕の記事を読んでいただきありがとうございました。
参考サイト http://www.murata.com/jajp/campaign/ads/japan/elekids/ele/try/~/media/webrenewal/campaign/ads/japan/elekids/ele/try/koka13f/koka13f0021?la=ja-jp
←これに作り方など載っています。
１.「電子工作」と調べます。　２.6個目くらいに村田製作所と書いてあるものをクリック　３.開いたページで「KIDS電子工作セカンドシーズン」を開く　４.後は分かると思います。</description></item><item><title>ライフゲームをC++で実装してみた話</title><link>https://asanobuturi.github.io/document/2018/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/10/</guid><description>はじめに 実は「実装してみた」要素の少ない紹介記事であるがお許しを(盛大なタイトル詐欺)。
Life Game(ライフゲーム)とは？ ライフゲーム(Conway's Game of Life)は1970年にイギリスの数学者ジョン・ホートン・コンウェイ(John Horton Conway)が考案した生命の誕生、進化、淘汰などのプロセスを簡易的なモデルで再現したシミュレーションゲームである。単純なルールでその模様の変化を楽しめるため、パズルの要素を持っている。
Wikipedia より というもの、と言ってもわからないと思うので、ひとまずルールを書いておく。説明が簡潔で理解しやすかったため、これもまた Wikipediaから。 (一部視認性のために改変済み)最後に完成形のスクリーンショットを貼っておくので、イメージとしてはそれを参照して欲しい。
ライフゲームでは初期状態のみでその後の状態が決定される。碁盤のような格子があり、一つの格子はセル（細胞）と呼ばれる。各セルには8つの近傍のセルがある (ムーア近傍) 。各セルには「生」と「死」の2つの状態があり、あるセルの次のステップ（世代）の状態は周囲の8つのセルの今の世代における状態により決定される。
セルの生死は次のルールに従う。
また、中央のセルにおける次のステップでの生死の例を示す。生きているセルは■、死んでいるセルは□で表す。
誕生 死んでいるセルに隣接する生きたセルがちょうど3つあれば、次の世代が誕生する。
生存 生きているセルに隣接する生きたセルが2つか3つならば、次の世代でも生存する。
過疎 生きているセルに隣接する生きたセルが1つ以下ならば、過疎により死滅する。
過密 生きているセルに隣接する生きたセルが4つ以上ならば、過密により死滅する。
取り敢えずやりたいこと さて、ライフゲームを作るに当たって、画面の確保、描画などはDXライブラリに丸投げする予定なので、処理機構を考える。
やりたいこととしては、
すべてのセルを見る
→周りにある、生きているセルのカウント
→基準のセルが生きているか確認
→カウントに基づいて生死を決定する
こんな感じ。
セルは2次元配列を用意すれば良いが、取り敢えずvectorでいいだろう。ここで、セルのカウント後セルの状態を変更するのだが、変更後の状態をそのまま適応すると次のセルについて確認するときに影響してしまうので、コピーを用意してそちらに書き込むことにする。
つまり、セルの状態を保存するモノを2つ用意して、1つ目を見て生きたセルのカウントをし、その結果を2つ目に書き込んで最後に反映する。
1 2 vector&amp;lt;vector&amp;lt;bool&amp;gt; &amp;gt; map(ARRAY_SIZE, vector&amp;lt;bool&amp;gt;(ARRAY_SIZE, false)); vector&amp;lt;vector&amp;lt;bool&amp;gt; &amp;gt; map2(ARRAY_SIZE, vector&amp;lt;bool&amp;gt;(ARRAY_SIZE, false)); 書いてみよう とりあえず周辺の8つをチェックしたいが、取り敢えず自分を含めた9個をforで走査し自分自身を除くことにする。
配列外参照チェックの処理を書くのが面倒なので、配列外参照をしたときに例外を投げてくれるatメンバ関数で若干楽をしてみる。
下に挙げるのはライフゲームの核となる部分。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 for (int y = 0; y &amp;lt; ARRAY_SIZE; y++)//ARRAY_SIZE:これの自乗個の for (int x = 0; x &amp;lt; ARRAY_SIZE; x++) {//マス上で動かす。 int count = 0; for (int y2 = -1; y2 &amp;lt; 2; y2++) { for (int x2 = -1; x2 &amp;lt; 2; x2++) { try { if (map.</description></item><item><title>ライントレーサー制作記(仮)</title><link>https://asanobuturi.github.io/document/2004/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2004/1/</guid><description>はじめに 今手元に、2003年度版の部誌がある。ふと見てある事実に気がつく。なんと電子工作に関するものがないではないか。そこで、私は使命感と絶望感とともに今、キーボードを叩いています。
さあ、設計しよう 「ライントレーサー」とは、呼んで字のごとく地面に書かれた黒いラインの通りに進んでいくという自立型ロボットです。さて、一口にそう言ってしまいましたが、どうやって黒いラインをロボットに判断させるんだ、無駄な前置き書かずに、とっと説明しろとおっしゃるかもしれません。まあそう慌てずに、順序だてて説明しましょう。
センサーの話 まずは、地面に書かれた(貼られた)黒いラインとそれ以外の部分を判別しなくてはなりません。そこで、登場するのは、ロボットの目ともいえるセンサーです。今回は、対象に赤外線を発光して、反射波を受け、反射光の強さに比例して、出力する反射型フォトインタラプタ1を使用します。なるほど、黒いラインとそれ以外(白)との反射波の強さの差を使うんだなと、聡明な皆さんは気づかれたでしょうが、その通りです。つまり、センサーが黒いライン上にあるときは、Low(電流が流れない)、それ以外(白)上にあるときは、High(電流が流れる)と言うわけです。しかし、ここからが問題です。このセンサーにどのように判定させるかが、このライントレーサーのかぎを握ります。2つのセンサーを使ってでもできる2のですが、それじゃおもしろくない(?)ので今回は6つのセンサーを使ってみることにしました。
では、ライントレーサーと黒いラインの位置関係の考えられる場合を図で説明したいと思います。説明の都合上、センサーを左上から順に1~6と番号を振ります。なお、進行方向は、上です。
いわゆる直線
このときセンサーは、すべて黒いライン上には在りません。つまり、センサー1~6はすべてHigh。
カーブ(曲がり始め)
このときセンサーは、センサー2のみ、黒いライン上にあります。つまり、センサー2はLow、センサー13~6はHigh。
カーブ(中盤)
このときセンサーは、センサー2、6が、黒いライン上にあります。つまり、セン サー26はLow、センサー1、3~5は、High。
カーブ(曲がりすぎ)
このときセンサーは、センサー1、3、6が、黒いライン上にあります。つまりセンサー1、3、6はLow、センサー2、4、5はHigh。
とまあ大体こんなもんです。反対のカーブは、これの逆でいいのですが、実は、3.の場合のカーブの角度によっては、センサーの当たり方が違っていたりするのですが、このセンサーの黒いラインとの位置関係(絶対ありえないものを含む)は、2の6乗すなわち、64通り存在することになります。ちょっとセンサーの話から少し離れましょう。
回路の話 では、何の説明かと言うとロボットの目の説明をしたので続いては、ロボットの頭とも言える電子回路について説明したいと思います。とここでほんとは、ここに回路図3をバンと載せればいいのだけれど、回路図をでかく書きすぎて入らなそうなので、模式的な図で説明したいと思います。ここでのセンサー1~6は、先ほどの図の位置と同じです。
左図がその図です。四角で囲まれた部分にはそれぞれに応じた回路が来ます。その回路の説明は今回、省略させてもらいます。(どうしても聞きたい方は丸川まで。部誌を家で読んでいる方は分からず終いなのですが。)
この回路のかぎは、基盤1~3に入っているPIC16F84Aと呼ばれる部品です。この部品は、IC(集積回路)と呼ばれる部品の一種で、この中にプログラムを書き込むことができ、そのプログラムによってPICの端子(部品の足)につながっているセンサーや、モーターなどを自由に動かせるものです。プログラム言語がアセンブラ4なので、なかなか難しく、使いづらいです。
では、この回路の説明をしてみましょう。まず、センサーからおのおのからそれとつながっている基盤1~3にHighかLowの信号が送られます。その送られてきた信号を基盤1、3は、基盤2に送ります。そしてそれらの信号(センサー3、4は直接)を受けて基盤2のPICが評価を下し、モーターの右、左をとめたり、動かしたりします。ちなみに、直進するときは、左右両方を動かし、右に曲がるときは、左を動かし、右を止めます。左は、逆です。聡明な方は、基盤1、3のPICは必要がないのでは、とお思いになると思いますが、これは、私の大いなる誤解のせいなのであしからず。
そこで先ほどのつまり、センサーの話が必要になります。先ほど述べたように、センサーの黒いラインとの位置関係(絶対ありえないものを含む)は、2の6乗すなわち、64通り存在するとなっていました。じゃあ、この64通りのときどっちに曲がるべきなのかを全通り別々に、判別していけばいいのでは、と考える方もいらっしゃるでしょうが、これはかなり大変です。それじゃあ絶対ありえないものを抜けばいいのでは、少なくなるのでは、当初はそうしようかと考えていましたが、それを調べているときにふと気づいたのです。それは、先ほど(センサーの話)の1.のときは直進、2.3.のときは、右に、4.ときは左に曲がらなければなりません。そこで、黒いライン上にあるセンサーで、右側のセンサー(2、4、6)の内Highとなったセンサーの数(1.のときは3個)から左側のセンサー(1、3、5)の内Highとなったセンサーの数を引いてみます。すると、直進するときは、差が0。右に曲がるときは、負の数。左に曲がるときは、正の数になっています。これは、多分どんなときでもいえる(全通りは調べていませんが)と思われるのでこれを利用します。これによって、場合分けが3つで済むので、ずいぶん楽になりました。
こんな感じで動かして見たいと思います。8月18日現在完成していないので、もしかしたら、動いてない状態で部誌の中だけの存在となってしまうかもしれないし、少し違ったものができるかもしれませんが、あしからず。予定は未定ですから(笑)。
ここより先は、ひまな人だけ読んでください
2.あとがきと言うか愚痴 いや一部誌をかくのに、かなりの時間が経ってしまった。現在の時刻は、8月18日6時25分。書き始めたのは、8月17日10時。はぁー。書いてるときには、オリンピック野球の日本代表は、キューバに予選で勝ってるし、巨人の工藤は200勝達成してるし、(野球のことばっか)何が悲しくて6時のニュースで・・・。すいません愚痴ばかりで。それと、私は誤字脱字王なので、多少の誤字脱字には目をつむってください。
赤外線の発光素子と受光素子を一体化してモジュール化した素子。秋葉原の買い物中になんと製造中止になってもはや日本にいくつ存在するかわからないものを発見し、購入。ちなみにもったいなすぎて、このライントレーサーには、もっといっぱいあるやつを使っていたりする。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
センサー1、2の部分だけを使う方法。ようするに、1が、黒いライン上にある(Low)のときに左に曲がり、2が、黒いライン上にある(Low)のときに右に曲がり、どちらも黒いライン上にない(High)ときに直進するってこと。まあここまでの話に、ついてこれたあなたには愚問か。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
回路図・・・回路を記号で書いたもの。ちなみに、岡田仁史さんが作られた『BSch』の作った電子回路エディター。とにかく使いやすく、パーツを新規に作れる。フリーソフトと言うのもいい。岡田仁史さんのHPは、http://www.suigyodo.com/興味がある方はどうぞ。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
アセンブラ・・・ハードウェアの中で使われている機械語をほんの少し人に分かるものに変えたもの。命令(人が分かる形のもの)が、35個しかないので、使いこなすのは大変。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>ラジオのススメ</title><link>https://asanobuturi.github.io/document/2004/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2004/2/</guid><description>始めに何でこんなものを書くのか
理由は簡単です。「最近ラジオにはまったから。」です。
とある日の深夜。
私は膨大な量の試験勉強に追われていました。
当然，深夜なので物音ひとつ聞こえません。
私は「なんて空虚なんだ」と思いました。
それ以上に人の声が聞きたかったのです。
そこで，私の友人が度々話題にする「ラジオ」を聞くことにしたのです。
そして、どっぷりはまっていきました。
つまり、「深夜ヒマだったからラジオを聞いてはまった」のです。
・・・試験勉強をしていたんじゃないの？
聞くな。
ラジオあれこれ 簡単に言うと、「音声、音楽等を乗せた電波を受信して聞く」ものです。
もうちょっと詳しく言うと放送局において、パーソナリティーの
声や音楽をマイクを通じて電気信号に変え、これを電波に乗せて
放送局のアンテナから送信します。
ラジオはその電波をアンテナでキャッチ、電気信号を元の
声や音楽に戻し、スピーカーやイヤホンから流しているのです。
テレビも同じような原理です。
ちなみに、私の使っているラジオは携帯ラジオで，外からは
アンテナは見えませんが、FM放送、TVを聞く場合、巻き取り式
イヤーレシーバーがアンテナの代わりになり、AM放送の場合、
ラジオの内部にアンテナが内臓されています。
AMとは「Amplitude Moduration」の略称です。
日本語訳は「振幅変調」となります。
AMの電波はラジオ局から発信される電波（搬送波）を音声信号（側帯波）に
合わせてその振幅を変化させることによって音声を乗せているのです。
AMの長所は信号を作るのが簡単
復調しやすい
AMの短所は雑音を拾いやすい
混信しやすい
というところです。
FMとは「FrequencyModuration」の略称で、周波数変調と訳されます。
AMと違い，搬送波の周波数を音声信号の周波数に合わせることにより
音声を乗せているのです。
FMの長所としては雑音に強い
混信しにくい
FMの短所としては高い周波数でしか使えない
・・・という点が挙げられます。
補足になりますが，混信というのは
「とある放送局の電波と他の放送局の電波を一緒に受信してしまう」
ことです。多分（？）
道理で文化放送のノイズがひどいと思ったら韓国のKBS放送が
混信しているらしいです。
韓国め！
ここで蛇足ですが、怪しい放送について少々。
政情不安定なところでは、互いの国家体制、政治等を批判するような
番組が放送されています。
国際的な取り決めに従わずに電波を出すことを地下放送と言います。
まあ、ここでは深くは触れません。（けっこうギリギリなネタです。）
が、1つだけ紹介しておきましょう。テレビ等で見たことがある人も
いるかと思います。（私は見ました。）
乱数放送 朝鮮半島において放送されていたアナウンサーが不規則な数字をただ
延々と読みつづけるというメチャメチャ不気味な放送。
テレビで見たのは結構前なので記憶が定かではありませんが，
国外にいる工作員に対しての激励や指示を示しているらしいです。
確か、工作員にはその暗号の解読方法みたいなのが渡され、時間になったら
ラジオをつけ，指示を聞き取る・・・だった気がします。
夜中ふとラジオをつけたら，淡々と何かを告げる声が聞こえてくる
光景を思うと、超怖いですね。俺ならきっと都市伝説にします。
（まあ、実際はジャミングのせいで聞くのは困難だし。）
ちなみに、もうやってません。（重要）
・・どうしよう。書くことがありません。
まあいいや。とりあえず，私の体験に基づく雑音の減らし方を紹介します。
私がこうしたら聞こえやすくなったと言うだけなので，
理屈もなにもありません。（死）
図がついています。もう、マウスでぐりぐりと（略）</description></item><item><title>会計がおじさん構文を研究してみた</title><link>https://asanobuturi.github.io/document/2023/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2023/2/</guid><description>はじめに こんにちは。会計の小澤です。部誌を書くのは今年が初めてですがよろしくお願いします。
なぜこんなテーマで部誌を書こうと思ったか 自分は部誌というのは文化祭で物理部に来てくださった方々に物理部についてより知ってもらうためのものだと思っています。 しかし例年の部誌を見ると専門的な事ばかり書いてあり、多くの人には何が書いてあるのかわからないという状況です。 専門的な内容を書いて興味を無くされてしまうというのは本末転倒です。 そこで小学生の皆さんやお父さん方まで興味を持っていただけるような内容を考えた結果おじさん構文を研究しようという結論に至りました。(決して何も思いつかなかったわけではありません)
おじさん構文って何？ そもそもおじさん構文とは一般的におじさんと呼ばれる人々が若い女性に対して送るメールの中で使われる文法のことです。 最近はTwitterXなどのSNSでも見かけることが多いかと思います。
特徴 おじさん構文の特徴を紹介していきたいと思います。
句読点、絵文字、顔文字の乱用 同じ意味でも異なる絵文字を連続で使う(同じものを連続で使う場合もある) 例）「もう寝るネ💤🛌」 エクスクラメーションマーク(ビックリマーク)は必ず赤色 相手に質問をするときの語尾は必ずと言っていいほど「〜カナ？」 全く面白くない冗談を言ったあとに「ﾅﾝﾁｬｯﾃ」をつける 相手のことは名前にﾁｬﾝ付けで呼ぶ すぐ食事に誘う 唐突に自分語りを始める 当てはまらないタイプもありますが基本的にはこのような感じです。
いざ実践 ではこれまでのことを踏まえて実際におじさん構文を書いていきたいと思います。 まずは以下の文章を見てください。(相手の名前は花子とします)
花子さんへ
もう12月ですね。日に日に寒くなってきました。 仕事の方は順調でしょうか。新しい職場に戸惑っていませんか。 困ったことがあったら何でも聞いてくださいね。 また、今度営業課のみんなで新人歓迎会を開くのですが、花子さんも来ませんか？ 課のみんなとの中を深めるいい機会なので、都合が合えば是非参加してほしいです。 折り返し連絡待ってます。
室　剛
歓迎会のお誘いの文章ですがこれではただの紳士的な文章です。 ではこの文章をおじさん構文を使って書き直してみたいと思います。
花子ﾁｬﾝへ😘
もう12月❄🎄⛄❗❗寒くなってきたネ。 おぢさん😎は最近、鍋🍲を食べた👄ヨ〜。 おちごと👜は、順調カナ？新しい職場🖥️、もう慣れたカナ？ 困ったこと🤔🤔があったら、何でも聞いて👂ネ👍❗❗ ｱﾄ、今度、営業課👜💼の皆で歓迎会🍺🍻を開くんだけど、花子ﾁｬﾝも、どうカナ(?_?) おぢさん😎は花子ﾁｬﾝが来てくれたら、嬉しくて、飛び上がっちゃうｶﾓ&amp;hellip;ﾅﾝﾁｬｯﾃ(汗)
室　剛
いかがでしょうか。 このように先程紹介した要点をおさえれば誰でもおじさん構文を書くことができるのです。
テンプレート ここまで読んでいただいた皆さん、おじさん構文を書きたくなったのではないでしょうか。 そこで今からおじさん構文初心者に向けてテンプレートを紹介しようと思います。
挨拶編 お疲れ様〜 オハヨウ〜 おっは〜 オッハー オハヨー お早う ヤッホー 今日もお仕事カナ？ 元気カナ？ 会社をサボるなんて、悪い子だなぁ おはよー！チュッ 久しぶり こんな遅い時間に何してるのカナ？ 今日も一日、がんばろう🤗└( &amp;lsquo;ω&amp;rsquo;)┘ムキッ 挨拶は基本中の基本ですので積極的に使いましょう。
質問編 今日はどんな一日だった？ 今日は雨だけど何かするのカナ？ ちょっと電話できるカナ？ 〜ﾁｬﾝと一緒にランチしたいなぁ 質問から攻めていくのもいいでしょう。 ただし質問すら返信が来なくなったら終わりです。潔く諦めましょう。</description></item><item><title>顔認識の仕組み</title><link>https://asanobuturi.github.io/document/2019/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/4/</guid><description>そもそも顔認識とは こんにちは、中学2年の永井康太です。最近「顔認識」という言葉をIT化が進むにつれてよく聞くようになってきています。そもそも顔認識とはどういう技術なのかというと、例えばこのようなものです。
今回は左の人の顔を顔認識を使って右のように顔の部分を自動で黒い枠で囲ませてみました。
顔認識の仕組み① まずは顔認識の概要についてお話します。
判定する画像の一部を使って判定する。
様々な基準を使ってその部分が顔かどうか判定する。
もし顔ではないと判定された場合、その部分が顔ではないと決定する。もし顔であると判定された場合は(1)に戻って判定をする。
これを繰り返して顔を認識します。要するに一回一回の精度は低い判定を、何度も重ねて実行することによって精度を上げているのです。
顔認識の仕組み② 次に判定方法についてお話します。判定方法にはいろいろなものがありますが、今回はHaar Cascades検出器について話します。顔の中でも今回は花の判定について説明します。
まず鼻は中央のほうが端の方よりも光が当たりやすく明るくなるという特徴があります。この特徴を生かして鼻を判定します。しかしこの特徴は単純で素早く判定できる一方、判定精度は低いため多くの判定をすることで判定精度を高めます。
このように明るさの特徴を用いて判定をしています。
さいごに ここまでこの記事を読んでいただきありがとうございました。私の文章力が低いせいでこのようなわかりにくく内容も薄い文章になってしまいましたが、この記事を通して少しでも顔認識に興味を持ってくれたら幸いです。
参考文献 使用した顔の画像：https://www.pakutaso.com/20190706207post-22263.html 参考にさせていただいたサイト：
https://qiita.com/FukuharaYohei/items/ec6dce7cc5ea21a51a82 https://kotobank.jp/word/%E9%A1%94%E8%AA%8D%E8%AD%98-190393
https://code-graffiti.com/opencv-face-detection-with-haar-cascades-in-python/#toc4</description></item><item><title>基礎からはじめるトランジスタ</title><link>https://asanobuturi.github.io/document/2019/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/10/</guid><description>はじめに お久しぶりです。中3になった鈴木です。今回は作品の製作記や解説ではなく、バイポーラトランジスタに焦点を当て、バイポーラトランジスタの使い方だけを解説していくことにしました。果たして、需要はあるのでしょうか。
というのも、トランジスタの使い方だけをただ集めた本は中々なく、トランジスタが何者なのかは分かったが、どう使えばいいのか分からない状態、それが長く続いたのです。僕と同じ状態にある人の助けになるかもしれない、また、後輩たちにもこれを見せれば何か分かってくれるかもしれない。そういう思いで執筆しています。
オームの法則やコンデンサ、インダクタなど基礎中の基礎の部分は割愛します。尺の都合というのと、そこの解説はどの入門書にも載っていると思うので。ここに書いてあることについて何が何だか分からない人は、トランジスタの足配置が分かったぐらいの段階でもう一回このページを開いてみてください。もしかしたら何かが分かるかもしれません。
また、トランジスタの品種を記載するときは基本的に”2SC/D****(2SA/B****)”の形とします。それぞれNPNとPNPで特性がほとんど同じであるコンプリメンタリ品です。
最後にここに出てきたトランジスタが現行品か入手可能か、入手困難かをまとめて記載しておきます。入手可能/入手困難かは執筆時点(2019年7月)、秋葉原の部品店で入手出来るかどうかのデータであり、長期的に保証ができるものではないことをご了承ください。
トランジスタのパッケージ、足配置 トランジスタは一部の例外を除きプラスチックモールドに封入されており、内部とパッケージは絶縁されています。またスルーホール実装型と表面実装型の二種類があり、家電など大量生産が可能な分野では後者が一般的ですが（家電を解体すると分かると思います。）、個人が少量を試作する場合は前者もまだまだ使われます。しかし、近年では日本の大手メーカーを中心にスルーホール実装型のトランジスタの生産中止が相次ぎ、個人的にも今後の供給に不安な面があります。ただ、一部有名なトランジスタに関しては台湾や中国などのメーカーでセカンドソース品の生産があるものもあり、必ずしも入手出来ないとは限りません。もし気になる方は秋月などで取り扱いがあるかどうか確認してみてください。
プラスチックモールド プラスチックモールドのトランジスタは前述の通り基本的に内部とパッケージが絶縁されています。そのため非常に使い勝手がよく、なおかつコストも低いためトランジスタの中では最もメジャーです。
プラスチックモールドのトランジスタには大抵の場合足が3本同じ方向に出ており、それぞれの足がトランジスタのどこに相当するのかは国ごとに大体統一されています。
具体的には、日本やヨーロッパだと文字が印字されている面の左側から見てエミッタ(E)、コレクタ(C)、ベース(B)です。ECBです。アメリカだと同じように見て左からエミッタ(E)、ベース(B)、コレクタ(C)です。EBCです。
この違いは同じ回路内に違うメーカーのトランジスタが混在していたり、トランジスタを交換するときには致命的で、足配置がECBかEBCか確認しておかないと回路が動作しない原因にもなります。
TO-92 スルーホール実装型で小信号用のトランジスタではメジャーなパッケージです。上から見た断面はかまぼこ型になっています。東芝の2SC1815(2SA1015)やNECの2SC945(2SA733)などがこれにあたります。
TO-126 TO-92と同じくプラスチックモールドですが、こちらは平たく、そして大きくなっています。また、中央には放熱器に取り付けるためのネジ穴が開いており、製品も放熱器を取り付けることを前提にした設計になっているため、余程のことがない限り放熱器を取り付けることをお勧めします。用途はオーディオ回路やスイッチングなど。東芝の2SC3422(2SA1359)やTTC004B(TTA004B)などがこれにあたります。
TP-220 こちらもプラスチックモールドですが、文字印字面の反対側に金属がむき出しになっている部分があり、そこの中央には放熱器に取り付けるためのネジ穴が開いています。こちらもまた放熱器を取り付けることが前提の設計となっています。金属部分は内部と絶縁されておらず、そのまま放熱器を取り付けるとショートの原因にもなることがあるので、絶縁性のあるグリスや絶縁シートなどで適切な対策をとってください。日立の2SC1061(2SA671)や東芝の2SD880(2SB834)などがこれにあたります。
TO-3P プラスチックモールドです。金属部分があり放熱器を取り付けるための穴も開いています。その他気を付けること等もTO-220と同じですが、大きさと金属部分の形が異なります。東芝の2SC5198(2SA1941)やサンケンの2SC3519A(2SC1386A)などがこれにあたります。
また、ここまで大型なものになると表面実装型での代替は困難なため、家電など大量生産が可能なものであってもスルーホール実装で搭載されるほか、大手メーカー製のオリジナル品が現行品として供給され続けている印象です。
TO-247 TO-3Pと特徴はほとんど同じですが、より薄型になっています。IGBTに多くなっています。(バイポーラトランジスタとは異なる点が多いため割愛）
東芝の2SC5200(2SA1943)は個人的にTO-247に見えますが、メーカー側ではTO-3Pとして扱っているようです。
メタルCANパッケージ メタルCANパッケージのトランジスタは、その名の通り金属製の缶の中にトランジスタが封入されています。かつては信頼性の証でもあり、また放熱性も良好なためオーディオアンプの最終段などに使われていましたが、国内/海外メーカーともに生産終了が相次ぎ市場にはごく少量のみが出回っています。それらのほとんどが台湾製のセカンドソース品です。
TO-3 一見帽子のようにも見える金属製の缶から足が2本出ており、また放熱器に取り付けるための穴が端の方に開いています。トランジスタにもよりますが2本の足にエミッタ、ベースが、金属部分にコレクタが相当する場合が多い印象です。2N3055などがこれにあたります。
信号を増幅する(電圧編) まずはトランジスタの基本、増幅動作から解説します。増幅とは、入力された信号の振幅を大きくすることです。増幅動作において重要なのは、信号に余計な色を付けないことです。（比喩的表現ですが、要は信号を忠実に増幅するということです。）
増幅回路の一つとして、まずはエミッタ接地増幅回路を紹介します。
エミッタ接地増幅回路(基本) エミッタ接地増幅回路とは、その名の通りエミッタをGNDに接地し信号を増幅する回路のことです。（ただし、ゲインを調整する場合にはエミッタ－GND間に抵抗を接続することもあります。）
下の回路図を見てください。この回路図のVinに信号を入力するとVout-GND間に増幅された信号電圧が出力されます。
電圧増幅度Avは以下の式で決定されます。
\(Av = \frac{Vin}{Vout} = \frac{Rc}{Rd}\)
定数の決め方 ここまで、エミッタ接地増幅回路の動作について解説しました。それでは、実際に回路を設計してみましょう。
とその前に、この回路を設計する上で重要なことを覚えておきましょう。
トランジスタ回路の設計は直流動作と交流動作と分けて行う。直流動作とは信号とは関係ないバイアス電流など。交流動作とは実際に信号を入力したときの動作。
入力、出力電圧の基準(無信号時の電圧)が\(0\mathrm V\)(GND)ではない場合、それぞれに結合コンデンサ(カットオフコンデンサとも)を接続する。直流電圧があると回路の動作点が狂うほか、負荷がスピーカーなどのリアクトル負荷の場合、直流電圧をかけると磁気飽和を起こし、インピーダンスが急激に低下し(リアクトルとしての意味をなさず、巻線の抵抗負荷分のみのインピーダンスになる)許容範囲を超えた大電流が流れるため特に注意すること。また、結合コンデンサがあるとモーターなどの制御は不可能。結合コンデンサを省ける回路は後述。
回路を「交流的に」見る場合もある。要は直流成分を無視して（結合コンデンサを通した状態、とも考えてよい）電圧の変動分のみを見る。よって\(\mathrm{VCC}\)(電源電圧)と\(\mathrm{GND}\)は交流的に電位差がない。また、トランジスタの\(\mathrm{Vb}\)－\(\mathrm{Ve}\)間にも交流的に電位差がない。
トランジスタのコレクタ電流は定格を超えない限りいくらでも流してよいが、あまりに多く流しても不経済なうえ、トランジスタの雑音が最小になるコレクタ電流値は定格ギリギリではないため適当に決める。大体\(1\sim10\mathrm{mA}\)。
トランジスタのコレクタ電流\(Ic = Ie\)(エミッタ電流)として考える。ベース電流は\(Ic\)の\(\frac{1}{hfe}\)(直流電流増幅率)倍なので微々たるもの。無視して構わない。
トランジスタのhfe(直流電流増幅率)はコレクタ電流Icによって大きく変動するのでデータシートをよく確認する。
トランジスタのベース－エミッタ間電圧Vbeは大体0.6Vとして設計する。
トランジスタのエミッタ－GND間の電圧は2V程度にする。エミッタ電圧の変動を許容するため。
トランジスタのバイアス電流はベース電流より「十分大きい電流」。個人的に大体10倍前後以上がベストだと勝手に思っている。
回路の入力電圧、出力電圧の基準はVccの半分(後述の両電源アンプの場合はGND)になるべく近づける。信号の振幅をできる限り大きく取れるようにするため。
回路記号のみを書いてある回路図に既に決まっている定数を書き加えながら設計していくと設計が楽になる。
細かいことは気にしない。
以上のことを覚えられたら、次に進んでみましょう。もし不安になったら適宜戻って確認してみてください。
設定条件 電圧増幅率
2倍
最大入力電圧
\(1Vp-p\)
最大出力電圧
\(2Vp-p\)
電源電圧
\(9\mathrm{V}\)
カットオフ周波数</description></item><item><title>居心地のいい「物理部」という環境</title><link>https://asanobuturi.github.io/document/2023/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2023/5/</guid><description>この部誌を書き始めているのは2023年9月11日21時26分頃、編集担当後輩から部誌のページが余った旨の連絡を受けたためである。タイトルも決まらぬまま記述しているため、稚拙な文章となっている可能性があるがその点ご了承願いたい。
物理部という環境はとても魅力的なものである。浅野学園内で物理部以上に居心地のいい部活は他にないだろう要出典。
簡単に自分と物理部の出会いについて振り返ってみる。実は自分が物理部という存在を知ったのは浅野中学校に入学してから。小学生時代に文化祭に参加したことが1度だけあったが、その際は物理部の展示なんて一切見なかった気がする。中学1年生の時の部活動説明会では映像のクオリティーがそこまで高くなくそこまで興味を持ったというわけでもなかった。実際に物理部に見学に行った際、私はいい意味で裏切られた。紹介動画はニュートンのゆりかごがメインの動画で、物理部に対し堅苦しいイメージを持っていたが教室では8割ぐらいがプログラミングといった所謂「物理」という理科の分類からはあまり想像できないような活動をしていた。
そこで興味を持ち、物理部(と水泳部)に入った。物理部は部員同士の交流がとても盛んで、活動に関係のない雑談等も頻繁に行われる。文化祭での展示は個人による作品がメインであるが、わからないところなどを周りに聞いたりしながら作品を制作していくので連帯感はかなり強い。部員としても5(6)年間(私だけかもしれないが)上級生と下級生であるという関係性をあまり意識することなく日々を送ることができた。現に高校【検閲により削除済み】年生である現在でも１つ上の卒業生達や3つ下の学年の後輩たちとも極めて良好な関係を築いている。特に今年はOBも頻繁に部活に訪れ話が弾むこともしばしばだ。
物理部は全員で一つの目標に向けて取り組む部活というよりも、個々が自分のやりたい内容をより深める部活動だと私は考えている。他人の金で自分のやりたいことをやることができる環境は浅野学園内、他にないだろう。
また中高時代の友人や仲間はきっと大学に進学して以降もかけがえのないものになるはずだ。男子校で知り合って何年も同じ部活で過ごし、分け隔てなく話せる相手は人生においてプラスに働くに違いない。後輩、またこれから物理部に入部する諸君には物理部で築いた人脈をぜひ大切にしてもらいたいものである。
最後に顧問として部活動に関わっていただいた先生方及びたくさんの迷惑をかけた同輩･後輩の方々、6年間ありがとうございました。</description></item><item><title>芸術の重要性について</title><link>https://asanobuturi.github.io/document/2021/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/7/</guid><description>はじめに 皆さんこんにちは、またまた登場の中学3年生のR.K.です。
さて突然ですが、皆さんは音楽、美術、書道といった芸術について興味を持っていますでしょうか？もしかしたら「芸術を学んでも意味がない」「芸術は役に立たない」と考えている方もいらっしゃると思いますが、僕は、そう考えるのは甘いと思っています。
皆さんは芸術というと何を思い浮かべるでしょうか？例えば昔の芸術家の絵画とか、有名音楽家の音楽などといったものを鑑賞したり、絵や彫刻を作らされたり、音楽を演奏したりすることを思い浮かべる人もいらっしゃると思います。しかし芸術とはそんなに幅の狭いものではありません。古い芸術を見ながら新しい芸術を切り拓いていく、それが芸術だと僕は考えます。具体的なことについてはこの章以降で説明しますが、学校で習うような国語、数学、社会、理科などの教科同様、芸術もまたこの世界には欠かせません。
物理部でもプログラミングや電子工作にとどまらず、3DCG制作や映像編集、作曲といったこともしている部員もいたり、そうでなくてもそれらを趣味にしている部員もたくさんいます。僕がこの記事を書こうと思った理由は、芸術に未知の可能性を秘めている(？)物理部の部員である僕から芸術の存在意義をまだ見いだされていない方に芸術の重要性を伝えたいと思った他、僕自身に対しても「この記事を書いて改めて芸術と向き合ってみよう」と思ったからです。
もちろん僕は芸術関係の活動がまだまだ他の人に比べては浅いため、芸術の本質からはかけ離れている事があるかもしれませんし、これはあくまで僕の考えなので、他の人が思っていることとは異なるかもしれません。あくまで1人の人間の考えと思ってください。また、物理部の活動内容とはズレている事があるかもしれませんがご了承ください。僕の拙い日本語もご愛嬌ということで。
物理部員の方々を含め、ごゆっくりお読みください。
なぜわたしたちは芸術を学ぶのか そもそも私達はなぜ学校の授業として芸術を学ぶのでしょうか。僕が勝手に考えたことを説明します。
もちろん、芸術を学ぶのは学校側が芸術を使って金を稼ぐことを促しているからである、ということはありません。
まず理由の1つとして、「芸術とはなにか」を学ぶためということがあります。もちろん人間は生まれてから何かしらの方法で教えられるまでは「芸術」の概念はわかりません。しかも、「芸術とはなにか」というものが芸術についての知識が何もない状態で端的に言葉で伝えられても分かる人は少ないでしょう。鑑賞・実践などを繰り返すことでようやく「芸術とはなにか」がわかるようになります。
2つ目は、芸術的なセンスを発揮するためです。人間は生まれながらにして芸術的センスを持っているのですが、唯持っているだけでは発揮することはできません。芸術を鑑賞したり実践したりして芸術的センスを磨き、発揮できるようにするということです。
3つ目には、芸術作品を芸術作品として捉える能力を育むためということもあります。もし学校で芸術について学んでいなければ芸術作品をただの絵、ただの物質の塊、ただの音としか捉えることができません。しかし授業などによってただの絵、ただの物質の塊、ただの音にも芸術性を見出すことができるようになります。先程述べた「芸術的なセンスの発揮」にもつながっていきます。
芸術とはなにか さて、「芸術とは何か」ということを説明しようかなと思います。
世の中には色々な芸術作品がありますが、皆さんはどのようなものを芸術作品と考えていますか？ある人は芸術作品と考えているものであっても、別の人は芸術作品と考えていないかもしれません。このように、世の中に存在するモノの中で芸術作品とみなすかみなさないかは個人次第です。
また、芸術作品というとどのようなイメージがあるでしょうか？あまり日常においては使われない、または身近ではないと考える人も多いと思います。しかし芸術作品の判断基準が曖昧であることから考えれば、役に立つようなものだって芸術作品とカウントされるかもしれないのです。
したがって、僕は芸術とは世の中に存在するモノすべてと考えます。
その芸術の中にも「役に立つ芸術」と「役に立たない芸術」の2つに分かれています。
世の中に存在するモノすべてというのは、音楽などといった形のないものも含まれています。また、役に立つ芸術であるかそうでないかというのは一般的な分類が存在しているわけではなく、個人によって分かれます。ある人が、これは役に立つと考えているものでも他の人にとっては役に立たないと考えることもよくあるからです。
俗に「芸術」と言われている音楽、美術、書道などは「役に立たない芸術」です。しかし「役に立たない」ことと「存在してもしなくても良い」ということは混同してはいけません。ただ私達が日常生活を送るうえでで役に立たないというだけです。詳しくは第5章で説明します。
芸術の重要性 いよいよ本題の、芸術の重要性についてです。
まず、この世の中には「芸術作品」と呼ぶことができるものは無限にあり、世の中に存在するすべてのモノから学ぶことができることがあるのです。
芸術は「世の中に存在するモノすべて」である以上、何かしらモノを作る時には常に、今まで取り入れてきた芸術の知識が必要となります。ということは、今まで取り入れてきた芸術の知識と勘すべてが新たな芸術作品の制作に役に立ちます。
世の中に存在する芸術作品にも独創的なものが多くあります。その独創的なものは、何も芸術の知識や勘がない状態から生まれると思われがちですが、何も知識がない状態では芸術作品を生み出すことさえもできません。独創的な芸術作品は数多ある芸術作品を知ることで、そこから生み出されるのです。
つまり何が言いたいかというと、「芸術」、つまり色々なものを吸収することで日常においてものを独創的な観点から見ることができるようになり、また独創的なものを作り出すことができるようになるのです。その独創性は、芸術の情報を吸収すれば吸収するだけ大きくなります。
もちろん、役に立たない芸術も含みます。
役に立たない芸術の重要性 では、俗に言う「芸術」、つまりは役に立たない芸術の重要性についても説明していきます。
先程述べたとおり、役に立たない芸術はあくまで日常生活において直接的に役に立たないだけであり、これらの存在も世の中において欠かせません。
役に立たない芸術も役に立つ芸術同様、ものを独創的な観点から見るのに役に立ちます。しかし、役に立たない芸術の重要性はそれだけではありません。
まず、役に立つ芸術は役に立つが故に、そこから感動するということはあまりないでしょう。なぜなら役に立つ芸術の作品が作られるうえで、芸術的な意図はないからです。
皆さんは絵画を見たり音楽を聞いたりして、心を動かされたことはありますか？役に立たない芸術は、人の心を動かすためにあるのです。
むしろこちらの重要性のほうが納得することができるでしょうか。
もちろん役に立つ芸術も同じくらい人の心を動かしているのですが、それに気づくことはできません。役に立たない芸術は人の心を直接的に動かしています。
しかし、それは役に立たない芸術としての存在意義であって、日常において役に立たない芸術に存在意義があるということにはまだ繋がりません。役に立たない芸術が、役に立つ芸術との間の垣根を超える瞬間が何処かにあるはずです。
僕は先程「役に立つ芸術から直接的に心を動かされる事は少ない」と言いましたが、「見えないところで心が動かされている」、つまり心が動かされていないように思われていても、実は心の底ではその役に立つ芸術の作品に夢中になっているということはありえます。そのようなことは、あるものが役に立たない芸術の要素を取り入れているか次第でありえるかもしれません。
以上より、僕はこう考えます。
役に立たない芸術を通して人の心を直接的に動かすことを学び、その知見を利用して、役に立つ芸術作品をつくる上で、役に立たない芸術から得た独創性を活かすことができるというだけでなく、人の心を見えないところで動かすという点においても役立てることができるということです。
これが本当の、役に立たない芸術が役に立つ芸術との垣根を超える瞬間です。
物理部と芸術 さて、ここまで全く物理部に関係ないことを書いてきたのですが、これはこの部活である物理部の部誌であり、少しは物理部のことについても書こうと思います。物理部と芸術はどのような関係性について説明します。「そもそも物理部とはなにか」という根本的なところまで説明してしまうかもしれませんね。
物理部はプログラミングや電子工作をしている部活であり、一見芸術に関係ない部活であると思われると思いますが、物理部、いや、部活というものすべて芸術団体であると僕は考えます。 この物理部の場合、「ブログラム」「機械」という名の「芸術作品」を創り上げています。
その「プログラム」「機械」にも種類は部員が作ってきた数だけあり、同じものはありません。
特に物理部は「モノ」を作る部活であり、つまりははっきりとした「芸術作品」を作る部活であるということです。
物理部員は、先輩が作った芸術作品の仕組みを知り、それに似たものを作ろうとしているがその過程で道がずれ、結果的にオリジナリティのある芸術作品を作ることができるようになると思います。
その中にも「役に立つ芸術」作品、「役に立たない芸術」作品を作っている部員がそれぞれいて、その役に立つか立たないかの垣根を超えてものづくりに励んでいます。
「はじめに」で、「3DCG制作や映像編集、作曲といったこともしている部員がいる」と言及したように、それはつまりたとえ特定のことであっても、芸術の面白さと可能性を見出し、役に立たない芸術に足を踏み入れる部員も増えてきています。
だからこそ、ものづくりの楽しさを知っている部員がいる物理部は、芸術団体の頂点を名乗るのにふさわしいと言えるのではないでしょうか。
芸術を学ぶにあたって さて、芸術を学ぶにあたって、私達は何を意識すればいいのかを考えてみます。この章で説明する芸術は、主に役に立たない芸術を示しています。
そもそも、芸術を教わるがまま学ぶというのも1つの芸術の学習で、それだけでも十分な芸術の知識を得ることができるとはいえ、それだけでは勿体ありません。与えられた少ないものから、その更に上を学ぶこともできるはずです。
例えばこのようなことができるでしょう。
芸術の情報が1つ与えられたら、自分が得た役に立つ芸術または役に立たない芸術の情報を1つ引っ張り出します。次に、与えられた芸術の情報をその情報と対比します。そこから共通点を見つけ出します。共通点があろうとなかろうと、それを数回繰り返します。
もちろんそこから見つけ出したことを何かしらの紙に書き記すなどする必要はありませんし、頭に留めておくくらいで十分だと思います。
このようなことをすることで、得た芸術の情報を独立させず、すべての情報を互いにつなげる事ができ、芸術をひとかたまりにすることができます。そうすることで、第5章や第6章で書いたようなことをすることが容易になるのです。
もちろん今挙げた方法は一例で、情報をひとかたまりにする方法は他にもたくさんあります。その方法を考えるところから始め、芸術を学ぶときに活かしてみるのも良いかもしれません。
結局何が言いたいのか ここまで長ったらしい文章を書いてきたのですが、結局僕が言いたいのはこれだけです。
芸術とは、世の中に存在するモノすべてである 芸術には役に立つ芸術、役に立たない芸術がある 芸術を学ぶことで日常においてものを独創的な視点から見ることができる 役に立たない芸術は人の心を動かすことに繋がる 物理部は芸術団体の頂点を名乗るのにふさわしいのではないか 芸術をただ学ぶだけでは勿体ない という僕の芸術に関しての独断と偏見でした。改めて言いますが、これは一般的な考えではなく1人の人間の考えです。もちろん反対意見もあるだろうし、この人何を言っているんだと思う方もいらっしゃると思います。あくまで参考程度にしていただければ幸いです。
おわりに という感じでこの記事を書かせていただきましたがいかがでしたでしょうか。</description></item><item><title>御挨拶</title><link>https://asanobuturi.github.io/document/2017/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2017/1/</guid><description>初めまして。プログラミングも電子工作もできない中3まで部活に来たことがなかった文系部長です。なぜ物理部部長をやっているかには、複雑な事情があります。が、そのことは簡単にまとめられないので省略します。
さて、今回の文化祭は前回、前々回とは根本的に格が違います。部長のやる気なんかがそうです。ですが、やる気があるのは電工班と一部PC班のみ。PC班の中3などは常に遊んでいる。一昨年、去年は高二ですらそうでした。やる気に関しては中身を読んでみてください。表紙、裏表紙は部長。編集は電工班。会計も電工班です。
今年は装飾にも力を入れています。一昨年、去年は装飾らしい装飾はありませんでした。ですが今年は多少ですが存在します。それも全部部長が主導して、電工班の高二、中3、中2を動員して作りました。主に夏休みを利用して作りましたが、PC班は誰も手伝っていません。中1には元から手伝わせる気はなかったのですが、他に誰もいません。これを書いている今(2017/08/25 11:06)PC班は中1しかいません。誰か来いよ。一応高一が1人普段はいますが、他が使えない中ではゲームを一つでも多く作ってもらったほうが良いので手伝ってもらうわけにはいきませんでした。今年はすっぱりとPC班を見捨てて、電工班が主導で進めたので来年以降、私の跡に続く電工班が主導してくれると思うので、それらに比べたら良い仕事をしたと思います。
今年の部誌、実は8月序盤には既にほとんど完成していました。ですがちょっとした連絡の齟齬で印刷が遅れ、9月になってしまいました。
「どこが挨拶だよッ！」とかなんとか思っているでしょうが自分でもそう思います。ここまで頑張ってもようやくスタート地点。ゼロからのスタートなんて言いますが、今年したことはマイナスからゼロに戻しただけ。これからがようやくです。
そんなこんなでいろいろとある物理部展#2017ですが、ほぼすべてが初の試みです。部員全員が一丸となって、とは言えませんがかなり気合を入れた内容です。評価はご自分でつけてみてください。</description></item><item><title>光通信とは?</title><link>https://asanobuturi.github.io/document/2004/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2004/3/</guid><description>近年、インターネットや通信の主流(?)となっている「光通信」、とは何なのかについて説明したいと思います。
まず、光通信の説明の前に従来の電気通信から説明しなければなりません。
さて、従来の気通信は下図のように電気信号を用いた通信方法です
電気通信 しかし、これにはいろいろと欠点があり、距離が離れれば離れるほど通信速度が遅くなる、大容量のデータを送信するのに時間が掛かる、高画質の画像が送れない、ノイズ(雑音)などが入ってしまうといった点です。
そこで、その欠点を無くしたものが「光通信」なのです。
さて、光通信で用いる「光」の速度は約秒速30万kmこれは1秒間に地球を7周半してしまうスピードです。しかし、これは電気の速度とそれほど差は無いそうです。では、なぜ「光通信」の方が通信速度が速いのでしょうか。
それは、電気が流れるときに抵抗が起きるからなのです。
これは、物理の基本なのですがどんな金属も少なからず電気が流れると抵抗が起きてしまいます。そのせいで距離が離れれば離れるほど速度が落ちてしまうのです(光でも似たようなことが起きますがそれは、光ファイバーのときに説明します)。
では、光が速いとわかったところで「光通信」の仕組みを説明しましょう。
実のところ光通信は下図のように電気通信とそれほど変わりません。変わった点は「光ファイバー」を用いた点ぐらいです。
光通信 ではその「光ファイバー」について説明しましょう。
光ファイバーは下図のようにクラッドとコアというものから成っています。コアはクラッドより光の屈折率が高いため境で光が反射して外に漏れないそうです。
光ファイバーの仕組み 実はこの光ファイバーは一本が私たちの髪の毛より細いそうです。それを数十本の東にし、水や熱、小さな動物などから守る保護膜に覆われているものが普段見る電線などとともに引かれている光ケーブルなのです(光ファイバー1本で電話の音声2千人分の情報を送ることができるらしい)。
しかし、最初から上手くいったわけではありません。光ファイバーの原理は1854年にイギリスの物理学者チンダルが発見し、1960年代に日本の科学者西澤潤一教授によりその構造が開発されました。しかし、開発当時は材質のガラスに不純物が多すぎため光が逃げ易く(光が逃げることを「損失」という)、たった3mで光の強さが半減してしまっていました。そのため、1970年代は不純物を無くし低損失化することが大きな課題でしたが、1980年代に光の強さが半減する距離が20kmにまで伸びたので光ファイバーの実用化が現実となりました。
これを利用したものが「光通信」です。また、従来のアナログ伝送ではなく、ディジタル伝送を用いるので従来の電気通信にくらべてノイズ(雑音)が入らず多量の音声や画像などを送ることができ、速度も速いというわけです。
この、光通信により会社の会議を離れたところから行ったり、世界中のデーターベースから情報を引き出したいとこれからの技術の進歩により私たちの生活がより便利かつ快適になることが期待されたいます。
本当はもっとたくさんの技術が使われているのですがこれ以上説明すると終わらなくなるのでここら辺で終わりにさせていただきます。これを読んで、「物理部って面白そうだな。浅野の入ったら部活は物理部にしよう」って思ってくれるとうれしいかぎりです。ここまで長ったらしい説明を読んでいただきありがとうございます。</description></item><item><title>高電圧</title><link>https://asanobuturi.github.io/document/2016/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2016/5/</guid><description>えー、今年は顧問の要望もあってページ数が限られています。よって長くなりそうな作品の説明はせず、自分の好きな分野について語らせていきたいと思います。
まず電圧とは何か、ということから始めさせていただきます。まずそもそも電気とは何かと言いますと、電子です。電子とは化学の分野になるので詳しい説明は省きますが、『―』の電気を持っています。小学校低～中学年のころに習ったと思いますが、電気は電源の＋極からー極へと流れています。ですがこれは正確な表現ではなく、実のところ、電子がー極から＋極に流れていっているのです。電子は『―』の電気を持っていますので、『―』が『―』極から出ている、これは言い換えると、「『＋』の電気が『＋』極から出ている」ということです。
さて、ここで電圧の話に戻らせていただきたいと思います。電圧と言うのは端的に言ってしまえば、電子の動く速度です。余談ですけれども、電流とは電子の量です。よくマンガや小説で「電圧が高くても電流が低ければ人は死なない」というフレーズを目にしたことがある人は多いと思います。これはホントの事で、秒速80ｍでＢＢ弾を撃たれても（エアガンの速度です）「あてっ」ってなるだけですけれども、時速80ｋｍ（秒速2ｍ）で岩が転がってきたら死にます。電流が高ければ電圧が低くてもダメージが与えられるというのはこういうことです。
とまあ、電圧と電流の説明はここまでにして、『高』電圧の説明に入って行きたいと思います。
まずどのくらいの『Ｖ』から高電圧と呼ぶかと言いますと、実は厳密には決まってなくて、自分は家庭用コンセントの電圧が100Ｖなので101Ｖ以上が高電圧と考えています。
続いて、高電圧の作り方について説明したいと思います。高電圧の作り方は大きく4つに分けることができます。「部品」「回路」の二つです。
部品については、世の中には『静電気』という数千Ｖに達する自然現象があります。これを利用してエンジンやライターに点火する装置があります。エンジンの点火装置の方は安定性抜群、電圧も高いのですが値段が半端ではありません。大人からすればポンって出せる金額なのだろうけど、高校生の僕では当分色々と我慢しなければなりません。ライターの方は100均で購入して分解すれば手に入るのですが、すぐ壊れて、電圧もそれほど高くありません。これらは割と制御が簡単ですので高電圧初心者にお勧めです。
次に、回路を組んで、低電圧を高電圧に昇圧する方法を紹介したいと思います。この方法はそれこそ星の数ほどあり、紹介しきれないので自分がやったことのある、またはすぐに出来そうなものを紹介したいと思います。最初はタイマーＩＣというものを用いて、コンデンサと言う電気をためられる部品に低電圧を何回も何回もぶち込んで最終的に高電圧を作る方法です。これは回路も簡単ですが、コンデンサにためた電気を発散し損ねると爆発を起こします。取り扱うときは十分注意しましょう。次はコックウォルトンフロント回路です。これは先ほど紹介したコンデンサと、電気を一方方向にしか流さないダイオードという部品をはしご状に組んで交流の入力電源をはしごの数だけ倍加し、直流電流を出力する回路です。
とても簡単で、電流の低い交流電源さえ用意できればかなりの高電圧を用意できます。ただし、コンデンサやダイオードのリード(つなぐ針金みたいなところ)や自然放電の影響もあって10000Ｖくらいまでしか上げることのできません。次にコンデンサを並列につなぎ、ある一定以上の電圧がたまった瞬間に直流になってコンデンサの数だけ電流が倍加される回路があります。これは調節が非常に難しく、うまくいかなかったときの放電はえげつないものがありますし、仮にうまくいったとしても、きれいに倍になるというわけでもない上に、ここまでの電圧に耐えるコンデンサは一般向けに販売されていませんので自作する必要があります。続いては電子レンジの中身を分解したときに出てくるＭＯＴと言う部品をうまいこと接続して高圧高電流を引きずり出すという方法があります。(分解は自己責任でやりましょう。下手をすれば保険が効きません)これは先ほどの回路と比べて、段違いの電流、電圧を取り出せますが、とてつもなく危険です。良くて死亡、悪ければ人相さえ分からなくなります。最後に、回路で最も安全かつ高電圧を取り出せる方法を紹介します。それはテスラコイルと呼ばれるもので、4年前の文化祭でも展示していましたが、これは本来大学の研究室が作るようなもので、お金もかかりますし、作成もとても難しいですが、今までの回路と比べると比較的安全で、ある程度極めると楽器にもなります。
スペースもそろそろなくなってきたのでそろそろ終わりにしたいと思います。本当は高電圧の月道とかも書きたかったのですが、それはまたの機会にということで。
本日は物理部展＠2016にお越し頂き有難うございました。来年もよろしくお願いいたします。
※回路図も乗せたかったのですが、これを参考に作って万一怪我を負ってしまいますと自分は下手すれば退学なので省略させていただきました。ご了承ください</description></item><item><title>四角い頭を痛くする</title><link>https://asanobuturi.github.io/document/2004/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2004/9/</guid><description>今現在、ほとんどの家庭にパソコンは普及しているでしょう。そして、パソコンユーザーならば必ず聞く名前が「マイクロソフト」。実にたくさんのアプリケーションソフトなどを出している会社です。（高くて買えないけど）そして、その会社の採用試験は面接でパズルを解かせるというものらしいです。ここで、過去に出たという問題をいくつか紹介していきたいと思います。
※確信は持てないのでこの文書によって生じた損害についての責任は一切負わないものとします（何！！
問題：マンホールの蓋が四角ではなく丸いのはなぜか。 かんたんかんたん、穴が丸いから。じゃあだめか。ならばゴルフがその場で楽しめるから・・・でもないでしょうね。期待される解答はおそらくマンホールを立てた時に軸が少しでもずれてしまうとマンホールの蓋は闇へと消えていってしまうからとかかなぁ、円の方が運びやすいってのもありかもしれません。
問題：秤を使わないでどうやってジャンボジェットの重さを量るか。 どうするんでしょうね。重さと比較できることをしなければいけませんねぇ。
はっ、そうか。実際に飛ばしてみて高度を一定に保っていられるエンジン出力、速度、などなどを測って・・・ごめんなさい、ムリです。考えてみてください。では、次の問題へ。えっ？答え？はっきり言ってわかりません。最後にぼくが調べているときに見つけた本を紹介するので、気になる人は買ってよんでください。
問題：南へ１キロ、東へ１キロ、北へ１キロ歩くと出発点に戻るような地点地球上何ヶ所ありますか。 まず思いつくであろう点が北極点。他にもあるらしいがわからん。
問題：ビル・ゲイツの浴室を設計するとしたらどうしますか。 自分に設計させる。かんぺき。自分で設計すれば文句はいえないし。
問題：鏡が上下ではなく左右を逆転されるのはなぜでしょう。 目が左右についているから。たぶん。上下についてたら上下が逆転するでしょう。でもそんな生き物知りません。
※俺は知っている！！という人は黙っていましょう。周囲の人がひいていくかもしれません。
※以上の内容は「ビル･ゲイツの面接試験」という本に載っているらしいので興味があったら買ってみて下さい
青土社 http://www.seidosha.co.jp/isbn/ISBN4-7917-6046-8.htm</description></item><item><title>自作OSで文字列をPC98に表示する</title><link>https://asanobuturi.github.io/document/2022/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/10/</guid><description>はじめに 二度目の登場の高2のN.Kです。展示用に作ったものの簡単な解説をしようと思います。
実際の展示 まず文化祭で展示する物を紹介しようと思います。 画像の通りPC98でTHANK YOU FOR COMING TO APCと表示させています。
基本的なプログラムの仕組み ざっくり言うとメモリーの中のテキストVRAMに割り当てられている領域にASCII文字コードを書き込んで文字を表示しています。 一定の周期でコンピュータがテキストVRAMの内容を読み込んでモニターへ送るようになっているので、テキストVRAMに文字を書き込むと書き込んだ番地に応じた画面上の位置に文字が表示されます。
実際のコード 今回はアセンブリ言語というプログラミング言語を使用します。 https://github.com/asanobuturi/PC98APCOS で全体のコードを公開しています。 はじめはフロッピーディスクの情報を指定します。 1行目のJMP entryで文字を書くプログラムの場所を示していますJMP命令はC言語でいうところのgoto文と同じです。
2行目はNOP命令でCPUに何もしないで一命令分の実行時間を消費するものだそうです。なぜこれが必要なのかはよくわかりませんがこれが一般的だそうです。
3行目はブートセクタの名前を8byteで指定しています。ブートセクタとは起動に必要なプログラムや情報を記録したものです。
4行目は1セクタの大きさを指定しています。セクタとは円盤型の記憶媒体の最小の記録単位でフロッピーの場合は512byteなので512を指定します。
5行目はクラスタあたりのセクタ数を指定しています。
クラスタとはOSが記録媒体を管理する際の最小単位で2の累乗である必要があり、今回は1クラスタあたり1セクタとしています。
6行目は予約領域のセクタ数を指定しています。
予約領域とはPCの起動に必要なプログラムのことですなわちこのプログラム自身です。ディスクのはじめにこれがあるので1を指定しています。
7行目はFATの個数で2を指定するのが一般的だそうです。
8行目はルートディレクトリでのファイルの情報が格納されているディレクトリエントリの数をいれています。
9行目はディスクのセクタ数です。フロッピーディスクは2880セクタです。
10行目はハードディスクだと0xf8、リムーバブルメディア(電源が入っている状態でも取り付けや取り外しができるるもの ex:USBメモリ,フロッピー)だと0xf0を指定します。
11行目は一個のFAT(ファイルやディレクトリについての情報を記録する特殊なシステム領域)あたりのセクタ数を指定しています。
12行目はトラックという単位が何セクタで構成されているかを指定しています。普通のフロッピーでは18セクタです。
13行目は磁気ヘッドの数を指定します。
表と裏があるので2です。 14行目はこのボリュームの手前に存在するセクタ数で、パーティションを使っていないので0を指定しています。
15行目はドライブの総セクタ数が0x10000を超えるときにドライブの総セクタ数を指定します。 今回は超えていないので0を指定しています。
16行目はBIOSで使われるドライブ番号でフロッピーだと0x00を指定します。
17行目はWINDOWSで使う領域で当然WINDOWSを使わないので0です。
18行目は以下三行の設定が存在している場合0x29を指定します。
19行目はボリュームを識別するための番号で8桁の十六進数で指定します。
20行目はディスクの名前を11byteの文字列で指定します。
21行目はフォーマットのタイプを8byteの文字列で指定します。今回はFAT12です。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 JMP entry DB 0x90 DB &amp;#34;HELLOAPC&amp;#34; ; ブートセクタの名前 DW 512 ; 1セクタの大きさ DB 1 ; クラスタの大きさ DW 1 ; FATがどこから始まるか DB 2 ; FATの個数 DW 224 ; ルートディレクトリ領域の大きさ DW 2880 ; このドライブの大きさ DB 0xf0 ; メディアのタイプ DW 9 ; FAT領域の長さ DW 18 ; 1トラックにいくつのセクタがあるか DW 2 ; ヘッドの数 DD 0 ; パーティションを使ってないため0 DD 0 ; 総セクタ数&amp;lt;0x10000より0 DB 0x00 ; フロッピーディスクでは0x00 DB 0 ; WindowsNT予約領域 DB 0x29 ; 下の3つの設定が存在することを示す。 DD 0xffffffff ; ボリュームシリアル番号 DB &amp;#34;APC &amp;#34; ; ディスクの名前（11バイト） DB &amp;#34;FAT12 &amp;#34; ; フォーマットの名前（8バイト） 何行目に何をしているかはわかったけどDBやらDDやらDWは何だと思われたかと思います。DBはファイルに1byte書き込むという命令です。DWは2byte、DDは4byteです。 それじゃあDB &amp;quot;HELLOAPC&amp;quot;などのDBのあとに文字列が来るものは何だ、明らかに1byteではないじゃないかと感じると思いますがDB &amp;quot;文字列&amp;quot;とすると文字列を構成するそれぞれの文字の文字コードをしらべて1byteずつ書き込んでくれるようになっています。 また0xで始まる数字はそれが16進数であることを示しています。0x12は10進数で18です。</description></item><item><title>自作PCについていろいろ</title><link>https://asanobuturi.github.io/document/2019/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/5/</guid><description>そもそも自作PCとは 自作PCとは文字通り、自分で作る (組み立てる)PCのことです。よく勘違いしている方がいるのですが、はんだ付けなどの難しい電子工作は一切ありません。自作PCの利点はメーカー製PCにない構成が組めることです。具体的にはRyzen系CPUを搭載したPCはメーカー製ではまだ少ないです。またゲームや画像編集に必須なグラフィクカードを搭載したPCもメーカー製には少ないです。対して欠点は故障した場合PC全体としての保証がないため原因を特定してパーツ単位の保証を受ける必要があることです。この作業はPCに対しての知識が求められ初心者には向いていないと言われる要因の一つです。
パーツを選ぼう PCを組むときはまずパーツ選びから始めます。この作業が組み立ての何十倍も重要です。
この先専門用語が増えますが、このようにお考えください。
コア→おっさんの数
スレッド→ペンの数
周波数→ペンを動かす速さ
ターボブースト→おっさん残業時脳での速さ
ストレージ→引き出し
メモリ→机の大きさ
グラボ→色鉛筆
OS→おっさんの話す言語
水冷式のPC→おっさんを無限に残業させることができる無敵アイテム
マザーボード→おっさんたちの職場
CPU 前述の通り、CPUはPCの脳と表現されます。そのためCPUの性能はPC全体の性能にかかわっていきます。一般PC向けにCPUを製造しているメーカーは基本的にアメリカのIntelとAMDの二社だけです。皆さんの使っているPCの多くはIntel製CPUだと思います。ノートパソコンを使用している方はキーボードの右下あたりをご覧ください。
このようなロゴマークの入ったシールが貼られている場合、それはIntel製CPUを搭載しています。
Intel製CPUと、AMD製CPUを比較するとこのようになります。もちろん製品によって差はありますが、メーカーの一般的な特徴としてお考え下さい。
メーカー
Intel
AMD
コア数
普通
多い
周波数
高い
Zen2以前は低かった
価格
高い(供給不足)
安い
ソフトの最適化具合
基本的にIntelが標準
マザーボード マザーボードに色々なパーツを取り付けることで、各パーツが連携してPC全体が動作します。ここがPCの土台となる場所です。
自作市場のマザーボードは、基本的に台湾メーカーが独占しています。ここでは有名なメーカーをいくつか解説していこうと思います。
ASUS
マザーボード界の重鎮で、BIOSやドライバー系で使いやすいことが有名でシェア率が世界一です。
ASRock
元ASUS子会社で、マザーボード会の変態(褒め言葉)として有名です。また超高耐久なことでも有名です。
MSI
PCゲーマー向けのマザーボードを多く製造しているメーカーです。オーバークロック(CPUなどの性能をブーストさせること)をするときに向いています。
GIGABYTE
ファンコントロールなどのソフトウェアが強く、RGBのフルカラーで光る、かっこいいPCを組むとき向いています。
グラフィックボード グラフィックボード(通称グラボ)は映像処理を担当するパーツです。「グラボのメーカー」という言葉には二つの意味があります。実際にグラフィック処理を担当するチップを製造する企業と、チップやファンを実装したボードとして販売する企業です。チップはNVIDIAやAMDが、ボードは先程紹介したマザボメーカーなどが製造していることが多いです。
組み立て ここではPCの組み立てについて書きたいと思います。
CPUの取り付け CPUの取り付け方法はIntelとAMDで方法が違います。
Intelの場合
CPUソケットのロックを外す。
右側のレバーをとる。
奥まで押せばカバーが開く。
CPUソケットを至近距離から目視して、「ピン折れ」が無いかチェック。あった場合は初期不良のため、すぐ交換返品を依頼する。
CPUを「ソッ」と置く。
ロックを閉じ、カバーを外してCPUの取り付けは完了。
AMDの場合
ロックを外す。
CPU本体の左下にある三角形の印と、CPUソケットの三角形の印をあわせて向きを揃え、「ポトッ」と置く感じで取り付ける。
これでCPUの取り付けは完了です。
メモリの取り付け メモリはCPUソケットのそばにあるメモリスロットに押し込むと装着できます。
ケースへの取り付け ケースへの取り付けはCPUクーラーの取り付けを行ってからにしましょう。
スペンサーをケースに取り付ける。
スペンサーとマザーボードの穴を合わせる。
ねじ止めする。
これでCPUクーラーの取付は終わりです。</description></item><item><title>自作クレーンゲームの考察</title><link>https://asanobuturi.github.io/document/2019/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/9/</guid><description>はじめに 謝罪からスタートの部誌というのもレアだと思いますが、まず、謝らなければならないことがあります。これから書く部誌は、昨年度に2日目の最後の2時間のみ、がばがばな状態で動作した作品についての考察になります。昨年度来ていただいた方には、1年越しになりますが、パンフレット等で宣伝しておきながら申し訳ありませんでした。
というわけで。どうも、高校2年生の部長です。4年目の部誌は、昨年度のクレーンゲームについての考察になります。主な内容は考察なので、電子工作について多く語るというわけではありませんが、読んでくださるならば、嬉しい限りでございます。
作ることになった経緯 作ることになった経緯ですが、興味半分、周囲からの圧力が半分、だったような気がしているような、していないような気がします。興味があって、自作できるのであればやってみたいなという気持ちはありました。そして、調べものをしているうちに、とある方のブログに飛び、そこに貼ってあった動画も何度も見返して、参考にしながら作れるかもしれないと思いました。物理的に実現可能かどうかの意味で、です。中学3年生になり、上の学年がいなくなって、電子工作班は自分にまかされたような、そんな境遇でしたので、一つくらいは大きな作品、要するに、目玉となる作品を作らなければいけない。そんな使命感にも駆られていたのでちょうどいいか、そんな気分でした。
正直なことを言うと、会計と副部長を9月から一気に任され、文化祭のメインたる仕事も後々任されるようになるだろうと思っていたので、あまりよい予感がしてなかったことは、当時からありました。また、メインである筐体の作成も、部室がより自由に使え、資材も届く夏休みに入ってからなので、正直言ってかなり厳しく、辛い1年でした。
なので、実際に製作に本格的に取り掛かり始めたのは、1学期の期末考査後、というわけになります。わかりやすいように手書きのイラストも載せながら書きたいと思います。パソコンで書くよりはるかに速いので、手書きになりますがよろしくお願いします。
クレーンゲームとは? タイトルからして、わからない人のために感がありますが、そうではございません。自作するにあたって考えなければいけないことなどをまとめます。ページ数等の関係もございますので、クレーンゲームについては既知であることを前提にお話します。右の写真のやつですね。
様々なものを思い浮かべられると思いますが、ゲームセンターに行けばよくある、100円入れて、「右側」と、「奥側」に動かす、よくあるようなものを自作します。皆さんの中にも、保護者の方と一緒にゲームセンターに行って、お金をもらって、100円玉を何枚も無駄にした人もいることでしょう。クレーンゲームは、ボタンを押すだけですが、コツがあったりするので、はまる人にははまるでしょうね。あのアームの力の無さには、詐欺か？というくらいのものもあって、なかなか景品も取れないですよね。
今回の部誌では、便宜上「右側」のこと、すなわちプレイヤーから見て横方向のことを、「x軸」と定義し、「奥側」すなわち、プレイヤーから見て縦方向のことを「y軸」と定義します。また、下方向に自動で動く「下方向」のことを、「z軸」と定義して、今後の話を進めることにします。図を載せるので参考にしてください。図の上の方の斜線部は、クレーンゲームの機構があるところです。下手な絵ですが、一応クレーンゲームの構造を理解していただき、x軸、y軸、z軸がどこのことを指しているのか、矢印も参考にわかっていてくれたら幸いです。
要は、あのような動きを自作で再現できればよいのです。端的に言ってしまえば、100円を入れるかどうかを別にすれば、クレーンゲームの自作のとりあえずの目標は、
ボタンを2つ用意し、1つ目を押している間は、x軸方向に動き、2つ目を押している間は、y軸方向に動き、あとは自動でz軸方向に適切な距離下がって、アームを広げて元に戻し、z軸方向の上方向に上がりながら、元居た位置まで戻って、アームを広げればよい。
ということになります。「何言ってんだこいつ?」という人もいるでしょう。わかる人には、言葉にしてみればそれだけのことか、という意見を持つ人もいるでしょう。まぁ、自分の国語力の無さも相まって、本当に何言っているのかわからない人のほうが多いと思うので、これから解説していくつもりです。
あの文章を読み解くと、どうやら、大事そうなのは、x軸、y軸、z軸、アームの4つほどですね。実際問題、制御をする、という観点で非常に大事なのは、この4つです。お金を入れたら動かすことのできるという点を加えれば、5点になるのですが、最後にまとめるとして、上の4つについてまとめることにします。自分にとっては4つとも難題ばかりでした。
難題なのは、上記4つなのですが、それ以外にもクレーンゲームを語るうえで、筐体、というものは非常に大事になってきます。筐体というのは、外側の枠や、景品が出てくるところなどの動作をしない部分です。予算面や、時間の都合により、外枠しかできなかったので、外枠ということにしておきます。また、動作させるためには回路も作らなければいけません。回路については参考文献に載ってあるものや部品のデータシート、サイト等を活用しパズルのように組み合わせて独自のものを作りました。なので、オリジナリティはほぼ皆無です。また、回路自体も複雑ではなかったので、回路は一番簡単でした。まずは、それほど困らなかった外枠についてから行きたいと思います。
材料 使う材料をまとめておきます。
角材（4ｍで500円くらいのものです。）
ベニヤ板
キャスター
L字金具
木ネジ
ワッシャー
PPシート(ダイソーで売っています。)
アルミニウム板(ダイソーで売っています。)
ボルト(小さいモノ。アーム用)
基板
/ダブルギアボックス x 4
メタルギヤサーボモーター
Arduino(必要なピン数によってUnoなのか、Megaなのかなどが変わります。)
ボタン(クレーンゲームに使われているボタンも市販されています。) x 2
モータードライバー TA7291P(ギヤーボックスに使われているDCモーターの数)
抵抗器 10kΩ、1kΩ
マイクロスイッチ(リミット用)
ACアダプタ(6V、1.8Aに近い値の物。大きすぎるのもよくない。)
銅線
その他、クオリティをあげたければ、装飾するためにペンキを追加したり、クレーンゲームの機構を、チェーンを使ってやる場合には、DCモーターの代わりに使ったり、クレーンゲームの外枠に大きなアクリル板をつけて本物に近くすることもできます。ただ、今回使った材料はこんなもんです。サイズ、個数等は、自分の作るものに合わせてください。そのために個数表記、サイズ表記していないものもあります。
外枠(筐体) 外枠は上記4要素よりは比較的楽に製作できました。苦労したところはというと、運搬の問題です。エレベーターに入るように大きさを調整する必要がありましたので、大きさをy軸方向に少し小さくしたかなぁ、という感じです。わかりやすく言うと、幅がおそらく普通のものより若干薄いです。
それでも、それなりに大きさはあるので、一人で組み立てるのは非常に大変でした。運搬の問題から、筐体の底にはキャスターも付けました。大きさは、確かキリよくx方向y方向z方向で、1200×600×1800（㎜）で作ったと思います。その底に、キャスターをつけた、という感じです。
4隅に柱を4本、180センチの角材を切り、それに合うように、60センチ×120センチにL字金具などを使って、角材で角なしの長方形（図）を4つ作って、強度を持たせました。サイズが大きいので、難題ではありませんでしたが、何分加工には時間がかかるので、これが出来上がったころにはすでに8月に入っていたような気がします。
X軸(横方向) 難題その1、x軸です。x軸を動かすだけだと思っても、y軸を動かせるように、また、同時にz軸も動かせるように、機構を乗せながら横方向に動かす必要があるので、まずは、このx軸をしっかりと動作させなければいけません。yとzがうまくいってもxが動かなければ意味がありません。筐体の時に作った、60センチ×120センチのものを一つ、x軸のレールとします。その角材の上を、ボタンを押したら、押した分だけタイヤがy軸とz軸の機構を乗せて動けばおしまいです。
ここで難題なのは、4か所にギヤーボックスを取り付けたので、4か所の動きを同時に行わないと、まっすぐに動かず、また、落下防止の柵にかかって、動作が不安定になってしまいます。モーターの制御する数も、4つになり、回路もプログラムの方も複雑になります。実際のところ、x軸もうまくはいきませんでした。モーターの数を増やせば、火力も増えるのですが、少しでもずれるわけにはいかないのにもかかわらず、動作は、どうしても不安定です。後日リベンジしようと思って試作したら、モーターは1個のほうが安定でした。そのほうが回路も複雑でなくずれも生じにくいです。ただし、端っこの方にタイヤが引っかかると詰まってしまうので相も変わらずx軸については安定さが一番の課題です。その辺はさらに考える必要がありそうです。また1個にする場合には、スピード、パワー面の問題が出てきてしまいます。なので、モーターの個数問題もかなり頭を悩ませます。
また、x軸では移動する距離には限界があるので、リミッターというものが必要です。端っこにスイッチをつけておいて、押されたらモーターがこれ以上動かないようなプログラムを書いてもらいます。そうしたら、動きすぎるということがないのです。これをリミッターと呼ぶことにします。
x軸は、モーターを一つにして制御するか、チェーンを使うほうがいいと思いました。
Y軸(縦方向) 個人的には、y軸のほうが、x軸で乗せた機構の上をただ、車みたいなものが走るだけなので、一番簡単だと思っていました。実際、x軸、z軸よりは構造は単純で、4要素の中では一番簡単だと思います。しかし、実際に動かす際は構造が雑になってしまい、x軸とz軸だけで動かしていました。
y軸についても、z軸の機構を乗せて動作する必要があるので、それなりの力は必要ですし、バランスなども安定させる必要があります。y軸の最も難しいところは、z軸との連携です。z軸がなかなかの曲者なので、y軸は縦方向に動かすだけではなく、z軸の機構をともに動かす必要があるところが、y軸の最も難しいところでもありました、自分の場合は。結局のところ、最後の2時間で、y軸抜きで動作させたらうまくいきそうだったので、y軸は動かしませんでした。
ちなみに、y軸にもx軸同様にリミッターが必要です。
y軸もx軸同様に、チェーンを使う方法があったりしますが、車のように走らせるかチェーンのどちらかでしょう。お金はかかりますが安定性、成功率というものを考えるとやはりチェーンのほうがいいと思いますね。
Z軸(上下方向) 最も曲者だったといっても過言ではありませんでした。上下に高度を変えるということが、今の自分の技術力でどれだけ大変だったものか。
Z軸の存在理由は、アームの位置を下げて上げることにあります。アームを上げ下げするのには、基本的に糸のようなものが使われます。どれだけ参考となる動画を見ても、記事を調べても、糸を巻き取るようなものが主流でした。そして、そうすることが、自分の技術力では、一番厳しかったのです。「はじめに」で書いたように、試行錯誤する時間はそれほど残されてはいませんでした。物を注文するにも時間がかかり、あるもの、ないしはすぐに購入できるもので済ませる必要もありましたので、z軸をやるころにはいろいろと焦りが見え始めていました。回路が意外にも早くできた分、やはりクレーンゲームは制御が難しいです。
ギヤーボックスの両側を太くして、そこに糸を巻き取る方法。プーリーを使って巻き取る方法、ギヤーボックスの片方で巻き取る方法など、いろいろあって、自分がやりやすいと思う方法でやることにしました。後々考えてみると、プーリーを使う方法のほうがやりやすそうなのですが、当時選択したのは、ギヤーボックスの両側に巻き取る方法。個人的には全くお勧めしません。片側だけで巻き取ったほうが圧倒的に楽です。傾きづらくもなるので。
ただし、z軸は機構を考えるのに時間がかかった割には、雑だったのですが、それなりの成果を見せてはくれました。とても完璧に近い状態ではなかったのですが、z軸が動かなかったらどうしようもなかったので、最後の2時間は一安心していました。
ちなみに、糸は、アームに使われているネジかなんかに引っ掛けると、持ち上がります。
アーム アームは、どちらかというと、加工が大変です。これまた、様々なタイプがあり、自分で作りやすそうだなぁ、と思ったものを作るまでです。加工は、薄いアルミ板と、ダイソーで購入したプラ板だけです。アームの部分のメインはプラ板です。PPシートって書いてあったような気がします。ダイソーに行ったらPPシートというものを買うと同じように工作ができます。アルミ板もダイソーには売っています。薄くて、裏側にテープが張ってあるもの限定ですが。
アームもそれっぽい形のものを、PPシートを加工して作ります。ネジやワッシャーも使います。ワッシャーではなく、スペーサーで代用しても構いません。ワッシャーのほうが、融通が利くかなぁと思い、高いのですが、ワッシャーを使いました。
アームは、メタルギヤサーボモーターという部品を使って開閉させます。この開閉の際も様々な方法があり、かなり苦労しましたし、結局動かした時は開閉しなかったと思います。動画を見ていると、楕円をサーボモーターにつけてアームの開閉をする方法がありました。その当時どのような方法で開閉をさせようとしたかはよく覚えていませんが、後日楕円を切ってみると、ちゃんと固定すればしっかりとした動作をしそうだなぁ、という印象がありました。しそうだなぁ、ということなので、本当にできるのかどうかはわかりませんが、正常な動作に一歩近づいた気がしました。要するに、アームの一番難しいところは加工が大変と書きましたが、アームがしっかりと開閉するように加工することが大変なのです。どのように開閉するかを考えて加工しなければならないので、z軸よりも曲者だったかもしれません。自分の場合は、前日までアームの開閉がそれなりにうまくいっていたものを当日になってサーボモーターが壊れてどうしようもなくなったため、あきらめたという感じです。楕円っぽい形のものをつけていたような気がするので、それなりな動作をしたのでしょうかね。今となっては謎です。ちゃんとやろうとすれば、こいつが一番の曲者かもしれません。ほとんど、動画を参考にしたやつをまねただけなので、z軸よりは考えずにとりあえず大量に加工していたのですが、1から考えて作るとなると一番の厄介者でしょう。ただし、アームに関しては市販されているものもあるので、購入してしまえば、やはりz軸が一番の曲者に違いありません。
サーボモーターが壊れた件については、文化祭の当日で何の前触れもなかったので、本当に踏んだり蹴ったりでした。文化祭当日ですら、フロア装飾の仕事があったりしたので、本当にもう…。
回路(モータードライバーTA7291Pの詳説) なんだかんだ言って、回路が最も簡単に、そしてうまくいきました。何度も言いますが、制御、機構のほうが圧倒的に難しいのです。回路は、2つほどの記事を参考にして、作りました。</description></item><item><title>自作コンパイラを実装してみた</title><link>https://asanobuturi.github.io/document/2021/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/10/</guid><description>はじめに こんにちは、高二の中野です。今回の部誌では、コンパイラについて紹介してみたいと思います！自分自身昔からコンパイラに対して「難しそう」みたいな偏見を抱えていて全く触れてこなかったのですが、ふとしたきっかけで自作Cコンパイラについて体系的にまとめているサイト(参考文献に載せておきます)を見かけて覗いたところ、「意外といけそう」と思ったので軽く始めてみたらハマってしまったという次第です。ところどころ至らない点があると思うので、もし不明な点や疑問があればこのメールアドレス( s2017197@asano.ed.jp )に連絡してください。
対象読者 C++, Pythonなどのメジャー言語で基礎的なコードが書ける人。ある程度人のコードが読める人。今回の部誌は扱う内容がかなり学問的というか高度なので、細かいプログラミング言語の文法などは説明しないのでご了承ください。同様に小学生がこれを読むのもあまりおすすめしません。受験勉強してください。逆にこの条件から外れた方々にとっては割と楽しめる内容かと思います。わからない用語・関数などが出てきたら適宜自分で調べてみてください。コーディングにおいて自分のほしい情報を限られた時間でインターネット等で見つけるのは大事な能力です。ちなみに私はC++のリファレンスを参照する際には cpprefjp(https://cpprefjp.github.io)を主に使っています。
コンパイラとはなんぞや ではここから実際にコンパイラとは何かを説明しましょう。 Wikipediaにはこのように書いてあります。
コンパイラ（英: compiler）は、コンピュータ・プログラミング言語の処理系（言語処理系）の一種で、高水準言語によるソースコードから、機械語あるいは元のプログラムよりも低い水準のコードに変換（コンパイル）するプログラムである。
有名な話かもしれませんが、コンピュータは0と1の羅列(2進数)をデータとして扱い、それをもとに計算などを実行しています。要は、コンピュータは0010100110011001010101000などのような我々人間にとって一見摩訶不思議に見える数字の羅列を用いています。一方、我々は普段日本語や英語などの自然言語を用いています。この人間とコンピュータの通訳係となってくれるのがコンパイラです。大半のプログラミング言語は人間にとってある程度の可読性が担保されています。もちろん、我々はコンピュータを利用するためにさっきの0と1の羅列を自分でキーボードで打つわけにはいけませんよね？その、割と人間寄りいわば自然言語寄りのプログラミング言語をコンピュータが理解できるように0と1の羅列に変換するのがまさにコンパイラの仕事なのです。 コンパイラの仕組みを理解することできっとあなたはコンピュータと、より親しくなれるでしょう！
コンパイルの手順 前章ではコンパイラの概要について説明しました。ここから詳しい話に移りたいと思います。まず簡潔に言うと、コンパイラは以下の4つのフェーズを踏んで実行されます。
1.字句解析
↓
2.構文解析
↓
3.アセンブリコードの生成
↓
4.生成したアセンブリコードをバイナリに変換する
これだけだと分かりづらいと思うので具体例を出して説明します。今 int main(){return 0;} というC言語のソースコードをコンパイルしたいとします。当然コンパイラへの入力形式は 文字列 です(C++で扱うとしたら const char*やstd::stringのような型を用いるでしょう)。しかしコンパイラからしてみると、文字列の状態だと大変扱いづらいのです。プログラムによってはint main () { return 0; /*hogehoge*/} のような本来コンパイルする際には不要な空白やコメントがついている場合もあります。それを除去してよりソースコードの本質を抽出するような処理が1番目の字句解析です。このプログラムの場合、ソースファイルは [int,main, (, ), {, return, 0, ;, }] という一つずつが意味を持った 字句(トークン) の配列に変換され、コメントや空白なども全て無視されます。こうすることで、2番目以降の処理が格段にやりやすくなるのです。次にこのトークン配列を 構文解析木(AST) という 木構造 に変換します(なぜこのようにする必要があるのかは後ほど説明します)。この工程を文字通り　構文解析と呼びます。そして、その構文解析木を元にアセンブリコードを生成して、そのコードを機械語(バイナリ)に変換(アセンブルといいます)すればコンパイラの仕事は終わりです。字句解析の過程は比較的に簡単なので、ページ数的に ここでは省略したいと思います。では次章からさっそく構文解析から実装していきましょう！ちなみに今回はすべてC++で実装しています。
開発環境 今回私はVisual Studioでコーディング&amp;amp;ビルドし、生成したアセンブリコードは WSL(Windows Subsystem Linux) というWindowsマシン上でLinux(Ubuntu)が動く的な仮想環境上で実行ファイルにアセンブルしました。ちなみにビルドする際は x86 ではなく x64 でビルドしてください。 x86 だとなぜか WSL の呼び出しに失敗します。</description></item><item><title>自動演奏装置について</title><link>https://asanobuturi.github.io/document/2017/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2017/3/</guid><description>今回は今年作った「自動演奏装置」について書いていきたいと思います。去年作ったリコーダーのリベンジですね。去年に比べてそれなりのものができたと思います。いやぁ、去年は酷かった。ずっと尺八吹いてるみたいな感じになってしまいました。教師にもその後の授業でなんか言われるしあれでしたんで
今年は色々と改善&amp;hellip;というか根本から見直しして作り直しました。まあ、ともかく物理部展#2017をよろしくお願いします
製作動機 一番は去年のような無様な真似はしたくないというのが一番でしょう。去年の敗因はリコーダーの穴をしっかり抑えられなかったのと、空気をただ吹き込んでも音が出るということだと思います。それを防ぐために、もっとも効果的な策はリコーダーを諦めるということでした。というか去年とある動画を丸パクし過ぎました。
そこでたどり着いたのが「メロディオン」です。空気をただ流し込んでも音もでない、鍵盤超押しやすい、和音もでる。リコーダーに何一つ劣っている点がないね！！
というわけで、メロディオンを用いた自動演奏装置を作ることに決めたのです。
材料 ソレノイド × 32個 2SK2233 × 33個 150Ω × 33個 22kΩ × 33個 リレー × 1個 TLP627-4 × 9個 Arduino Mega 2560 × 1 エアーコンプレッサー × 1 メロディオン × 1 木材 × 適量 バルブ × 2個 PC x 1個 愛情 × ∞（ムゲンダイ） 部品の説明 ソレノイドとは、電磁石の力で鉄の棒を上下させる部品です。鍵盤を押す部品ですね。2SK2233はトランジスタ(のようなもの)です。Arduinoから出力される電流が小さいのでそれを増幅する部品です。150Ω、22kΩは抵抗です。電流の勢いを落とします。安全装置ですね。リレーは遮断装置です。バルブに流す電流がすごいので、それを使って処理回路と遮断します。
TLP627-4は安全装置です。Arduinoは繊細な部品なので、それを守ります。Arduino Mega2560は処理装置です。PCから出力された音楽の信号を電気信号に変えます。エアーコンプレッサーは空気送り機です。メロディオンに空気を供給します。メロディオンは楽器です。愛情は説明不要でしょう。愛なくしては原因不明のエラーに耐えられません。
How to 動作 パソコンで楽譜データを数字に変換(俗に言うMIDI)し、その数字をArduinoに送り、Arduinoでこの数字のときはドの音、この数字のときはレの音&amp;hellip;&amp;hellip;と先に教えておいて、その数字が来たら、その音を出す鍵盤を押すソレノイドに信号を出します。
実際はArduinoとソレノイドの間には安全装置と増幅装置を挟んでいます。後、和音のときや極端に低い音の時などはバルブにも命令を出し、流れる空気の量を増やすようにしています。
回路図 Anduino に書き込んだプログラム 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #include &amp;lt;MIDI.</description></item><item><title>深層強化学習によるリバーシAI</title><link>https://asanobuturi.github.io/document/2021/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/4/</guid><description>はじめに いわゆるAI（人工知能、artificial intelligence） というものは実はかなり定義があいまいです。比較的しっかりした説明をしそうなWikipediaでさえ、「～ともされる」「～もこう呼ばれることがある」と、なんとも歯切れの悪い説明をしています。要約して説明するなら、「『コンピューターで人間の知能を再現してみよう』という分野（またはそれの研究対象）のこと」といったところでしょうか。 『AIがこれからの社会で～』『我々の仕事はAIが～』といった言葉はよく聞きますが、多くの人はぼんやりとしたイメージしか持っていないと思います。注目されていると言われている「AI」とはどういった仕組みで、何ができて、何ができないのでしょうか。そういった疑問から自分の手で実際に簡易的なものを作ってみて理解を深めたいと思い、この記事を書きました。この記事を読んでそういったことが伝われば幸いです。
この記事は自分で理解を深め、知識を確かめるために書いたものでもあるので、何も知らない状態では理解しづらい文、数式が多く含まれると思われます。また、内容に誤りも含まれるかもしれませんので、ご了承ください。
強化学習とは 概要 強化学習（reinforcement learning） はAIが学習をして知識を獲得する機械学習（machine learning） の手法の1つです。強化学習の特徴はその学習方法にあります。別の機械学習の手法であり、画像認識などで用いられる教師あり学習（supervised learning） と比べてみましょう。 教師あり学習では、前もって用意された問題（入力）とそれに対する解答（出力）をセットにした教師データを使って学習を進めます。人間が何かを学ぶ時のように、自分の出した答えと解答を見比べて、誤差を修正して学習するわけです。しかし実際の場合には、学習すべき問題が多すぎる、もとになるデータベースがない、そもそもこれといった圧倒的な正解がない、といった理由で十分に教師データを用意できない場合があります。 このような場合に対応しやすいのが先ほどの強化学習という手法です。強化学習では教師データをまったく必要としません。代わりに学習をする対象である環境（environment） に対してランダムな行動を繰り返すなどして試行錯誤を重ねます。すると環境から良い行動には報酬（reward） が、悪い行動にはマイナスの報酬である罰（punishment） が与えられて、それをもとに教師データの代わりとなる知識を自ら作り出すことができます。なので、なにかのスコアといった数値的な報酬に変換しやすい要素を最大化させるなどの行動を学習したいときに有効であると言えます。また、ランダムに試した行動がうまくいったかを学習するため、人間が思ってもみなかった答えを編み出すこともあります。 今回はその強化学習の手法のうち問題解決のためにどういった行動パターンをとればよいか学習をするQ学習（Q-learning） というものについて考えてみます。
Q学習の仕組み Q学習ではある状態（situation） における行動（action） の評価値となるQ値（Q-Value）（統計学の用語）というものを学習します。学習を通して、ある状態でのある行動が良いかどうかを正確に判断できるようになれば、すなわち評価値であるQ値を適当に出力できるようになれば学習成功ということになります。良い行動かどうかというのは、環境から与えられる報酬（マイナス値の報酬である罰を含む）のみによって判断できるので状態\(s\)における行動\(a\)のQ値を\(Q(s,a)\)と表すと、環境から与えられる報酬\(r\)を用いて以下のように\(Q(s,a)\)を更新すればよさそうです。 \[Q(s,a)=Q(s,a)+r\] しかし実際にすべての行動に報酬や罰を与えられることは少ないです（もし与えられるなら教師あり学習のほうが良いかもしれません）。サッカーやバスケットボールなどの球技を環境の例として考えてみましょう。これらのスポーツでは「シュートを成功させる」という行為には点（＝報酬）が与えられます。しかし、「ゴールの近くでパスを受け取る」という行動はそれ自体に対して点は与えられません。ですが、一連の流れで見ると「ゴールの近くでパスを受け取る」という行為は点に強く結びつく行動であり、高い評価を与えられるべき行動だと考えられます。なのでこういった行動を「ほぼ点が入ったようなもの」とみなして時刻\(t\)におけるQ値を次のように更新してみることにします。 \[ Q(s_{t},a)=Q(s_{t},a)+(r+maxQ(s_{t+1},a')-Q(s_{t},a)) \] なにやらごちゃごちゃと式が増えましたが、やっていることはそこまで複雑ではありません。\(maxQ(s_{t+1},a')\)というのは時刻\(t\)に状態\(s\)で行動\(a\)をとった後に、時刻\(t+1\)においてとれる行動のQ値の最大値を表します。つまりこれまでの報酬に加えて、「高いQ値のある状態に移行すること」そのものを報酬として与えるようにしています。しかしそういった状態に移行しても必ずしもその高いQ値の行動をとれるとは限りませんし、何よりたくさん更新を繰り返していくとQ値が発散してしまうので、割引率\(\gamma (0&lt;\gamma&lt; 1)\)を用いて更新式を次のように変更します。 \[ Q(s_{t},a)=Q(s_{t},a)+(r+\gamma maxQ(s_{t+1},a')-Q(s_{t},a)) \] 割引率\(\gamma\)は時系列的なつながりの強い場合には1に近く、弱い場合には0に近く設定されます。これによってその後の行動との関係性の強さを設定できます。 また、実際に学習を進める場合にはすべてのQ値をランダムな値で初期化してから、「もっともQ値の高い行動をとる」などのように設定し、偶発的な報酬や罰に左右されないように何回も更新を繰り返して少しずつQ値を修正します。なので1回の更新が与える影響を減らすために学習係数\(α\)を用いて更新式を次のように変更します。 \[ Q(s_{t},a)=Q(s_{t},a)+\alpha(r+\gamma maxQ(s_{t+1},a')-Q(s_{t},a)) \] これで一般的に用いられている更新式の完成です。上記の内容を大雑把にまとめます。
環境によって報酬や罰が与えられる場合はその行動のQ値がそのまま決まる そうでない場合は移行先の最高Q値を割り引いた値を、その行動のQ値にする 学習開始時はすべてのQ値はランダムに初期化され、だんだんと修正をして学習をする 深層学習とは 概要 昨今のAIブームは第三次と言われていますが、その火種となったのが深層学習（ディープラーニング、deep learning） という技術です。これは主にもともとあったニューラルネットワーク（神経網、neural network） のパーセプトロン（Perceptron） という手法を発展させたものを指します。ニューラルネットワークは人間の脳にある神経細胞のネットワークをコンピューター上で数学的に再現を試みる、というものです。ニューラルネットワークは特定の入力に対して特定の出力をするという条件を複数同時に満たすことのできる関数を作成できたりします。なのでニューラルネットワークは知能が関数で表現できることを前提にした上で、その知能を神経細胞を模した関数の集合によって再現してみるという試みとも考えられると思います。もし実在する複雑な問題に対しても関数化が完全に可能になれば、いろいろなことができるようになると考えられます。 最近になってから注目を浴びているような印象がありますが、実はニューラルネットワークの歴史自体はとても長く、人工知能研究の歴史の中でも比較的初期段階から研究されていた手法です。しかし近年のコンピューター技術の発展によりニューロン（神経細胞、neuron） の数を容易に増やすことができるようになり、より複雑なネットワークを形成することができるようになったため、ニューラルネットワークの発展的な分野である深層学習等の研究が加速したといえるでしょう。ニューロンの数を増やすだけでなく、そのネットワークの形を工夫する畳み込みニューラルネット（convolutional neural network） などの研究も進んでおり、その最たる例であるGoogleなどの画像認識等の技術には目を見張ります。
ニューラルネットワークの構造 ニューラルネットワークはニューロンが集合して形成するものなので、まずはニューロンとは何かというところから説明します。 ニューロンはそれぞれの入力に対応する重み（weight） という係数と、しきい値（threshold） という係数をもち、複数の入力に対して計算をした結果を伝達関数（活性化関数、transfer function） に代入して主に単一の出力をします。これを数学的に表すと、 $$o=f(\sum_{i}x_{i}w_{i}-v)$$ $$（o:出力　x:入力　w:重み　v:しきい値　f:伝達関数）$$ となります。すこし分かりにくいですが強化学習の式よりもやっていることは単純です。それぞれの入力の値がどれほど出力に影響されるべきかを決定する重みと入力を掛け合わせたものが\(xw\)です。なので\(\sum_{i}x_{i}w_{i}\)というのは入力に重みをかけたものをすべて足し合わせるということなので、入力から取得できる情報を、何が重要か判断して取捨選択するという側面があります。 その合計値からしきい値を引き、伝達関数に代入したものが出力となります。しきい値には誤差などの比較的小さな情報を無視するようにする効果があります。伝達関数にはいろいろな関数が使用され、それぞれで効果は違いますが、極端に小さな値や極端に大きな値の影響を小さくするといった効果のものがあります。また、誤差逆伝播法（後述）に、この伝達関数の微分が深く関わっているため学習の精度や速度に直結する部分であると言えます。一般的には $$y= \frac {1}{1+e^{-x}}（シグモイド関数）$$ $$y=\left\{\begin{array}{ll}x &amp;amp; (0 \lt x) \\0 &amp;amp; (x \leq 0)\end{array}\right.</description></item><item><title>人工知能(AI)について</title><link>https://asanobuturi.github.io/document/2004/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2004/5/</guid><description>人工知能(AI)について人工知能とは（AI）(Artificial Intelligenceの頭文字を取ったもの)とも呼ばれます。
人工知能はダートマス会議1の中で出席者であるジョン・マッカーシー2らによって命名・定義されました。
人工知能の定義とは、大別して以下の二つに分けられます。
（広義）
&amp;ldquo;コンピュータシステム等に知的な活動をさせることの総称&amp;rdquo;
（狭義）
&amp;ldquo;知識や推論等を用いて行う処理&amp;rdquo;
具体的には，人間の行う自然言語を理解したり，論理的な推論を行ったり，
経験から学習したりするコンピュータプログラムを言います。
（家庭用電気機械器具の制御システムや，ゲームの思考ルーチンなど。）
人工知能は未だに研究が進められています。
特定分野の専門知識をデータベース化して推論を行わせ、その分野の
専門家と同等か、それに近いレベルで問題を解決し判断を下させる
「エキスパートシステム」というものがありますが，このシステムの
実用化には、暗黙に人間が持つ常識の記述が必要となるため，
現状では実用化は難しいといわれています。
また、大量の蓄積データを解析し，その中に隠されているデータ同士の
相互関係，パターンなどを探し出す技術のことを「データマイニング」
といいます。
例えば，「パンを買う人は牛乳を買うことが多い」「ある会社の株価が上がると他の会社の株価も上がる」等。
ただ、これも現状では実用化に向けての研究が進められている
途中であるといわれています。
人工知能、もしくは，人間と同じような知性を持ち，人間と同じような
動きをするものといわれれば，アニメや映画の世界では当然のように
存在しています。
日本のアニメ史上有名な鉄腕アトムはまさにそうでしょう。
天馬博士によって製造され，「成長しない」という理由からサーカスに売られ，
お茶の水博士によって助けられ，育てられた。そして，時にロボットとして
差別を受けながらも、敢然と悪に立ち向かっていく・・・
とてもロボットとは思えないほど人間らしいですね。
原作中のアトムは，怒りもすれば、笑いもします。
ただ，これを「感情」と称するのは，私は少し抵抗がありますが・・・
他には、「ドラえもん」も有名ですね。
２２世紀からやってきて，様々な道具を使いのび太くんをサポート（？）
するロボットです。
ところで，設定上ドラえもんが作られたのは今から１００年以上
後になるのですが，アトムが作られたのはなんと２００３年なのです。
現時点でも動く人型ロボットはあるにはあるのですが，
性能ではアトムには遠く及びません。
作られるのは相当後でしょう。ドラえもんなんてもはや絶望的な気がします。そもそも四次元ポケットってなんだっつーの。
ただ、その一方で、「ロボットペット」と呼ばれるものは既に
開発，発売されています。
代表的なものにSONYが作ったAIBOがあります。
ロボットでありながら様々な動きが出来るということで今でも
人気があります。
一緒に遊んだり，しゃべったりすることも出来ます。
ただ，やはり人型ロボットの実用化にはまだ時間がかかりそうです。
ところで、ちょっと前に「感情と称するのは，少し抵抗がある」と
書きましたが，これには自分なりに考えた理由があります。
私は「機械は感情を持たない」と考えています。
怒ったり、笑ったりしても，それらは所詮人の手によってプログラムされた物だと思うのです。
時々機械が暴走するといわれることがありますが，これは
プログラム上の欠陥、つまり「バグ」によるものと考えています。
これは感情とは呼べないでしょう。
ちなみに，これはあくまで私個人の考えであるのでご了承ください。
最後に，これを書くにあたり参考にさせていただいたウェブサイトの紹介をしたいと思います。
人工知能研究所
http://www.aurora.dti.ne.jp/~jongleur/
IT用語辞典 e-Words
http://e-words.jp/
１９５６年、米国のダートマス大学で開催された。正式には&amp;quot;DartmouthSummerResearchProjectonArtificialIntelligence(人工知能に関する夏季研究会)&amp;ldquo;と呼ばれている。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
１９２７年ボストンに生まれた人工知能研究の第一人者。１９７１年にチューリング賞を受賞している。ここまで読んでくれた人，有り難うございました。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>世界一小さな物語</title><link>https://asanobuturi.github.io/document/2018/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/2/</guid><description>注意:このレポートは筆者の力量不足で非常に読みづらい上、中身も一般的に難解とされています。クオリティとしてはこれを読んでもせいぜい内容が分かった気になれるくらいのものです。それでもかまわない方はこのまま読み進めてください。
序章 今手元にコップか何かに入った水があるとしよう。その水は \( \ce{H2O} \) 分子の集まりである。さらに各分子は酸素原子と水素原子二つに分けられる。また、その原子も陽子と(水素原子の大半以外は）中性子からなる核と電子に分割できる。物理的な意味で、物質は我々の手でここまで分解できるのである。だが、実際のところ陽子と中性子はさらに細かい部品からなっていることが分かっている。もっとも、この部品レベルに陽子と中性子を分解することは不可能ではあるが。要するに下図のとおりである原子の中心は陽子と中性子8つだが、描くのが面倒なので略されている。
こういうサイズになると、物質は直観では想像できないような振る舞いをする。たとえば、何かの拍子に壁をすり抜けられたり、実際に粒子がどこにあるのかは知ることができなかったりとかするわけだ。こういうのを見ると寒気がするタイプの人も多いと思うが、もちろん私は一目ぼれである。だからこそ知ったかぶり然とした内容でもこれを書きたくなってしまうのである。というわけで、これから私は小さな「別世界の」話をしようと思う。
原子、そしてその欠片 原子の存在に行き着く経緯については、「ブラウン運動」とか、「ティッシュに撃ち込んだ弾丸が跳ね返ってきた」とか、語りたいことが腐るほどあるが、残念ながらそんな余白など与えられそうにないので割と大事なその二つについて軽く語ってあとは検索してもらう、という方法をとることとした。
ブラウン運動は水の入ったビーカーに微粒子を入れると「無作為に」運動する現象だが、それを説明したのは実はアインシュタインだったりする。実はこれ、水分子が微粒子に衝突して起こっているというのである。実際に原子を見せるなんて真似ができなかったことから、実はアインシュタインによりこれが説明されるまでは原子説は実証されていない、というわけで20世紀までは原子説は今ほど広まっていなかったのだ。彼はこの論文を出した年に他にもいくつか論文を出している。特殊相対性理論とか$\ce{E=mc^2}$とか光量子仮説とか、とにかくすごい論文の数々については、また「余白」の都合でカットである。申し訳ない。
電子は元々真空中に電気を通していたところ何か負の電荷をもった粒子が中を通っているということで発見され、その電荷を帯電した油滴の電荷の最大公約数を計算して求めたりもされている。後にこれが原子由来のものと判明するわけである。
「ティッシュに撃ち込んだ弾丸が跳ね返ってきた」とは、ラザフォードが自身の行った実験に対して述べた感想である。実験は金箔(めっちゃ薄い)にアルファ粒子(ヘリウムの原子核)をたくさん撃ち込むというもので、原子は均等に正電荷を持ち、中に電子が埋まっている(すでに電子の存在は実証されている)、という仮説のもとアルファ粒子は少しずつズレると予想したラザフォードだが、この予想は大いに裏切られたのだ。実は中にあるのは原子核という非常に小さな正電荷の塊で、あとは何もない。おびただしい数の粒子の一つまみだけが反対側に返ってきたのだ。そんなスカスカな原子の構造に対する驚きを込めた一言がまさに「ティッシュ(以下略)」なのである。
ほかにも色々と原子やほかの諸々については土台となる研究があった。私が紙を節約せざるを得ないため、申し訳ないが、詳しくはグーグル先生にでも尋ねてほしい。
素粒子 電子は実は素粒子である。
質量が存在するとかで近年話題になったニュートリノも素粒子である。
ただし、陽子や中性子はさらに「アップクォーク」と「ダウンクォーク」に分けられるので、素粒子ではない。
他の素粒子は不安定ですぐ他のものに変化するので自然界で圧倒的に多いのはこの「アップクォーク」と「ダウンクォーク」、電子、ニュートリノ3種類くらいであろう。ものによっては存在を仮定しないと自然界の事柄と合致しないという理由で存在することにされたものもあるが、のちに加速器を用いた実験で実在すると証明されているものも多い。昨年言及した力を伝える粒子のうち重力子は存在こそ予言されているが観測されておらず、そういう未観測粒子も数多くある。
実はもっと細かい粒子があったり、どの粒子もある滅茶苦茶小さなひもの一形態だったり、より細かい構造が存在するという説もあるが、正直私にもよくわからないので割愛する。
奇妙な世界 ここまで小さな粒子の話ともなると、我々の常識は通用しない。この常識はずれな世界を取り扱う学問が量子力学である。例えば常識の範囲内では物は常にある場所にしっかりと「存在」する。例えば、先述のコップはどこか、と訊かれたとして机の上、と断言できるようなものだ。しかし、量子力学では、あの粒子はどこか、と訊かれても断言できないのである。「ここかもしれないし、あそこかもしれない。でも、こっちにある確率の方が高い。」くらいにしか断言できないし、知りようがないのである。そのため、観測はある程度ぼんやりしていた「ここかもしれないゾーン」を狭めるくらいしかできないのだ。だが、観測をやめるとすぐに「ここかもしれないゾーン」は元に戻る。
さらに言うと、粒子がどれくらいの速さで動いているかさえもはっきり分からないのである。これは場所を知るのに必要な観測という動作特有のものでもある。たとえばりんごを見るとき、私たちはりんごで反射した光を見ていることとなる。ただし、物が小さいと光によって運動が乱されたり、場所を知るにはエネルギーが足りなかったりするのである。だからどっちかは分からなくなるのだ。
「測定において位置の誤差と運動量(速度×質量で表される値)の積は一定以上になる」という原理が存在する。現在は反例が示されているが、大まかな方向性は合っているようである。これだけではかなり分かり辛いだろうが、かいつまんで言うとこうなる。
「実際に観測するまで粒子の位置が分からないうえに、観測しても誤差からは逃れられない。運動量についても同様。次頁の図のとおり。」
一例 こうなるとだいぶ厄介なことが起こる。「ここかもしれないゾーン」は時に壁(十分薄い)を超えるのである。その場合、何回か観測するうちに粒子が壁抜けするのである。これはトンネル効果と呼ばれるが、これは量子力学を代表する奇妙な結論の 1 つといえよう。上に例を示す。
世界一美しい実験 この「ここかもしれないゾーン」だが、場合によりこんなことも引き起こす。
二つの隙間が開いた壁に電子を打ち込んだと仮定しよう。このとき、電子はいずれかの壁を通ることとなる。しかし、観測するまでは二つの隙間のどちらを通った確率も存在する。その場合、この電子は二つの隙間を同時に通過したことと同義に解釈できるのである。粒子の検出確率は波のようなグラフを描くので、この状態を「波の状態」と呼ぶこともあるのだが、この「検出率の波」は干渉しあうこともあるのだ。
それにより、電子自身の検出率の波同士が干渉することで何度も電子を打ち出した際に独特のパターンができる。つまり、自分自身により電子の検出率が変わるわけである。「で、電子はどっちを通ったんだ？」と思う方も多いだろうが、実際にそれを観測すると、電子の飛び方は直線的なものに戻るのである。つまり、同時に通ったからこそこんなパターンになるのだ。
私の能力上細かい計算はできないが、要するに右図のとおりである。下のグラフの色のついた部分と上の同心円は対応するので、同じ色の部分の重なった箇所は検出率が上がり、色の違う部分の重なった箇所からは粒子が全く検出されない。何度も電子を打ち出した際のパターンが右側に示されている。
こんな常識はずれな結論を示した実験だが、ちゃんと名前もある。「電子の二重スリット実験」だ。ある科学誌で行われた「世界一美しい実験は何か」という人気投票では我々の物質観を見事に、明白な方法で打ち砕いたという点を評価され堂々の一位を取っている。
補記および何が言いたかったのか ここまで論じたことは確かに本当だが、そのスケールは非常に小さいものなので、我々の世界ではこういう効果を気にする必要性はほとんどない。しかし、天文学的確率とはいえ、なんともなしに寄りかかった壁を誰かがすり抜ける可能性は一応存在するのである。
我々の世界とは一見無関係に見えるこの学問だが、実はコンピューターが量子力学の賜物だったりするなど、我々の生活とどんどんと密接になっている。実際のところ他にいい例が思いつかないが、これからの時代、ここで述べたような結論が生活上の様々なことに役立つことだろう。
そういったものを支えている実に奇妙な法則を知ることも、もしかすると読者の生活を充実したものにする一助になるかもしれない。
出典 https://ja.wikipedia.org/wiki/不確定性原理 アクセス日2018/07/14 数々の本を読んだときの記憶(2014 年以降)</description></item><item><title>生体認証について</title><link>https://asanobuturi.github.io/document/2018/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/4/</guid><description>生体認証とは？ 生体認証とは自分の指紋や虹彩、静脈などの情報をデジタル情報化して端末のロック解除、サインイン、さらには決済までできてしまうというすごいものなんだ！
一言に生体とは言っても指紋、虹彩、顔、静脈...と沢山あるので今回はパソコンやスマートフォン、ATMなどで使われる身近なものに絞ってまとめたいと思います
浅野では先生のほとんどが学校から支給されるSurfaceという顔認証付きタブレットPCをつかっていますが、物理部ではいったい何人の人がそれらの機器を所有しているのでしょうか。物理部でどれぐらいの人が持っているのかというのが次のグラフ(図1)です。(正式に調査したものではなくあくまでも把握している分です。)
指紋と顔で約半数の人がいずれかの機能を使えるということです。
図1 意外と多いのではないでしょうか。大きな要因はiPhoneが指紋認証(Touch ID)を搭載しているからでしょう。
2018年、実に10億台もの指紋認証付きスマートフォンが出荷される予定で約70%の端末に搭載される見通しとなっています。物理部で使っている人はいないと思われますが、電子マネーの普及が結果的に指紋認証付きスマートフォンの普及につながったのでしょう。
仕組みについて この様に身近な生体認証ですがどんな仕組みなのでしょうか
指紋認証 指紋認証は生体認証の中では歴史が古いものです。そのため一言に“指紋認証”とは言っても沢山の種類があります。
画像を読み取るタイプ これは比較的古いものでスライド式のセンサーで指紋の画像を取り込み特徴点と呼ばれる指紋のスタート地点、切れ目、分岐点などで認識します。特徴点が多ければ多いほど精度は向上します。(20～40個程度で比較は可能)
画像を読み取るタイプ 電極が埋め込まれているタイプのセンサー（静電容量方式） これはスマホでも使われるもので、スライドしなくてもよいというメリットがあります。平らな認証部分の下には何万個も電極が埋め込まれていて指紋の凹凸部分を読み取るというものです。これは指がかすかに汗をかいているので凸部分の方がセンサーの電荷がたまりやすいという特性を利用したものです。そのあとはスライド方式と同じように特徴点を読み取り認証します。
尚、シリコン製が一般的ですが、JDI(株式会社ジャパンディスプレイ)がガラス基板を採用して透明にするだけでなく曲面やディスプレイへの埋め込みも可能にしました。(2018年1月発表)
写真はスマートフォンSH-M05の指紋認証センサー ↑横に長くかなり小さい 汗孔(汗が出る小さな穴)を第三次特徴として使えるもの これはまだ開発されたばかりの仕組みで生体認証システムの DDS と東京大学が開発しました。
特徴点を第一次特徴の「指の凹凸によって模様になった渦状紋」、第二次特徴の「分岐点や線の始まり」の他に「汗が出る小さな穴」を第三次特徴とすることで認証の精度を約10倍に高めました。
静電容量方式では汗孔を(十分な解像度がなく)読み取ることができません。
コスト面が課題ですがスマホメーカーや自動車や家の鍵にも採用を目指すそうです。この他にもQualcommの超音波センサーを使ったものなどがあります。
### 虹彩認証 虹彩認証は精度も高く、2015年に富士通のスマホARROWS NXにスマートフォンとして世界で初めて搭載されて話題になりました。虹彩は一卵性双生児でも区別できます。(DNAの塩基配列によって決まらないため。)その特徴は高い認証精度です。網膜と比べて眼球の表面にあるのため撮影も容易で、虹彩パターンの濃淡値のヒストグラムを用います。さらに指紋とは違い直接触れることがないので抵抗も少ないです。
問題点は、目に赤外線を当てて認証するのですが、赤外線のLEDを悪意のある人がそれを取り換えると目に障害が残るということです。
静脈認証 虹彩に次いで精度が高い方式で、ATMなどに採用され利用件数も増えています。近赤外線を当てて認証するので虹彩と同じく機械に触れる必要はありません。近年はセンサーの小型化も進みタブレット PC でも採用されています。
写真はLIFE BOOK S937/S(FMworld法人より) 顔認証 この中では認証精度は低く、簡易的なものに用いられます。
赤外線カメラを用いたものと普通のカメラを用いたものがあり、前者が主流です。双子を見分けることが難しく眼鏡や明るさ、顔の表情、加齢などによっても精度は下がります。
ちなみに物理部で顔認証は一人でしたがそれは私です。家族共用のパソコンなのですが父のアカウントに入ることはもちろんできませんし５歳下の弟は私のアカウントに入ることはできません。簡易的とはいってもある程度の精度はあり眼鏡をかけていても読み取ってくれます。
ロック画面の様子 声 これは声紋を利用したものがよく知られています。これも簡易的なものでその日の声の調子によっては正しく認証しないことがあります。例えばAndroidのスマートフォンの機能としてSmart Lockというものがありますが、それは「OK Google」と発音してロックを解除できます。
まとめ この様に生体認証は沢山あって便利なものですが欺瞞の方法も数多く編み出されています。例えば指紋認証だとピースサインが映った写真から指紋を特定される危険性があります。(浅野の教頭先生は記念撮影の時指を曲げて見えなくしていました(笑))生体認証だけに頼らず複雑なパスワ－ドと組み合わせるのが良いでしょう。
参考文献 生体認証 - Wikipedia 虹彩認識 - Wikipedia 指紋認証の精度10倍、決め手は「汗の穴」:日本経済新聞 来年は2300億円に!?生体認証市場が求める意外な技術｜【Tech総研】 2018年、指紋認証搭載のスマホは10億台以上に～浸透した2つの理由 - iPhone Mania 99.999％の識別力！ 『指紋認証』ってどんな仕組み？｜TIME &amp; SPACE by KDDI 指紋センサー（スワイプ式）ご使用の手引き[RATOC] ピースサインから個人を特定！写り込んだ「指紋」から個人情報を盗まれかねない時代に - iPhone Mania スマホ画面に指紋センサーを統合する技術、クアルコムが発表。水中読み取り、心拍・血流計測にも対応 - Engadget 日本版 - web.</description></item><item><title>素数の探し方</title><link>https://asanobuturi.github.io/document/2018/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/14/</guid><description>はじめに 素数と聞いて、「2,3,5,7,11…のことだよね」と分かった人も多いと思いますが、では、現在までに見つかっている最も大きな素数はご存知ですか？じつは、その素数は2千万桁以上にもなります。どうやってその数が素数であることがわかったのか、考えてみるとふしぎではありませんか？2千万桁の数を2からひとつずつ割っていくわけにもいかないし。ということで、ここでは素数の判定方法などをまとめてみました。なお、この文章での「現在」とは2018年7月14日のことです。
素数とは \(2,3,5,7,11,13,17,19,23,29,31\cdots\)というような数のことです。 素数の定義は色々ありますが、簡単に言うと「その個数のおはじきを長方形に並べることができない数。ただし1列に並べるのは除く」と言えると思います。
素数の記録 2017年12月26日、現在までに見つかっている素数の中で一番大きな素数の\(2^{77232917}-1\)が発見されました。これは23249425桁の素数で、１ページびっしりに印刷しても719ページの本になります。（実際にAmazonで売られていたり…） このような素数の記録は「The Prime Pages」(http://primes.utm.edu/)で管理されています。
素数の種類 素数と言っても、ただのランダムな素数や、きれいな数式で表される素数、ある数列の中に出てくる素数など様々な種類があります。といっても整数の種類はたくさんあるのでここで紹介するのはほんの一部です。 メルセンヌ素数 (Mersenne Prime) \(2^n-1\) 先ほどの\(2^{77232917}-1\)がその例です。現在50個のメルセンヌ素数が発見されています。また、現在発見されている素数の大きい方から10個のうち、9個がメルセンヌ素数です。n=2,3,5,7,13,17,19,31,61,89の時などがメルセンヌ素数です。 フェルマー素数 (Fermat Prime) \(2^{2^n}+1\) nが少し大きくなるだけで\(2^{2^n}+1\) は大きくなってしまうので、探すのが大変な素数の一つです。 nが32のとき（1292913986桁）までは素数かどうかが分かっていて、そのうちnが0,1,2,3,4のときのみが素数です。nが4よりも大きいとき素数になるかどうかはわかっていないのですが、初めの5個だけ素数で、そのあとには素数がまだ見つかっていないっていうのはちょっと不思議な感じがします。 プロス素数 (Proth Prime) \(k\cdot2^n+1(2^n&amp;gt;k)\) メルセンヌ素数のところで、現在発見されている素数の大きい方から10個のうち9個がメルセンヌ素数だと書きましたが、その残りの1個がこのプロス素数の \(10223\cdot 2^{31172165}+1\)です。 双子素数 (Twin Primes) 隣り合っている2つの奇数（pとp+2）の両方が素数である数です。 現在見つかっている中で最大の双子素数は、2016年9月に発見された \(2996863034895\cdot 21290000 \pm 1\)（388342桁）です。 階乗素数 (Factorial Primes) \(n!+1,n!-1\) 一瞬、この数はnまでは割れないので、全てが素数なように見えますが実は少なく、 \(n!-1\) は27個、 \(n!+1\) は22個しか見つかっていません。現在見つかっている最大の階乗素数は、2016年7月に発見された\(208003!-1\)（1015843桁）です。 2018/7/14現在 \(n=250823\) まで探索が終了しています。 (http://prpnet.primegrid.com:12002/server_stats.html) 素数階乗素数 (Primorial Primes) \(n\#+1,n\#-1\) 2から順にnまでの素数をすべてかけた数を \(n\#\) と表します。 この数も、見た目よりはるかに素数になりにくく、 \(n\#-1\) は20個、 \(n!+1\) は22個しか見つかっていません。現在見つかっている最大の素数階乗素数は、2012年3月に発見された \(1098133\#-1\) （476311桁）です。 2018/7/14現在 \(n=2550167\) まで探索が終了しています。 (http://prpnet.</description></item><item><title>素晴らしいアルゴリズムの世界</title><link>https://asanobuturi.github.io/document/2019/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/3/</guid><description>どうも、中3の副部長の中野です。最近、僕の周りで競技プログラミングが流行っているので、少しアルゴリズムについて書こうかなと思います。
対象読者 C++などのプログラミング言語の基礎をある程度抑えている人。
競技プログラミングとは 競技プログラミング(以下競プロ)とは、数学的な問題を制限時間内にプログラミングで回答する競技です。有名な競技プログラミングのプラットフォームとして、AtCoderが挙げられますが、問題文が日本語なので初心者でも比較的始めやすいと思います。何より代表のchokudaiさんが面白いです。
累積和 これは競プロだったら頻出のアルゴリズムですね。次のよな問題を考えてみてください。
Q個のクエリと長さNの数列
X
0
&lt;=
X
i
&lt;=
103
が与えられる。また各クエリでは
l
r
0
&lt;=
l
&lt;
r
&lt;=
N
が与えられる。各クエリにて、数列Xにおける区間
l
r
の総和を求めよ。
0
&lt;=
Q
,
N
&lt;=
10
18
とする。
このような問題は、ある程度プログラミングができる人なら、各クエリで
r
から
1
までのfor文を使って合計を求めて、それを出力して・・・と考えるかと思います。しかし、クエリの数や、
N
の範囲が今回の成約のように膨大になってしまった場合、到底制限時間内に間に合いません(計算量が
O
N
のためTLE=時間制限超えになってしまいます。)。
(下図はhttps://qiita.com/drken/items/56a6b68edef8fc605821より引用。)
そこで、
S
i
+
1
X
0
+
X
1
+
⋯
X
@
i
という漸化式が成り立つ配列Sを用意してあげます。そうすることによって各クエリでは
S
r
-
S
1
を算出すれば良いことになります。すると計算量は
O
N
+
Q
になり(前処理では
O
N
かかりますが、オーダー記法において定数倍は無視できるのでさほど重要性は高くありません。)、十分間に合います。C++で実装するとこうなります。</description></item><item><title>弾幕の作り方</title><link>https://asanobuturi.github.io/document/2016/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2016/8/</guid><description>皆さんこんにちは。作者名のスパゲッティソースというのは“スパゲッティみたいにこんがらかっていて読みにくいソースコード”という意味である。そんなソースコードを書く人がこんな部誌を書いていることを気にしたら負けである。
本題に入るが、弾幕とは簡単に言えば弾の複数形である。つまりゲームで敵が撃ってくる弾をどうやって作るのかを解説する。またこの部誌はC言語およびC++を基調としている。それ以外の言語では違うところが多々あると思うので、注意してほしい。
まずはグラフィックの調達だ。一般の企業が出しているようなクオリティの高いものでなければペイントで十分である。事実私も多用している。また透明化するソフトも必要だがそれは無料ソフト“手軽に透明”を私は使っている。透明化しかできないが十分である。どうしてもそれらができない場合は簡単な図形であれば描画する機能がC言語についているのでそれを使えば問題ない。ただし、少し処理が重くなることは考慮する必要がある。
次にソースコードを書いていく。まず、配列と呼ばれるものを用いてたくさんの変数を作る。といってもわからないであろうから、順に説明していく。まず、変数というのは箱みたいなものである。そこには数値をひとつ入れることができる。言い換えるとひとつしか入らない。であるがゆえにたくさん作る必要があるのだが、そのことはひとまず置いておいて、変数についてもう少し詳しく説明していく。ひとつしか数値が入らない変数に二つ目の数字を入れるとどうなるか、一つ目の数字が消えるのである。そこも使いやすい点であるのだが、それを知らないと混乱してしまうであろう。さらに、すべての数を入れられるわけではないということである。よく使われる変数の型であるINT型は-2147483468~2147483467までの整数しか入らない。小数を扱うならFLOAT型で約±3.4×10の38乗までで有効桁は7桁となっている。FLOAT型の方が多くの数を入れられるため便利に見えるが、その分多くのメモリを使う上に、“3で割った余りを求める”という時にも使えないので適材適所で使う必要がある。他にもたくさんの型があるが、私はこれ以外にほとんど使ったことがないのでこれだけあれば十分である。興味があれば調べてみても構わないが。
変数についてわかったところで、配列の説明に入る。難しく聞こえるかもしれないがなんてことはない。変数の複数形だと思えば良い。それをfloatbulletx[1024];などとすればよい。これは弾のX座標の配列の例である。つまり最低でももう一つfloatbullety[1024];が必要である。それ以外にも弾が様々な方向に飛ぶとすれば、その向きと速度の配列（もしくは移動方向のXとYの長さ）が必要である。ちなみに私は括弧内の方を使っているのだが、意味がわからない人は図１を見てほしい。また、1024というのは表示できる弾幕数の最大値となる。
それでは数値を代入していこう。例えば「にゃにゃめにゃにゃじゅうにゃにゃどのにゃらびでにゃにゃつのたまを（にゃにゃ,にゃにゃ）からはにゃつ」（斜め77度の並びで7つの弾を（7,7）から放つ）為にはどうすればよいか。ちゃんと説明しようと思うと三角関数（sin,cos,tan）や弧度法（ラジアン）が必要だが、まだ習っていない人のために簡単に言うとコンピューターに77度の三角形の縦、横、斜めの長さを計算させるだけである。それらがわかっている人にとっては本当にそれだけでいいの？と思うかもしれないが、コンピューターは計算がだーいすきなので、がっつりお仕事してもらおう。当然それらを相似拡大する必要があるが、ここまで読んだ人ならわかるであろう。ちなみに（7,7）から77度の角度で弾を放つとすぐに画面外に出て消えてしまうので、-77度で弾速7で7フレームおきに放ってもらおう。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 /*初期化処理など*/ int a=-1; int x; //一時的に弾の x 座標を保存するための変数 int y; //一時的に弾の y 座標を保存するための変数 int i; int gametime=-1; //ゲームが始まってからの時間 float pi=3.141592; //円周率。ラジアンに変換する時に使う float bulletx[8];//今回は 8 個もあれば十分ですね。（以下同様） float bullety[8]; float bulletx2[8]; float bullety2[8]; /*初期化処理など 2*/ int white=GetColor(255,255,255);//白い色 while(ProcessMessage()!=-1){//エラーがない限りループする gametime++; //gametime に１を足す if(gametime%7==0){//もし gametime を 7 で割った余りが 0 だったら a++; bulletx[a]=7; //bulletx[a]に 7 を代入 bullety[a]=7; bulletx2[a]=7*sin(-77*pi/180); //斜辺が 7、角度が-77 度の横の長さ bullety2[a]=7*cos(-77*pi/180); } for(i=0;i&amp;lt;8;i++){ //8 回ループ bulletx[i]+= bulletx2[i]; bullety[i]+= bullety2[i]; x=bulletx[i]; //小数点以下を切り捨てて整数値に y=bullety[i]; DrawCircle(bulletx[i],bullety[i],7,white,TRUE); //半径7の円を描画 } If(gametime&amp;gt;=42){break;}//弾を 7 つ放ち終わる時間になったら終了 概ねこんなかんじである。かなりはしょって書いたのでほとんどの人はわからないだろうが、興味を持ってくれたら幸いである。一応全然わかってない人のために言っておくが、「初期化処理など」のところを書いていないためこれをコンパイルしても動かない。加えてこれだと7つ目の弾を放った瞬間に終わるので、その弾は見えて一瞬である。さらに実行し始めてから0.</description></item><item><title>知れば知るほど知りたくなるLEDの世界</title><link>https://asanobuturi.github.io/document/2022/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/6/</guid><description>はじめに こんにちは。去年の部誌も読んでくださった方は1年ぶりです。高校一年生のK.R(去年の部誌ではR.Kとして紹介)です。 この記事を書き始めたときにはもう文化祭まで2週間を切っており、急いで執筆することを強いられています。そのうえ、まだ僕は物理部で製作途中の作品がありそれも完成からは程遠く、残り2つの兼部先でも多くの作業を抱えており、本当にこの記事を書き終わって作品を作り終わり他の部活のタスクも終わらせることができるかが心配です。もし僕が文化祭の日に死体が如く部室に横たわっていたら、作品が完成しなくて落ち込んでいるか数々の作業で疲労しているかのどちらかが理由であると思います。部員の皆さん、僕の死体を発見した時にはジュースでも奢って下さい。 字数稼ぎができました。では、本題に入りましょう。 この記事では、僕が電子工作班の作品制作でよく使用している、LEDについて自分なりに解説します。 僕はPC班員として物理部に入部し、中2までは気まぐれでプログラミングをしていましたが、中2の後半になって電子工作に興味を持ち始め、中3の後半になってようやく本格的に電子工作を始めました。遅咲きですね。 そのときに先輩が途中まで制作した、LEDを使った作品を引き継ぐことになり、自分でどうやって動かすかを調べて最後まで配線しました。入部してからPC班である程度構築されていたプログラミングのスキルを利用して、そのLEDをプログラミングで制御することもできました。 それをきっかけに主にLEDを使った作品制作を本格的に始めるようになりました。 ということでこの記事では、僕がLEDの作品を1年作り続け、暇があれば電子部品のサイトを徘徊していたその経験に基づいて、LEDの種類とその制作例、作品の大まかな仕組みを説明します。 タイトルの「知れば知るほど知りたくなる」というのは1分でなんとなく思いついたタイトルですし、本当に知りたくなるほど奥深い世界を描写できているかは分かりません。それでもこの記事をきっかけに少しでもLEDに興味を持ってくれる人がいることを願っています。 拙い文章ではありますが、どうぞお楽しみ下さい。
そもそもLEDとは まずはLEDの基本的な内容・特徴について説明します。LEDとは発光ダイオード(Light-Emitting Diode)の略で、ダイオードの一種です。 ダイオードとは、アノードからカソードの1方向にしか電気を流さない(整流作用をもつ)電子部品です1。その性質を生かし、逆流を防止するために回路に挟まれたり、ACアダプターなどで平滑回路とともに交流を直流に変換する回路の一部(整流回路)に使われたりしています。 下の図は、ダイオードの回路図記号です。 LEDとは、そのダイオードの中でも電気を流して発光するものを表しています。下の図はLEDの回路図記号です。 また、LEDの中で最も一般的なものは、下の写真のような「砲弾型LED」とよばれるものです。 砲弾型LEDは、発光する素子をプラスチックで覆うことで素子を保護し、素子からの光を拡散しています。 LED単体での光の色は、LEDが発する光の電磁波の波長によって決まります。例えば、紫色の波長は380nm〜450nm、青色が450〜485nm、緑色は500〜565nm、赤色は625〜780nmです。波長が紫色から赤色の範囲までの光はヒトの目で見ることができ、その範囲の光線を可視光線といいます。赤色よりも波長が長い光は赤外線とよばれています2。 砲弾型LEDにも白色で光るものはありますし、恐らく殆どの家庭に白色のLED電球や白色のLED蛍光灯はあると思いますが、可視光線の中に白色はありません。今の技術で白色の電磁波を作ることは不可能なのです。 しかし、複数の色を合わせることで、白色などの可視光線では表現できない光の色を作ることが可能になります。読者の多くが「光の三原色」という言葉を聞いたことがあると思います。「光の三原色」の考え方に沿った場合、赤色、緑色、青色の3色のLEDを組み合わせ、それぞれの明るさを調節することで色が混ざって様々な色をつくることができます。例えば、すべてのLEDを点灯すると白色に見え、赤色のLEDと青色のLEDだけを点灯すると紫色に見えます。色のこのような表現法のことを、それぞれの頭文字をとって「RGB」といいます。「R」、「G」、「B」は色の三原色のそれぞれの色を英語にした頭文字(Red、Green、Blue)をとっています。 3
ここまである程度LEDの基本について説明しました。 もっと詳しいことは第4章以降で説明しますが、LEDは部屋などの照明に使われているのは勿論、人々に情報を提供することも、部屋の雰囲気を変えることも、娯楽として利用することもできるのです。このように、LEDは人間の生活においてとても身近であり、大切な役割を果たしているのです。
マイコンとLED ここからはLEDの形態や作品例を説明したいと思うのですが、その前に、LEDを扱ううえで大切な「マイコン」について説明します。「マイコン」とは「マイクロコントローラー」の略で、プログラムを書きこむことで電気の複雑な入力(スイッチやセンサーなどの読み取りなど)や出力(モーターの回転やLEDの点灯など)ができる集積回路です。 4 マイコンを単体で扱うこともできますが、マイコンをさらに扱いやすくした基板であるマイコンボードというものもあります。マイコンボードの代表としては、2005年にイタリアで開発されたArduino(アルドゥイーノ)が挙げられます。下の図は、Arduinoの主要モデルであるArduino UNOの写真です。 Arduinoとは、ピンに導線を挿してセンサーやトランジスタ、LEDやモータードライバーやモーターなどの電子部品を配線して回路をつくり、Arduino IDEという専用のアプリケーションを使用して、C++をもとにしたプログラミング言語でプログラムを記述し、コンパイルして作ったスケッチを書き込むことでプロジェクトが完成します。 下の図は、Arduinoをプログラミングする流れを大まかに描いた図です。 ライブラリも充実しており、後述するたくさんの種類のLEDをすべて制御することができます。 ここまで難しい言葉を羅列してきましたが、やっていることは「配線してプログラムを書き込む」という、たったこれだけなのです。Arduinoは、初心者には本来難しいはずのマイコンの制御を初心者にも簡単にできるようにした、革新的なアイテムなのです。
LEDの種類 ここからは、LEDを光らせる形態としてどのようなものがあるのかを説明していきます。勿論この世にはたくさんの形態があり、部誌の中にすべてを収めるのは難しいです。個人の2年間の電子工作の経験をもとに、「これはよく使われる」と思ったLEDを4個選びました。
砲弾型LED 第2章でも少し書きましたが、最も一般的な種類のLEDです。発光する素子にプラスチックのカバーがついているだけですが、その中にも更に細かい種類があります。 まずは、下の図を御覧ください。 LEDには端子が2つあり、長い方を「アノード」、短い方を「カソード」といいます。例えば電圧が5Vの電源装置を用いた場合、およそ200Ωの抵抗を回路の中に入れることで明るく点灯します。 しかし、このようなLEDは単色にしか光りません。「場面によって光る色を変えたい」「LEDの色を滑らかに変えたい」などと思ったら、下の図のようなLEDを用いるとよいでしょう。 このLEDは、中に光の三原色である赤色、緑色、青色のLEDが入っていて、それぞれのLEDの光の量を調整することで、様々な色の光を作ることができます。このようなLEDを「RGB LED」とよびます。 このLEDは端子が2個ではなく4個になっています。なぜそうなっているのでしょうか。 そもそも端子が4つのRGB LEDには主に「アノードコモン」「カソードコモン」の2つの種類があります。 まず、アノードコモンのRGB LEDには1つの+端子、3つの-端子があります。+端子に電源の+極をつなげ、3つの-極に流れる電流の大きさをそれぞれ制御することで、3つの光の量を調整することができます。 一方、カソードコモンのRGB LEDは、3つの+端子、1つの-端子があります。-端子を電源装置の-極に繋げ、残りの3つの+端子の電流の大きさを制御することで様々な色に発光させることができます。 Arduino等のマイコンボードには、ピンがそのまま+極となるためアノードコモンのRGB LEDよりもカソードコモンのRGB LEDのほうがよく使われます。 その他、「素子の中に抵抗器を内蔵しているLED」「アノードからカソードに電気を流すだけで色がゆっくり変化するLED」「キャンドルのように明るさが変わるLED」「リモコンなどに使われる赤外線LED」など、砲弾型LEDにも様々な種類があります。 このように、LEDの中では一般的な砲弾型LEDであっても、作りたいものに合わせてその種類も豊富なのです。
チップLED 次に説明するのは「チップLED」です。チップLEDとは、プリント基板上などに表面実装する(穴に導線を挿してはんだ付けをするのではなく基板の表面にはんだ付けをすること)ためのLEDです。「表面実装用LED」ともよばれたりします。 そのサイズは、多くの砲弾型LEDの樹脂部分の直径は5mmであるのに対し、上の画像のLEDの場合、長辺が1.6mm、短辺が0.8mmと、素手で扱うことがとても難しいくらいに小さいです。 この小さなLEDですが、その小ささを生かして身近な様々な製品に利用されています。 例えば、部屋の天井にあるLEDの電灯は、1つの電灯で1つのLEDの素子が使われていると思われがちですが、そうではなく実はたくさんのチップLEDを並べて点灯させることで部屋を照らすという仕組みの製品がほとんどなのです。 また、この後説明するLEDマトリクスパネルやLEDテープのLEDの1つ1つもチップLEDです。RGBのチップLEDが使われていることもあります。 さらに、多くの電気製品に搭載されていて、電源が入ると点灯したり色が変わったりする、電源ランプにも多くはチップLEDが使われています。 その他にも説明しきれないくらいにチップLEDには様々な使われ方があります。そのくらいチップLEDとは普段の生活に身近であり、日常生活に欠かせないものなのです。
LEDマトリクスパネル 次に説明するのは、たくさんのチップLEDを一面に並べることで、それぞれのLEDの点灯/消灯で文字や絵を描画することができる、「LEDマトリクスパネル」です。 ArduinoなどのマイコンボードやRaspberry Piなどのシングルボードコンピューターなどを使用してプログラムによって制御したり、専用のコントローラーを使用したりすることで自由自在に制御することができます。 下の写真は、Arduinoを使用してLEDマトリクスパネルに文字をや絵を表示させてサインボードを作っている例です。 おそらく多くの人がこのようなパネルが店などに使われているのを一度は目にしたことがあると思います。また、鉄道の発車標などの電光掲示板にもLEDマトリクスパネルが使われています。 掲示板の形態が多様になりつつある現代においてもLEDマトリクスパネルは大切な役割を果たしています。 たくさんLEDがあることを利用して、他にも様々な作品に応用することが可能です。その応用例は第5章で紹介します。 制御しやすいLEDマトリクスパネルで有名なものには、アメリカのAdafruit Industriesが製造するRGB Matrix Panelがあります。このLEDマトリクスパネルは、Adafruitが提供するライブラリを使用して、簡単にArduinoやRaspberry Piでマトリクスパネルを制御することができます。ちなみにRGB Matrix Panelの使い方についてはこのページが参考になります。 32x16 and 32x32 RGB LED Matrix</description></item><item><title>地球最終兵器の戦い</title><link>https://asanobuturi.github.io/document/2002/rejected/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2002/rejected/2/</guid><description>これは、地球最終兵器のはちみつレモンとの対戦を描いた
真実に基づいた愛と平和のギャグ文章です。
はちみつレモンとは、本来は準透明色をしているのだが
今回の対戦相手はナント黄色をしていた。
これは、何を意味しているのか。
実は、マスタードという日本語訳にすればからしに近いものである
流動体を、流し込んだ飲料を今回の対戦相手に選んだ。
この兵器には、詳細は一切説明されなかった。
だが、その兵器は敢然と飲料に立ち向かうのであった。
そして、ペットボトルの中に入ったはちみつレモンに
マスタードがどろどろと流れ込んでいったのだ。
最初は、準透明だったはちみつレモンが、一振りするだけで
あたかもオレンジジュースであるかのような
綺麗な黄色へと変化したのである
無論ペットボトルのラベルは、はがされ
兵器には、飲んだ後まで中身は知らされていなかった。
そして、兵器は何のためらいもなくゴクリと一飲み
兵器「&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;」
刹那、物理部を沈黙で包み込んだ。
兵器「&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;」
兵器「これ意外とうまいわ。」
部員一同驚愕
そして、そのはちみつレモンの試飲会が始まった。
そして、ほとんどの部員から「まずくはない。」
と言う意見が殺到。
さぁあなたもチャレンジ
用意するもの 伊藤園はちみつレモン 果汁3%(500ml)
マスタード(マクドナルド製チキンナゲットについてくるもの)
作り方:先ず、ペットボトルのキャップをあける。
次に、ペットボトルの中にマスタードを入れる
そしてキャップを閉め、
シェイク!
出来上がり。</description></item><item><title>中学生が考える人工知能</title><link>https://asanobuturi.github.io/document/2019/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/2/</guid><description>はじめに 最近、いたるところで「人工知能」や「AI」という言葉を聞きます。しかし実際にはほとんどの人が人工知能とは何かについて詳しくは知らないと思います。そこで今回は少し人工知能について研究してみました。
定義の確認 まずは、人工知能とは何か、というところから始めます。
『計算(computation)』という概念と『コンピュータ(computer)』という道具を用いて『知能』を研究する計算機科学(computer science)の一分野を指す語。 Wikipediaより(2019年9月28日参照)
この定義を見ると、「知能」を「コンピュータ」で再現する、という意味のようです。では「知能」の定義といったい何でしょうか。 知能とは、
論理的に考える、計画を立てる、問題解決する、抽象的に考える、勧化を把握する、言語機能、学習機能など様々な知的活動を含む心の特性のこと。 Wikipediaより(2019年9月28日参照)
これらのことがコンピュータを用いてできれば「人工知能」である、ということみたいですね。
機械学習の種類 現在、人工知能の多くは「知能」のうち、「学習機能」の部分に特化しています。そういった人工知能に学習機能を持たせ、学習させること、またその研究分野を機械学習といいます。機械学習の種類は理論等によって大きく三つに分けられます。
教師あり学習 用意された入力に対して正しい出力のデータを用意して学習をする方法。
例)画像認識、ニューラルネットワーク
教師無し学習 用意された入力に対して正しい出力のデータはなく、人工知能時代に適切な出力結果を作成させるような学習をする方法。
例)データ群の分類
強化学習 環境について調べ、それに対して適切な行動をするように学習する方法。
例)歩行等の学習、進化的アルゴリズム
分類の考え方は複数あります。必ずしも例に挙げているように分類されるとは限りません。
少し用語について説明します。
入力→人工知能に与えられた情報
出力→人工知能が返す情報
環境→「状況」とほぼ同義。環境からは評価が与えられる。
制作 学習内容 では実際に作ってみます。今回制作するのは強化学習に分類されるようなもので、以下のようなゲームを学習させます。
ゲームの概要 画面上のランダムな位置に20個ボールを設置する。
二人のプレイヤーがそのボールを取り合い、多くを取ったほうが勝ち。
プレイヤーは端に触れるとスタート地点に戻される。
このゲームの一方のプレイヤーを人工知能に操作してもらうことにします。今回の人工知能への入力は以下の要素です。
自分とプレイヤーの位置 それぞれのアイテムの有無 スコアの変化 ボールの座標は固定してから学習するので入力には含みません。
また、人工知能にはキーボードの入力と同じようなデータを確率で出力してもらい、それに基づき操作してもらいます。
学習の方法 ボールの座標決定後、以下のような流れで学習をします。
スタート地点にセットされる。
現在の状況を取得、記録する。
ランダムに動く。
もしスコアが増えたならその時の状況で今行ったものと同じ行動をする確率を増やす。
②~④をある程度繰り返した後、①に戻る。
結果 製作期間:一ヶ月ほど
動作 学習が遅い割にあまり良い結果が出ない。 学習量を増やさなくてはならなくなり、より時間が必要になる。
学習量が増えると記録を探し出すのに時間がかかり、平均のフレームレートが下がる。 パラメータの設定にもよるが、多くの場合一つ目をとっても二つ目を取ることができない。 考察 今回のアルゴリズムはかなり雑なものだったため、学習効率がかなり悪かったようです。改善するとすれば、
入力に相対座標を用いて学習させる。 ボールとの位置関係についての学習が良くなる。
学習結果をさらに学習する。(進化的アルゴリズムのようなもの) 優秀な行動がより強調されるであろうと思われるので、全体的な質の向上が期待できる。
改良 ここまでの結果を踏まえて少し改良を試みようと思います。今回は5-2の後者について少し変更をしてみます。
改良後の学習方法 改良後では以下のような流れで学習を進めます。
スタート地点にセットされる。
現在の状況を取得、記録する。
今までの学習内容を踏まえて行動を決定する。
もしスコアが増えたならその時の状況で今行ったものと同じ行動をする確率を増やす。
②~④をある程度繰り返した後、①に戻る。
完成物 一つ目は改良前より安定して取れるようになった。
場合によっては三つ以上連続で取れることもあった。
2つのボールの間でとどまるような行動が見受けられた。
全体的には改良されたような気がします。しかし、全部取ることもできず、さらなる改良が必要になるだろうと強く感じさせられました。
まとめ 中学生が初めからしっかり人工知能を作るには、もっと多くの時間をかけて知識を得たり、研究を重ねなくてはならないことがよく分かりました。次はしっかり専門書を読み、知識を貯え、もっと研究をしてから作ってみたいと思います。最後まで読んでいただきありがとうございました。</description></item><item><title>電気学の発展</title><link>https://asanobuturi.github.io/document/2018/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/11/</guid><description>突然ですが皆さん、勉強などの、作業の間の息抜き、きちんとできていますか?この部誌では他の人が物理のことについて真面目に述べているので、この記事はその息抜き的な記事にしようと思って書いています。ということで僕たち、電子工作班員達の活動の基礎の基礎となっている、電気学の発展の概観を見ていきたいと思う。
〜静電気蓄電池 ライデン瓶～ 1746年、オランダのピーテルがライデン大学で静電気を貯める「ライデン瓶」を発明した。ライデン瓶はガラス瓶(絶縁の要素)の内側と外側を金属(主に鉛)でコーティングし、内側のコーティングは金属製の鎖を通して終端が金属球となっているロッドに接続されているつくりになっており、瓶の上の球に電圧加えることによってガラスによって絶縁された導体の表面に電気が溜められるのである。溜まった電気は静電気であるが、このライデン瓶の発明によって、人々が静電気を蓄えられるようになったのである。
〜電池の発明 ガルバーニとボルタ〜 1799年にイタリアの物理学者、ボルタが電池を発明した。そして、そのきっかけは1791年のガルバーニが発表した動物電気の研究に遡る。ガルバーニは解剖されたカエルを使って実験物の両端がカエルに当たったところカエルが痙攣を起こしたかのように動き足したのである。これを発見したガルバーニはこれを動物から生み出された「動物電気」と言って論文にし、発表した。しかし実はこの動物電気、動物から生み出された電気ではなかったのである。二種類の金属が湿った物に触れた際に生じた電圧の差が原因であったのだ。そしてカエルの痙攣はただの検電の動きにしか過ぎなかったのである。
そこで、ボルタは銅と亜鉛を用いて電池を発明した。この発明は強い電流を安定して長時間供給することができるようにし、今まで未開拓な領域に留まっていた電気の研究を急速に発展させていくことになる。
〜センスの塊 マイケル・ファラデー〜 ここで、電磁気学の礎を築いた人たちの内の一人である、イギリスの科学者、マイケル・ファラデーである。少しファラデーの生い立ちと、前半生を見てみよう。ファラデーが生まれた家庭は、あまり裕福な家庭ではなく、高等な教育を受けておらず、数学の知識を身に着けていなかった14歳の時から、製本業に就いていた。ファラデーが製本業に就いたのはとても偶然なことであったが、この偶然がファラデーの人生と、科学の歴史を大きく変えることになるのである。
ファラデーは仕事の合間を縫って製本を依頼された本を読んだのである。特に電気と化学の分野に興味を持った。そして、このこともまた、一つの偶然であった。なぜなら、電気と化学の分野はそのころまだ発展途上であって、力学のように、理論で完全に一般化された分野とは違い、未開拓の分野であり、高等教育を受けていなく数学がまったくと言ってもいいほどできないが、実験のセンスに優れているファラデーが活躍できる余地が少なくなかったのだ。ファラデーの勉強の意欲に火がつき、なんとかして実験ができる環境に身を置きたいと考え、1812年に20歳になったファラデーは、電気分解を駆使して多くの元素を発見したデービーの講演を熱心に聴講し、デービーの行った実験をスケッチをまじえてノートに書き留め、デービー宛ての手紙と製本職人が製本したデービーの講義のノートを同封して、デービーに送ったのである。これが功を奏し、1813年3月からデービーのもとで働けるようになり、自由に実験を行えるようになり、数々の功績を残していくことになる。
その後、ファラデーは様々なことを発見していったが、中でも有名なのは、1831年の磁力線の着想と、同年の電磁誘導の法則の発見だろう(厳密に言うと、少し先にジョセフ・ヘンリーが発見している)。電磁誘導というのは、磁界が変化している環境にある導体に電圧が生じる現象(簡単に言うと”発電”)であり、この現象は発電機や、変圧器などの多くの電気機器の動作原理となっている。もちろん、この電磁誘導の法則も高等な数学は一切使われていなかった。
〜理論家 マクスウェル〜 その年6月、後にファラデーの行った実験を理論にする、マクスウェルが生まれた。マクスウェルは大地主跡取りに生まれ、ケンブリッジ大学を卒業した、典型的なエリートだった。彼は数学に長けていてそれを駆使して理論を築き上げるのである。貧困層に生まれ、あまり学歴のないファラデーとは実に対照的な人物である。
マクスウェルは若いころから才能を発揮している。1856年、マクスウェルは25歳で「土星の環の構造と安定性」について取り組み論文を提出し、翌年にアダムズ賞を受賞している。また、マクスウェルは1855年から1856年にかけて、「ファラデーの力線について」と題した研究をし、論文にまとめると、真っ先にそれを力線の提唱者ファラデーに送った。これを機に、後にファラデーとの交流が生まれていく。
さらに、マクスウェルは理論的に電磁波の存在を予想し、そして、マクスウェルは1864年に、ファラデーの電磁誘導の法則、アンペール=マクスウェルの法則、電場に関するガウスの法則、磁場に関するガウスの法則の4つの法則を結合し、今日、”マクスウェル方程式”と呼ばれる電磁気学の基礎方程式が確立したのである。この方程式は、アインシュタインが、特殊相対性理論の基本原理となった、光速度不変の原理を提唱する際にも役立っており、電磁気学の非常に重要なものとなっている。
ちなみに、それからマクスウェルはエーテルという、光が伝播する際に媒質となる、仮想媒質があるのを前提として波動方程式を求めたわけなのだが、このエーテル、今ではエーテルは存在しないと証明されたのである。しかし、この方程式そのものは正しいものである、という面白い展開になっている。このようなことも歴史を学ぶ上での面白さである。
このように、興味のある分野の歴史、あるいはそれに関わったたくさんの偉人達の生涯(特に、幼い頃は自部が後世に名を残すことなんて思ってもいなかった人がほとんどであるため、素の人間が見えて、より面白い)や考え方を知ることは、僕たちにいろんなことを考えさせてくれる、また、考える時の参考にもなるのである。そして何より、学校の歴史の勉強とは一味違う面白さで、調べていて楽しい!皆さんも、息抜き程度に調べてみるのはいかがですか?最後まで読んで下さりありがとうございました。
参考文献 『光と電磁気 ファラデーとマクスウェルが考えたこと 電場とは何か? 磁場とは何か?』小山慶太 著 発行所 株式会社講談社 電磁波- Wikipedia マクスウェルの方程式 - Wikipedia 電磁気現象とマクスウェル方程式｜通信の発展 - WebArchive 相対性理論 - Wikipedia エーテル_(物理) - Wikipedia ジェームズ・クラーク・マクスウェル - Wikipedia ハンフリー・デービー - Wikipedia 電気分解 - Wikipedia マイケル・ファラデー - Wikipedia ライデン瓶 - Wikipedia ボルタ電池 - Wikipedia</description></item><item><title>電工班長の2wayワイヤレススピーカー製作記</title><link>https://asanobuturi.github.io/document/2023/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2023/12/</guid><description>はじめに こんにちは。昨年度の部誌も見てくださった方はお久しぶりです。2022-23年度電工班長のKです。 私は中1から中2の前半はPC班員として活動し、中2の後半から中3の前半にかけてPC班と電工班を掛け持っていましたが、私が中3のときに引退した先輩の作品を引き継いだことをきっかけに完全に電工班にシフトしました。ですから、私はこの部誌を書いている今までに電子工作を少なくとも3年間やってきたことになります。 その3年間という時間が長いか短いかは人によって感じ方が異なると思いますが、私はその3年間、および物理部員として活動していた4年半の集大成として「2wayワイヤレススピーカー」を作り、文化祭で展示しました。 制作を考えたきっかけは、文化祭の物理部の展示において「光」や「動き」だけでなく「音」という要素も取り入れたいと思ったからです。どういうことかというと、物理部展ではPC班と電工班の展示があり、電工班の展示ではLEDを扱う作品やライントレーサーや自動運転車などの車など、「光」「動き」に着目させる作品が多かったのですが、何かが物足りないと思ってきました。そう、「音」です。聴覚を刺激するものがあることで展示教室の雰囲気作りに貢献します。例年、文化祭の展示でビデオやBGMを流している団体もあるようです。そこで、BGMを流す媒体、すなわちスピーカーを作って展示物にすればよいと思いました。数年前の物理部の展示でも自作スピーカーは展示されていたようですが、それはスピーカーとアンプを組み合わせた「コンポ(コンポーネントステレオ)」というもので、それとは違う形態で展示したいと思い、「2wayワイヤレススピーカー」を作ると決めました。 「2wayワイヤレススピーカー」と聞いても何を指しているのかがわからないと思う方もいると思われますが、それについては次の章で説明します。その説明を見てからこの章に戻っていただけると、単語の1つ1つは難しいかもしれませんが、仕組みはスピーカーとアンプを組み合わせただけでありそこまで難しいものではないということが分かると思います。 しかし、私は多くの人が作っているのと全く同じようなものを作ることにそこまで面白みを感じない人間です。ですから、過去の作品もそうですが、このスピーカーを制作するにあたってもある程度の独創的な点をもたせることを意識したつもりです。(それでも私の電子工作のスキルが高いわけでもなく、スピーカー制作については全くの素人であったので独創性にも限界はありますが…)また、できる限りノイズを載せないようにしたり、メンテナンスしやすくしたりと配線や筐体づくりにもある程度こだわったつもりです。 この部誌を読んでいる小学生の方々には、浅野に入学し物理部に入部すると電子工作(あるいはプログラミング)を学び、その一例としてこのような作品を作ることができるようになるということを知っていただきたいと思います。また、物理部員、特に電工班員には技術継承の一環として目を通してほしいと思います。 この紙版の部誌は、まだ作品の組み立てを終わらせることができていない状態で提出期限を迎えてしまいました。完成形を今すぐ知りたければ、この記事の最後のページのQRコードから、電子版の記事にアクセスしてください。(文化祭当日までに更新できているかわかりませんが) 前置きが長くなってしまいましたが(私の記事では恒例)、どうぞお楽しみください。 ※この記事においては、単位の接頭辞「μ(マイクロ)」は「u」と表記しています。例えば、静電容量の単位「μF(マイクロファラッド)」は「uF」と表記しています。 材料 今回の作品制作に使用したものとその費用をまとめています。この表は文化祭1週間前の9月10日であり、電子版では要素が増える可能性があります。 尚、ここでは物理部または家にあって新規購入しなかったものの費用は0円としています。 導線や抵抗器、ネジなどの細かい部品は数えるのが面倒だったため含んでいません。 使用したもの 入手元 数量 費用 ウーファーユニット FaitalPRO 6FE100 物理部 2 ¥0 ツイーターユニット Panasonic EAST6PH08F6 デジット 2 ¥200 手製空芯コイル 345uH 物理部 2 ¥0 手製空芯コイル 780uH 物理部 2 ¥0 フィルムコンデンサ 4.7uF 物理部 2 ¥0 フィルムコンデンサ 6.2uF 物理部 2 ¥0 両面ユニバーサル基板 Dタイプ AE-D-TH 物理部 2 ¥0 ファストン端子 #205メス LTO-21T-205N 物理部 4 ¥0 ファストン端子 #110メス LTO-01T-110N 物理部 4 ¥0 フェルール端子 AI1.</description></item><item><title>電子工作や、物理のお話など総集編</title><link>https://asanobuturi.github.io/document/2018/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/15/</guid><description>はじめに こんにちは、こんばんは。副部長兼会計兼電子工作班班長、高1の安藤です。今回が3回目となります。2年前は壁に沿って走るロボットの製作記（懐かしい…）、去年はArduinoについてまとめ、早いものでこれを書くのも来年が最後になってしまいました。毎年読んでくれる方がいるのであればただただうれしい限りでございます。この3年間もいろいろありましたね。いつしか、3つも役職を持つとは…。
さて、今年の部誌の内容ですが、これを書いている時点でまだはっきりと決まっておりません(大丈夫なのか?6月5日←提出期限まであと1か月)。はっきりととは言っても去年と違い「はじめに」が「0」なので、方針は決まってはいます。
今年の部誌は短編集形式で行きたいと思います。弁解をさせてもらうと、後に述べる四足歩行のせいで、まともにはんだ付けをしていない期間が長く、そのブランクのために、1つのことで深く掘り下げるものもなく、また書きたいことも多かったからです。
長い長い前置きもここらで閉じさせてもらおうと思います。
参考文献については、最後にまとめて書いておきます。
4足歩行ロボット製作記 はじめに 最初に部品を買い始めて約1年と4か月が過ぎた先日、数々の困難を乗りぬけて、ついに4足歩行ロボットが正常動作しました。マジ大変だった。ここまで来るのに。もう少し早く終わっていれば、他のことにもさらに精を出せたのになぁ、とか今になって思ったりもする。この部誌を読むにあたって、部品などの基礎知識については、ある程度知っていることが前提です。電子部品について、全くわからないのであれば、先に5の内容を読むことをお勧めします。
材料 Arduino Uno(今回は互換品である、Maruduino Uno を使用)　×1 RCサーボモーターS03N-2BBMG/F　×9 測距モジュール GP2Y0A21YK　×1 1/4W 10kΩ 抵抗×2 積層セラミックコンデンサ 0.1μF50V　×1 タクトスイッチ×2 ピンヘッダ オスL型(40ピン)　×1 ピンヘッダ オスシングル型(40ピン)　×1 DCジャック MJ-179P 2.1mm標準　×1 ユニバーサル基板(大きさ的にはICB-93Sがちょうどいい)　×1 タミヤユニバーサルプレート　×1 乾電池9V　×1 乾電池単3型　×4 電池ボックス単三型4本　×1 電池スナップDCプラグ付き　×2(電池ボックスやスナップは自分の好きなタイプを選ぶほうが良い) アルミ板　適量 ビス、ナット　必要な分だけ ワッシャー100個入りを買うとよい。あるとかなり便利 両面テープ、ゴム板など 部品について軽く説明をします。4足歩行ロボットを作るというのに材料はこれだけ?と思う人もいるかもしれません。展示しているのをよく見てもらうと、基板の部分についている部品が少ないことに気づくと思います。これは、4足歩行するロボットの原理がそこまで難しくないことを意味しています。それを1から設計するとなると、部品や回路の知識であったりが必要なのですが、今回はまねて作ったものなので、作ってみて、自分でもよく原理を理解しながら作れました。サーボモーターを一気に9個動かしながら、センサーでは、壁との距離が近すぎると離れるようにするという回路を作って、同時に信号をArduinoに送るという感じの回路です。
これを作っている期間が長かったので、他の団体の展示会とかにも行ってみたりしたのですが、よく展示されているロボット、たとえば2足歩行ロボットなどは、動きをすべてサーボモーターでやっていました。普通のよく見るモーター(DCモーターというのですが)は、限度がなく、基本的にずっと回り続けますよね?しかしながら、サーボモーターは永遠に回り続けるというものではなく、角度を調節しながら、動いたり、止まったりすることのできる、いわばDCモーターの上位互換です。ただし、回ることのできる角度には大体制限があって、DCモーターのようにずっと回り続けることを目的に作られた部品ではありません。そのため、基本的に制御が必要な部品です。そのため今回ではArduinoを使っています。
そして電源なのですが、9Vの乾電池と、単三乾電池4本、すなわち、6Vを電源にしています。これは、考えればわかるのですが、Arduinoを動かすための電源として9Vを使い、モーターで6V使うということです。9個もの、サーボモーターを動かすとなると、さすがに、9Vの乾電池1つでは足りなくなるので、別電源としています。ちなみに、この電池、減るのがとても速いので、電池が原因で動かなくなるというのもよくあります。対策としては、コンセントからの電源をDCジャックに変換して供給するか、エネループなどの充電式の電池を使うほうがいいと思われます。
アルミ板に関しては、綺麗に切る方法を熱心に探していた期間も長かったので、かなり資材を浪費してしまいました。面積的には、よく、ホームセンターの木材売り場の近くにある、銅板や、鉄板や、ステンレスの板などとともに売っている、金属板の売り場にある1000円くらいのアルミ板の大きさで十分です。
ワッシャーは、あるととても便利です。アルミ板を綺麗に切断してもなお、素人のできる正確さには限度があると、自分でも痛いほど身にしみてわかっています。なので、その時のずれを、特にねじ止めするときに、修正できるのがワッシャーです。必須とまでは言いませんが、あったらとても助かると思います。
軽くとか言いながら、これだけ説明してしまいました。これだけ苦労して時間もかけて作ったので言いたいことがたくさんあるんだなぁと思って流してくれれば幸いです。でも、割とあって助かる情報も書いてあると思います。
(追記)詳しい話は、5の部分でも書いてあります。
回路 これが、回路です。本にあったものをスキャンして、加工したものです。見ての通り、回路は割とシンプルです。プログラムするときは、各々のサーボモーターをArduinoにさした時に、どこを動かす部分のサーボモーターかを覚えておかなければいけません。あと、注意すべきところは、電源が2種類あるというところです。
制作の様子 回路について 参考にしている本が、買った当時はまだ発売されたばかりで(今は改訂版も出されている)、回路図を当時あまり参考にしていなく、基板の図を見ながら作っていて、その図が間違っていたために、基板が完成するのにとても時間がかかってしまった。
筐体の組み立てについて ここが、最も苦労したところであり、そして最も時間がかかったところである。これだけで、軽く10か月使っている説はある(諸事情により、中3の3学期は、部活にきて作業することが少なかったのだが)。アルミ板を切るだけではなく、曲げ加工をするのもとても大変だった。
加工初期 作業を始めた当初、それも去年の文 化祭が始まる前、本にはアルミ板で、4 足歩行ロボットを作ると書いてあったので、楽しそう だなあという感情もあって、挑戦してみることにした。ここからが、中学校生活終盤から高校 1 年生の中間考査が始まる前まで続く地獄の始まりだった。</description></item><item><title>投擲について</title><link>https://asanobuturi.github.io/document/2018/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/6/</guid><description>はじめに 何故投擲について書こうとしたのかというと、歴史で世界大戦について学習しており、過去の戦いについて大きな役割を果たした投擲武器について興味が湧いた故、書いていきたいと思う。
扱いや特徴 まず投擲の道具（投擲具）と言われて何を思い浮かべるであろうか。円盤、槍のようなものはたまた石を思い浮かべる人もいるかもしれない。実はこれらすべてが投擲具であるのはもちろんの事、手裏剣や催涙弾、漁網までもが投擲具なのである。
そもそも投擲具は人類の発展によって狩猟用にうみだされたものである。
はじめこそ石を投げるような単純かつ威力の低いものではあったのだが、長い年月を重ねた末に投げナイフ、カタパルトといった殺傷能力のある凶器へと姿を変えていった。
それは間接的にいさかいを生み、後々に手を付けられなくなるのではあるが一先ず先に行くとしよう。
投擲道具のすばらしさ ここでは投擲道具の代表例としてオリンピックで扱われている砲丸投げですばらしさを伝えていきたいと思う。
ここで唐突に物理の話に入るとしよう。
ここでは男子の砲丸の重さ（8kg）で計算する。（空気抵抗や風を考えないものとする。）世界記録は約20m飛ばしているから、水平距離20m、角度θ、時間t、初速度νとすると、\[ tan \theta = \frac{ν}{\sqrt{ν^2+4g}} \]となる。
世界記録を出したバーンズ選手は身長194cmと大きく、体重も140kgそしてとても「手が大きい」ので、約35度で投げたものと思われる。
大抵の選手は首下のあたりから投げるので、 \[ 10 tan \theta = x \]よって約7mである。
よってこれは首下までの高さが1.5mであるから、8.5mからの垂直落下に等しい。
よって地面に与える力は\[ 8.5 × 9.8 × 8.0 = 666.4 \]。そしてこれは軽自動車一台分に相当し、かなりの重さになると分かっていただけたであろう。
投擲の扱われ方 前章によって投擲のすばらしさはわかってもらえたと信じている。
一方、投擲の発明によって人を殺めることが容易になってしまったともいえるであろう。
例えば、カタパルトである。カタパルトと恰好良くいっても投石機の事である。石を投擲して、敵の城や敵自身を攻撃するため攻城兵器と呼ばれていた。その頃はまだよかったのであるが、第一次世界大戦から、科学技術の発展により、フランスは手榴弾を投擲するようになってしまったのである。これによってドイツ軍に大量の死者が出て、白熱させ戦争をこじらせてしまったのは言うまでもないであろう。
まとめ それからというもの投擲はオリンピック競技での平和の象徴として、一種の競技としてだけでなく、紛争地での手榴弾投げ込みのため、または、デモ鎮圧のための催涙弾の投げ込みのための技術として使われるようになってきている。
我々は、現代の技術が戦争を通じてきたものであり、何のために使うべきなのかしっかりと考えていくべきである。</description></item><item><title>当たり判定</title><link>https://asanobuturi.github.io/document/2016/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2016/6/</guid><description>はじめに こんにちは。物理部PC班ではゲームを作っていますが，そのゲームを作る中で多分最初の難関が「当たり判定」ではないでしょうか。ここでは，どのようにして当たり判定が行われているのか説明したいと思います。
かなり難しくなってしまったので，読み飛ばしてもかまいません。そして，ここに書いてある当たり判定は実際に必要になった時に自分で考えたものなので，もしかしたらもっといい方法があるかもしれません。
また，図は適当に書いたものなので，参考程度にしてください。
座標とは まずは，「座標」について説明したいと思います。（座標は中学で習うので，ここに書かれていることは分からなくても気にしないでください。）
座標とは下のようなものです。例えば，点Aのx座標は７，y座標は５というような感じです。
ただし，数学で言う座標は普通，↑のことなのですが，コンピューターの画面で言う座標はこれとは違って，一番左上が（０，０）で，横に行くほどｘが大きく，下に行くほどｙが大きく（ｙだけ逆に）なっています。
PCやテレビの画面をよく見ると，ドットがたくさんあるのがわかりますか？そうです。これの一つ一つに座標が割り振られていて，一番左上が（０，０）です。そして，今のほとんどのテレビ（フルハイビジョン）は横に1920個，縦に1080個あります。ゲームなどでも，ウインドウの中の一番左上を（０，０）としています。
点と点の当たり判定 さて，ここからは実際に当たり判定を考えていきましょう。
まずは，点Aと，点Bの当たり判定をしてみましょう。
例えば，A（３，５）とB（２，５）があった時，これは重なっていますか？もちろん，重なってないですよね。つまり，点と点の当たり判定をするときはそれぞれx座標とｙ座標が等しいかどうかを判定するだけです。
つまり，右のとき，「AｘとBｘが等しく，AｙとBｙが等しいとき」，この２つの点は，重なっているということになります。
長方形と長方形の当たり判定 つぎに，一気にハードルを上げて長方形と長方形の当たり判定をしてみたいと思います。 ただし，長方形は傾いていないものとします。
例えば上のような２つの長方形があったとします。この２つはどのように当たり判定をすればいいと思いますか？
（この微妙な空白を埋めるのに少 しお付き合いください。）
実は，一番最初にこれの当たり判定をしようとした時，それぞれの点が長方形の中に入っているかどうかで判定をして，長方形と長方形がクロスしている（スイスの国旗みたいな形）パターンを見落としていて，４時間それに気づかず悩まされたときがあります。（実話）
その後，いろいろ調べてみると，下のように判定する方法を見つけました。よく使われる方法は下のようにｘ軸とｙ軸を分けて考えるという方法です。
まずx軸について。
下に，考えられるものをすべて上げてみました。下のどの場合でもあたっていることにすればいいので，「DxがAxより大きく（右にある），CxがBxより小さければ（左にあれば）」当っているということになります。
同じようにy座標も考えて，「DxがAxより大きく，BxがCxより小さく，DyがAyより大きく，ByがCyより大きければ」当たったということになります。（点Aは点Bより左上，点Cも点Dより左上とする）
円と点の当たり判定 下のような円（半径をｒとする）と点の当たり判定をしてみましょう。
実は，円と点の当たり判定は長方形と長方形の当たり判定よりはるかに簡単で，「円の中心から点までの距離が円の半径より短ければ当たった，長ければ当たっていない，同じなら点は円上にある」です。（点と点の距離を求める公式は中学で習います。）
円と円の当たり判定 一見むずかしそうな気がするのですが，じつはこれも簡単（こんなに小さなところに書 けるくらい）で，「それぞれの中心の距離がそれぞれの半径の和より小さければ」当たったとなります。
線分とx軸に平行な線分の当たり判定 （「線分」とは，長さが決まっている直線のこと。「直線」の長さは無限。あれ，矛盾してる。）
線分と線分（x軸に平行かどうかわからない）の当たり判定はかなり難しいので気になる人は自分で考えてみてください。
まずは，上のような２本の線分があったとします。（Cy＝Dyとする）濃い線を線分AB，薄い線を線分CDとします。
最初に，長方形と長方形の当たり判定でもやったように，y軸だけを考えます。
上の場合は，AyとByの間にCyがないので，絶対に当たらないですよね。つまり，１つ目の条件は「AyとByの間にCyがある」と当たっているです。
次に，上の条件に当てはまっているとき。
直線ABと直線CDの交点（交わっている点のこと）を求めて， その点が線分CDの上にあるかを判定すれば，当たり判定ができます。つまり，「AyとByの間にCyがあり，２つの直線の交点のx座標がCxとDxの間にあれば」当っているということになります。
おわりに ここまで読んでくれてありがとうございます。m(__)m
少し駆け足な感じになってしまいました。たぶん最後までわかったという方は少ないのではないのでしょうか。分からなくても入試に出ることは無いと思うので，無理に理解する必要はありませんが，どのようにして当たり判定がされているか少しでも興味を持っていただけたら幸いです。</description></item><item><title>微分・積分回路の仕組み</title><link>https://asanobuturi.github.io/document/2017/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2017/5/</guid><description>おはこんばんちわ。今回はオペアンプを使用したバンドパスフィルタ(特定の周波数の波だけを通すフィルタ)の仕組み、また、その仕組みを利用したオーディオ関連の道具の設計について紹介したいと思います。
オペアンプって何だ? (図1を参照のこと)三角形の部分がオペアンプを表しています。これはオペアンプ回路の基本的な使い方なのですが、その機能は入力された信号が$R_1/R_2$倍された電圧で出力されるというものです。この、どれだけ電圧が大きくなるかの数値を利得といいます。
当然、$R_1$の値が0になれば利得も0になります。
コンデンサの性質 (図2は回路図での表し方)
コンデンサには“特定の周波数より高い波を通し、低い波を通さない”という性質があります。周波数が低くなるとともにインピーダンス(電気の通しにくさ)が大きくなり、高くなるとインピーダンスが小さくなる、つまり周波数とインピーダンスは反比例の関係だということです。インピーダンスが増加する周波数はコンデンサの容量によって変化し、容量が小さいと高くなり、容量が大きいと低くなります。
微分回路 それでは、ここで図1の$R_2$がコンデンサ($C_1$)に置き換わった場合を考えましょう(図3参照)。うえで述べた$“利得=R_1/R_2&amp;quot;$が$“利得-RI/(C_1のインピーダンス)”$となるわけです。分母となる$C_1$のインピーダンスが周波数によって変化するわけで・・・
周波数高→インピーダンス小→利得大
周波数低→インピーダンス大→利得小
というように、周波数が高いほど利得もも大きい回路になるわけです。これを微分回路といいます。
積分回路 微分回路とは逆の回路だと考えれば良いです。今度は$“利得=(C_2のインピーダンス/R_2)”$となり・・・
周波数高→インピーダンス小→利得小
周波数低→インピーダンス大→利得大
というように、周波数が低いほど利得が大きい回路になるわけです。これを積分回路といいます。
フィルタとして使おう(*^^)v 例えば、色々な周波数が混ざった信号があるとき、微分回路をつかえば特定の周波数より高い信号だけを増幅することが出来ます。つまり、高い周波数だけを選択して取り出すことが出来るのです。このような使い方を“ハイパスフィルタ”と呼びます。反対に、積分回路を使って低い周波数の信号だけを取り出す使い方を“ローパスフィルタ”と呼びます。ハイパスフィルタとローパスフィルタを組み合わせることで、特定の周波数だけを取り出すことも出来ます。この使い方はバンドパスフィルタと呼びます。
応用例その1“バンド別レベルメーター” 音楽などのオーディオ信号には、低音域から高音域まで幅広くいろいろな周波数の音が混ざっています。たとえば、その中から特定の楽器の音だけ取り出したいとき、バンドパスフィルタを使うことでその楽器の周波数の音だけを取り出すことができます。このとき、近い周波数を持つほかの楽器の音も取り出してしまうのですが、聞いているうえではそれほど気になりません。
図6のように、増幅したオーディオ信号をフィルターを使い3つの音域に分け、それぞれをレベルメーター(音量を光で表す装置)につなげたものが“バンド別レベルメーター”です。低音域ではバスドラムにあわせて、中、高音域ではそれぞれ歌声やシンバルの音にあわせて光がちらちら動く、というような見ていて楽しめる装置です。
今回の文化祭で作品として展示してあるので見ていってください。
応用例その2”グラフィックイコライザ” フィルタを使うことで信号の好きな音域だけ増幅することもできます。まず、図7のような回路を考えてみましょう。このとき、ボリュームを調整すると利得を変えることができます。では$R_3$をフィルタに置き換えてみましょう。そうすると、フィルタが通す音域だけの利得を可変できる回路になります。また、異なる音域のフィルタを並列させることで、いくつもの音域の利得を同時に調整するころもできます。(図8を参照)
このように、ボリュームをいくつか並べてオーディオの信号を変えられるようにする機械がグラフィックイコライザです。また、並列するフィルタの数に応じて”〜バンド別イコライザ”という名前になったりします。
まとめ このように、オペアンプにはさまざまな使い方や活用法があります。まさにアナログオーディオにとっては欠かせない存在です。この記事を通して、アナログ回路、自作オーディオ(そして電子工作班!)に興味を持っていただけると嬉しいです。
実をいうと、いままで紹介したような回路は現在のオーディオ分野ではほとんど使われていません。というのも、今日ではほぼすべての機器がデジタル制御できるようになっているため、アナログ回路は必要なくなっているからです。また、アナログ回路にはノイズが入りやすい、放熱が必要、等の欠点もあります。
そんなアナログな機器は入手することができません。つまり、自作するしかないということです。
以上、マイナーな趣味の話でした。</description></item><item><title>部長挨拶</title><link>https://asanobuturi.github.io/document/2016/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2016/1/</guid><description>今年も文化祭の時期が近づいて来ました、台風も近づいていますが多分文化祭前に通り過ぎてくれるはずです。文化祭直前に東京沖で発生とか許されないからね？物理部では主にパソコンでのゲーム制作と電子工作をやっていますが、どちらも小学生の皆さんには馴染みが薄いかもしれません。電子工作は勿論、その手の体験教室でもないとやりませんし、パソコンの方も今の小学校だとどのくらい授業でやるのでしょうか。
さて、今の小学5年辺りは一部でスマホネイティブ世代とも呼ばれています。初の本格的なスマホであるiPhoneが日本で発売されたのが2008年、人によっては小学1年からスマホと慣れ親しんできた人もいるのではないでしょうか。
一昔前までインターネットを使おうとすればその手段はパソコンが主なものでした、そういった意味で20年ほど前からパソコンは人々の生活必需品とも言えました、その形がスマホの登場により大きく崩れようとしています。というか既に20代を中心にパソコンを普段使わない層が出来ています。
実際、パソコンはあと数十年もすれば一般家庭からは完全に淘汰されると私は思っています、恐らく企業ではもう暫く現役でしょうが。そんなパソコンに残った立場の一つがこの展示にあるゲーム開発です。これを機会にパソコンというものに触れてみてください。
私自身がパソコン班なのでパソコンに関する話題が大半になってしまいましたが、今年は電子工作もすごい(ことになっているらしい)です。是非楽しんでいって下さい。
2016/09/08 物理部部長 大浦</description></item><item><title>部長挨拶</title><link>https://asanobuturi.github.io/document/2019/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/1/</guid><description>ついにこの文章を書く年になってしまいました。自分にとって最後の文化祭ということです。後半の3年間は物理部の文化祭に多く関わっていたというのもあり、あまり作業ができなかったりしました。
さて、今年の文化祭ですが、100周年の文化祭ということで、例年通りではないところが細かいですがいくつかございます。パンフレットを見てもらってお分かりいただけたでしょうが、今年の文化祭は数学同好会とコラボしております。また、壁新聞なども本格的な導入はこの部活では今年が初めてだったりしております。作品メインだったこの部活の展示の雰囲気を少し変えてみました。その他にも少しだけいつもと異なっているところがありますが、探してみてください。
ところで、2年前の部長は部長挨拶にて、「マイナスからゼロに戻しただけ」という言葉を使っていましたが、文化祭における土台を作ったのは彼でした。なので、今年の文化祭でプラスにできたでしょうか。正直言って、部活の雰囲気についてはこの1年間でよくしたという自負がございます。2年前は「PC班を捨て」たので、かりそめの姿での「ゼロに戻した」のですが、今年は根本的なところから「ゼロに戻し」、多少プラスのものになったと信じたいと思います。
今年以降、自分は文化祭の運営をすることはありませんが、文化祭の運営だけでなく、たくさんいる後輩の教育も過去にはないくらい自分はやってきましたと断言します。なので、来年度以降は今年度よりもより良い文化祭ができるであろうと期待しております。今年は、メインで動ける高校生がほとんどいなかったのに対して、中学生はよく頑張ってくれたと思っています。改めてこの場で感謝を申し上げます。
最後になりますが、今年の物理部展♯2019with数学同好会に来て下さりありがとうございました。来年はどうなっているか知りませんが、物理部と、数学同好会の展示が楽しんでいただけたのならば幸いです。</description></item><item><title>部長挨拶</title><link>https://asanobuturi.github.io/document/2021/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/1/</guid><description>「ついにこの文章を書く年になってしまいました。」
二年前に部活を卒業した先輩が遺した言葉です。この頃はこんな言葉とも無縁で、今まで通りの日常、そして部活動がずっと続くとばかり思っていました。
ですがどうでしょう。この有様です。これで部活動が今まで通りにできるわけでもなく、特に夏休みの活動は活動時間も、活動日も半分以下になってしまいました。一年を通しても大きな比重を占める夏休みの時間が削られるわけですから、文化祭の準備もおろそかに…いや、それでも最善は尽くせたと考えましょう。今ある時間でできることを着実にやるしかありません。普段何かと理由を付けて作業をしない後輩にも聞かせてやりたいぐらいです。
さて、今年の文化祭ですが、いくつか変えてみたところがあります。一番目に付くのは部屋の配置でしょう。今まではPC班と電工班で一部屋ずつ分けて展示をしていたのですが、今年はあえてPC班と電工班を混ぜて展示してみました。というのも、電工班での滞在時間がPC班と比べ短いので、そこを平均化してより多くの展示に触れて欲しいのもありますし、電工班員があまりに少なく一部屋に展示できるだけの作品を用意できないというのもあります。後者が大きいのでしょうか、電工班をずっと引っ張ってきた身としては悲しい話です。
また、数年前から始まった壁新聞も今年は大判プリンターで印刷することになりました。今までは模造紙に油性ペンで手書きしていて、これがかなり時間を喰うのです。そこで去年は家庭用のプリンターで、A4の紙に分割して印刷することにしてみました。とはいえこれでもA4の紙を繋ぎ合わせる手間が掛かります。そこで実行委員から大判プリンターが使えるという話を聞いたのです。これはもうやるしかないでしょう。
あとは参加団体名ですかね。「物理部展 # 2021」ではなく「物理部展 丼 」です。丼 です。きっかけは2018年の「物理部展#2018」でした。当時の部長がふざけて（本人は大真面目だったのかも？）&amp;quot;#&amp;ldquo;の真ん中に点を打って丼にしてしまったのです。しかしその時は文化祭の実行委員に気づかれずそのまま&amp;rdquo;#&amp;ldquo;になったのですが、以降&amp;rdquo;#&amp;ldquo;の真ん中に点を打って#か丼か紛らわしいようにして、その年の実行委員を試すということをずっとやっていたのです。
そうしたら今年、なんと実行委員が初めてこれを丼とみなしてしまって、晴れて今年の展示名が「物理部展丼2021」となったのです。こんなことってあるんですね、という感想しかありませんが。
そして部長としての二年間を振り返ってみて、思えば先輩からの「続投は部活が崩壊するからやめとけ」という制止も振り切って二年目も部長のポストに居座ったわけですが、やはり自分の裁量で物事を進められるのは気が楽です。何をやるにも報告、連絡、相談なのは面倒で仕方がありません。そういう性格なんです。（後輩がそうしないのは困りますけど）
ただ学校側に提出する書類などは全部管理しないといけませんし、そういう面倒さはあったのでしょうか。ただ面倒なら後輩に任せればいいので、特に気になりませんでしたね。
あとは後輩はまだしも、一部は先生や友達からも「部長」と呼ばれるようになりました。部長に就任したての頃はある種の高揚感すら感じたのですが、今は何とも思わなくなってしまいました。文化祭が終わって部活を引退したらどうなるんでしょうか。「元部長」なんでしょうか。そろそろ名前で呼んで欲しいんですけど…。
関係ないことまで色々書いてしまいましたが、最後に挨拶だけ。物理部展丼2021にお越しいただきありがとうございました。今年は（今年も？）準備期間も短くお見苦しい点もあるかもしれませんが、そこは後輩に期待しましょう。ぜひ来年もお越しください。</description></item><item><title>部長挨拶</title><link>https://asanobuturi.github.io/document/2022/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/1/</guid><description>今回はご多用の中物理部の展示にお越しくださいましてありがとうございました。 ここ数年の間で今年がはじめてまともに文化祭を開催できる年になったのではと思います。2019年度は打越祭2日前に京急線でのトラック衝突事故が発生。2020年度はコロナウイルスの影響で校内関係者のみ、2021年度は生徒による招待者のみの来場となりました。また2021年度は上記に加え2日目にJRの変電所火災により京浜東北線が運転見合わせとなるということもありました。最高学年である私たちの学年にとって(語弊があるかもしれませんが）まともに文化祭が開催されたのは2018年度、中学1年生だった時のみです。これが何を意味するのか。それは物理部の大半は「通常の」文化祭を運営側として経験したことがないのです。 そのため手探りでなにかと不手際があるかもしれませんが、温かい目で見ていただけたのであれば幸いです。</description></item><item><title>部長挨拶</title><link>https://asanobuturi.github.io/document/2023/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2023/1/</guid><description>初めまして,2023年度部長です。
とうとう,この部長挨拶を書く時がやってきました。
文化祭&amp;hellip;そうか,もうすぐ部活が終わるのか&amp;hellip;
5年間は長いようで短く,あっという間に過ぎ去ってしまった&amp;hellip;
そんなことを書いている前任者らを見てきましたが,そうは思えません。
ここまでとても,とても長かったです。何故こう感じるのでしょうか,私が変なんですかね。
部長になって,部員達と仲良くなって。
今年はまさしく仲間に囲まれた年だった,と感じています。
同時に,予想外のことばかりで最も自分の変化が大きかった時間であったとも思います。(毎年思ってますが&amp;hellip;)
もし,入学したての頃の自分に現状を説明しようとしたら,上手く伝えることはきっとできないし,
自分でもなんでこうなったかさっぱり分からないけれど。
最初思っていたみたいに部活は簡単なものではなかったけれど(むしろ歯ごたえがありすぎたけれど)
自分で思っていたより,ずっと楽しいものでした。
そして,現役の部員やOBの先輩,顧問の先生方には,今まで本当にお世話になりました。ありがとう。
&amp;hellip;さて,思い出に浸るのはこの位にして。物理部を,そして打越祭を,楽しんでいってくださいね。</description></item><item><title>部内で鯖を飼育する</title><link>https://asanobuturi.github.io/document/2022/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/11/</guid><description>鯖（生き物ではない） 鯖 サーバー(server)コンピューターのこと。コンピューター・ネットワーク上でクライアントから受けたリクエストに対し、様々なサービスを提供するシステム。 &amp;ndash;(株)朝日新聞出版発行「知恵蔵」より
もちろん生き物の鯖ではありません。物理部の劣悪な環境下では魚の鯖はおそらく飼育不可能でしょう。
鯖を飼う理由 物理部ではいままで部員にWindows搭載ノートパソコン等を購入することを部員に推奨してきました。これは物理部の限られた部費で部員全員分のコンピューターを用意するのが困難なためです。実は物理部の部員は100人ほどいます。なお部活出席率は普段から部活にいる20人分のコンピューターを部活動が負担するのは到底不可能です。データをローカルに保存する都合上、毎回の部活で利用するコンピューターが固定されることになります。国税庁が言うにはコンピューターも消耗品、耐用年数は5年とされています。プログラミングや動画編集などを行う都合上ある程度のマシンパワーが必要になってくるため1台当たりの値段はかなり高額になります。 そこで考えたのは「部内にNASを立ててそこにデータを保管する」というものでした。しかし市販のNASを買って設置するだけでは面白みに欠けます。そんなわけで部内にファイルサーバーを建てるという結論に(自分の中で)達しました。
鯖の品種（パーツ）の選定 サーバーたるものやっぱり常時起動は見据えなければなりません。また浅野学園では生徒は学校のネットワークを利用するのを利用することは禁じられているため、部内ネットワークを立てる必要も出てきました。
CPU マザーボード メモリー SSD グラフィックカード 電源 ケース オペレーティングシステム Wi-Fiルーター それぞれ選定品とその理由を説明できればと思います。またCPU～グラフィックボードは実店舗で購入できるかどうかも判断材料に含まれます。
CPU 今回はIntel Corei3 10105を選択しました。理由は簡単。現行のCoreシリーズで一番省電力だから。サーバーなのでやっぱり電力は気になります。市販のNASではCeleronなどが一般的ですが、将来的にサーバーからデスクトップコンピューターに生まれ変わることも見据えて Core i3を選択しました。 マザーボード ツクモでメモリースロットが4本で一番安かったASRockのH570M Pro4を選択しました。無駄に光ります メモリー メモリーはファイルサーバーで割とこだわるべき場所な気はします。無難に8GB2枚組です。 SSD ファイルサーバーでかなり重要な場所です。これを適当に決めてしまうと故障によってファイルの消失もあり得ます。今回はシステムドライブとデータドライブを分けることにしました。システムドライブはADATAのSATA120GB、データドライブは信頼性と速度を重視しKIOXIAのM.2 1TBモデルを選択しました。 グラフィックカード 所詮ファイルサーバーなので高性能なものは必要ありません。当初はCPUは内蔵グラフィックなしの下位モデルを選択し、日本最安グラフィックカードのGT710を使用しようかと思いましたがツクモに行ったところCPUの価格差があまりなかったので内臓グラフィック搭載のCPUを選びました。強いて言うならIntel UHDグラフィック630でしょうか。 電源 これはサーバーで一番おろそかにしてはいけないものじゃないでしょうか。激安の電源ユニットを利用して発火したら洒落になりません。比較的安め、ある程度の信頼はできる玄人志向の450W電源を選びました。 ケース 別にケースは性能に直結しないのでどんなものを選んでもいいのですが、物理部は収納スペースの都合上スチールラックの上に設置することになったので横置きケースを選ばざるを得ませんでした。これで地震が来ても大丈夫(なはず)。 オペレーティングシステム ファイルサーバーとして運用する都合上管理は簡単なほうがいいに決まってます。そのほうが引き継ぎも楽です。詳細は後ほど。 Wi-Fiルーター サーバー設置場所と物理部の普段の活動場所との間には鉄製の扉が2枚あります。そのためアンテナが本体から飛び出しているもの且つWi-Fi6に対応していて、ちょうど購入時にAmazonセールで安かったTPLINK AX4800を購入しました。 鯖のOS オペレーティングシステム、これはかなり迷いました。ubuntuを利用してもよかったのですが、後輩への引き継ぎが困難を極めると予想したため、データ保管サーバー用のOSとしては定番なOpenmediavaultで環境を構築しました。このOSはWeb上で簡単に操作できるのが特徴です。やっぱり操作しやすいのはいいですね。
トラブル OpenMediaVaultをインストールした後にトラブルが発生しました。それは「OpenMediaVaultがIntel I219-Vを認識してくれない」というものでした。Intel I219-VはマザーボードのRJ45(=LANコネクタ)の端子です。調べてみるとOpenMediaVaultを導入する前にUbuntuをインストールし、I219-Vのドライバーを導入しないといけないらしい。いまさら再インストールするのは時間がかがりすぎると感じたので、SSDのみI219-Vを搭載していないPCで起動させ、そこで初期設定のみ進めることにしました。インターネットに繋げられないのですばらしいWeb操作も一切できません。ずっと黒い画面とにらめっこ。精神的にもつらい。
ファイル構成 前述の通りこのサーバーにはデータドライブとして1TBのSSDがあります。そこで今回は以下のように割り振るようにしました。
1 2 3 KIOXIA 1TB SSD ├ goole drive backup -250GB └ data -750GB google drive backupは物理部の共有ドライブの内容をクローンする予定でしたが、時間がないので後輩に頑張ってもらいます。 割り当てさえ決まったらあとはSMBを有効にしてPCからログインするだけです。</description></item><item><title>物理部員辞典</title><link>https://asanobuturi.github.io/document/2002/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2002/5/</guid><description/></item><item><title>物理部的自作パソコン購入術</title><link>https://asanobuturi.github.io/document/2004/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2004/4/</guid><description>と、いうわけで今回自作について語らせていただく松永です。
個人的に好きである自作についてのあれやこれやを書いて、みなさんにも自作の楽しみなんてものがわかって貰えればと思いつつ。
わかりにくい単語には注を入れて、なるべく分かりやすい購入術なんてものを目指します。よろしくお願いします。ハイ。
さて、自作自作言っていますが、自作ってのはそもそも自作パソコンのこと。
自分で好きなパーツを選んでオリジナルパソコンを作る&amp;hellip;とまぁそんな感じですね。
夢があるじゃないですか、自分で考えて買って作ったパソコンが動いた時なんてもう&amp;hellip;
それでは、各パーツについて行ってみましょう!
CPU(しーぴーゆー) 日本語にすると中央演算装置なんて呼ばれているものです。パソコンの要。
主にパソコンの計算なんかをします。これによってパソコンの性能がだいぶ変わってくる。
巷のパソコン雑誌じゃ&amp;quot;パソコンの脳みそに当たる部分ですね&amp;quot;なんて書かれていることがありますが、人間に当てはめてみたら何のことだかサッパリわかりませんね。
何しろ人間の脳みそはCPUと違って、計算は元より記憶なんかも司っていますしね。
代表メーカー
・Intel(Pentiumシリーズ)
・AMD(Athronシリーズ)
安定性を求める・パソコンをテレビパソコン1として使いたい・高度な演算処理を沢山したい(?)な方はPentiumシリーズ、特にPentium4をお勧めします。コストパフォーマンス2を求める・俺はゲームしかしないぜっ!な方はAthronシリーズをお勧めします。
一部ゲームではPentiumの方が同価格でも高機能な場合があります。一般的にはAthron2500+やPentium4 2.8Gで事は足りると思います。
マザーボード この板の上にすべてのパーツを取り付けて、ケースの中に納めます。
戦隊物でいうと、母艦みたいなものです。母艦の中にはヒーロー達が使う超合金な機械(=他のパーツ)を入れることができます。そんな感じのパーツがマザーボードです。
ただし、他のパーツが5つ集まっても合体はしません(当たり前だ
このパーツを購入する上で気をつけなければならない点は、
予定しているCPUに対応しているマザーボードなのか 予定しているメモリに対応しているマザーボードなのか サウンド3はオンボード4なのか否か グラフィック5はオンボードなのか否か AGPスロット6はあるか などが具体的には挙げられると思います。
察していただけたでしょうか。このパーツは最後に選んでください。
自分のしたいこと等が決まり、購入するCPU等が決まったところで決めてください。
じゃないと酷い目見ます。理由は対応していないCPUだったりメモリだったりするとパソコン全部が動かないからです。簡単ですね。
代表メーカー &amp;hellip;を挙げたいところなのですが、このパーツ、いろいろなメーカーが作っている割に、大した違いがありません。自分の用途の条件を満たしてさえいればどのメーカーのマザーボードを買っても大差ないと思われます。
同梱物の量で決めてもいいかもしれません。
グラフィックボード 主にAGPスロットに挿し、映像を出力するために使うボードのこと。
ここでは最新のPCI-EXPRESSについては割愛させてもらいます。
映像を出力です。ここ重要。選ぶのが一番大変なところだと思われます。
選択肢が何しろ多い!どれくらい選択肢が多いかというと、
星のカービィで自分のデータを消去しようとしたときに選ぶことのできる選択肢の数くらい選択肢が多い!(わかりにくい
このパーツを購入する上で気をつけなければならない点は、
・自分の用途にあった性能なのか
・挿しこむ場所はAGPスロットなのか
PCIスロット7なのかなどが挙げられると思います。大抵、最新のゲームなんかをバリバリ動かさない限り機能を使い切るという事は無いでしょう。要は大抵のものがオーバースペック8。
グラフィックボードには、&amp;ldquo;ブランド&amp;quot;みたいなものがあり、大きく分けて2種類(+1種類)程度に現在は分かれています。
〜ブランド〜
GeForceシリーズ
RADEONシリーズ
(Parheliaシリーズ)
と言った所でしょうか。
正直、買おうとする度に何にしようか迷うくらいなので、評判はしっかりチェックしてから買ったほうがよさそうです。
メーカーによってもだいぶ差があります。例えば、玄人志向なんていうメーカーがあります。他のメーカーに比べて同じくらいの性能のグラフィックボードが1000円くらい安く買えますが、保障が短いんです&amp;hellip;
次からどんな人がどんなグラフィックボードを買ったらいいのか。簡単に書いていきたいと思います
さて、こうして始まったグラフィックボード選びの旅。一体どこへ終着するのやら。
必要なことは、自分がパソコンを何に使おうかと思っているかという事。
迷ってしまったらオールマイティなグラフィックボードを買えばまず問題ないかと。
まず始めに話さなければならないのは、それぞれのブランドの特徴です。
・GeForceの特徴
とにかく安定性がある。
(RADEONと比較して)値段が高い場合が多い
・RADEONの特徴
発色に強い。写真とか表示するのにはめっぽう強い
コストパフォーマンスが高い
相性問題9が発生する事がたまにある
・Parheliaの特徴 ここに書くべきかどうか迷ったんだけど。一応書いておきます。
ParheliaはそもそもMillenniumというグラフィックボードの後継機。
Millenniumは2D描画にとても長けていると言われ、CADなんかの事務にも使われていました(います?)。その代わり3D描画には弱いっていうボードだったりしました。その3D描画をカバーしつつ2D描画もなかなかいい性能を持ったボードがこのParheliaです。最近では、2D描画に関して言えば、性能は大して変わらないので、あまりいいチョイスにはならないはずです&amp;hellip;
初めて自作する時なんかは、GeForceをお薦めします。</description></item><item><title>物理部用誤辞典</title><link>https://asanobuturi.github.io/document/2002/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2002/4/</guid><description>「あ」行 あきた{飽きた}
ある一定の作業を繰り返した事に対して覚える感情の一種。この台詞と共に消されたMD、CDは数知れず。
{用例}「飽きた。」
「だからって音楽ファイルを消去する必要はないでしょう!?」
&amp;gt;&amp;gt;&amp;gt;「それは君が何十回も同じ曲を再生するからだねい。」一介の会計
&amp;gt;&amp;gt;&amp;gt;「だからって削除します?普通&amp;hellip;(泣)」稲歌
&amp;gt;&amp;gt;&amp;gt;「する。」編募委員会委員長
あきだねぇ{秋だねぇ}
秋が来た様を端的に表した感嘆詞。また、節の一つにして物理部が多忙になり、
そして暇になる季節。主に9月はじめから11月頃までを指す。
{関連}→打ち上げ 文化祭 {用例}「秋だねぇ」
「文化祭だねぇ」
「部誌の原稿は&amp;hellip;?」
「 &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;秋だねぇ&amp;hellip;」
&amp;gt;&amp;gt;&amp;gt;「この季節に文化祭、打ち上げと物理部の主な行事があるのですぞ。」混沌野郎
あきはばら{秋葉原}
地名。電気街としても有名。なんでもそろう街。だが土地勘の無い人には地獄。
食事は摂れずず、店も見つからず体力と金を消耗する空間。
&amp;gt;&amp;gt;&amp;gt;「そうならないように土地勘のある人と行くべきですな。」混沌野郎
あさののかばん{浅野の鞄}
我が浅野学園の鞄。小さい鞄は手頃なサイズなのだが大きい鞄はとても大きい。
{俗説}実際はかってみると、家のプリンターが入ったらしい。
&amp;gt;&amp;gt;&amp;gt;「信じられないだろうが、本当の話だ。」混沌野郎
&amp;gt;&amp;gt;&amp;gt;「やろうと思えば人の胴体も入るんじゃないっすかねぇ?」ねずみ
あしたやる{明日やる}
明日改めて今日やるはずの仕事をやる事。決意を表す。
転じて、ない仕事を先延ばしにする事。言い逃れを表す。
{類語}「今度やる。」「いつかやる。」「今日は気が乗らない。」「後でやるんだよ!」
{用例}「おーい、会計。今までの領収書の合計、いくらになった?」
「&amp;hellip;&amp;hellip;明日やる。 」
&amp;gt;&amp;gt;&amp;gt;「君がさぼったから電子工作班は困ったのだからね。」部員I
&amp;gt;&amp;gt;&amp;gt;「いや あの その ごめん」一介の会計
&amp;gt;&amp;gt;&amp;gt;「あやまらなくてもいいから態度で示せや」小指無き人
あたまがいたい{頭が痛い}
頭痛のすること。頭痛のするほどにやることが多いこと。
{用例}「明日までにシューティングゲームを作れ?&amp;hellip;頭が痛い&amp;hellip;&amp;hellip;(泣)」
&amp;gt;&amp;gt;&amp;gt;「不可能ではない、というのがこの恐ろしさですな。」混沌野郎
&amp;gt;&amp;gt;&amp;gt;「やれないと、文句を言われますしね。」稲穂
&amp;gt;&amp;gt;&amp;gt;「やれ、と言われたからには、やる。これぞ漢。うんうん。」部員S
&amp;gt;&amp;gt;&amp;gt;「勝手にやってれば?あたしゃ寝る。」わがまま部員
あっ!{あっ!}
思わぬ事態に直面した際に発する感嘆詞。転じて、注意さを呪う呪文の一種。
{用例}「さーて、プログラムも終わったし、帰るか。あっ!セーブするの忘れてた!」
{類語}「ををっ!」「なっ!?」「しまった!」「ぐはぁ!」「そんな・・・」
&amp;gt;&amp;gt;&amp;gt;「パソコン班員なら誰もが体験するんだよねい。」一介の会計
&amp;gt;&amp;gt;&amp;gt;「それは君が不注意だからではないのかな?」部員I
あとちょっと!{あとちょっと!}
物事の集結を遅らすことを願う呼びかけの台詞。下校時間をも超えて部活動を行うこと
を部長に乞う、祈願の呪文として使われる。
{類語}「もう終わるから。」「これだけ!」「まだ日は高い!」「待ってろ!」
{用例}「あのさ、もう下校時間なんだけど&amp;hellip;」
「あとちょっと!ここでやめると後で分からなくなる!」
&amp;gt;&amp;gt;&amp;gt;「全く、下校時間ぐらい守れないのかい?」部員I
&amp;gt;&amp;gt;&amp;gt;「君が早く帰りたいのはゲーセンによるからでしょ。」一介の会計
あんにょんはしむにか{アンニョンハシムニカ}
朝鮮語。意味は挨拶。部室に来るなりコレを言う者は既に物理部に汚染されている。
{類語}「ハッハー!」「ドーモドーモ」
{用例}「あ。おはよう。」
「アンニョンハシムニカ!」
&amp;gt;&amp;gt;&amp;gt;「北と南ではこの発音が全く違いますぞ」混沌野郎
&amp;gt;&amp;gt;&amp;gt;「何か北の人は力が入ってる」部員S
いっけー!{行っけー!}</description></item><item><title>編集後記</title><link>https://asanobuturi.github.io/document/2016/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2016/11/</guid><description>今回、部誌の編集を担当した UT です。今回は印刷直前までばたばたしていて、あまり分量は多くないと思います。ですが、一つ一ついいことが書かれているため、質はいいものだと思います。この部誌を通じて、プグラミングや電子工作に興味を持ってくれると嬉しいです。受験生の皆さん、物理部の発表を見て浅野に合格したらぜひ、高校棟地下一階物理教室までいらしてください。今回は物理部展を見ていただいてありがとうございました。</description></item><item><title>編集後記</title><link>https://asanobuturi.github.io/document/2017/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2017/12/</guid><description>どーも。この部誌の編集を担当した物理部書記の者です。さーて、今年の部誌、POSITRON#2017はいかがだったでしょうか。例年とは趣きを異にしている(いろんな意味で)感じに仕上がっていると思います。我らが部長が部長挨拶にていろいろと思うところを書き連ねているようですが・・・私自身としてはこの部誌も含め、文化祭全体として満足できるものになったとおもっています。
POSITRON#2017に関するご意見、ご感想、ご質問、文句等は物理部展#2017にいる暇そうな物理部員にお申し付けください。
最後まで読んでくれてありがとう!!</description></item><item><title>編集後記</title><link>https://asanobuturi.github.io/document/2019/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/12/</guid><description>今年の部誌の編集を担当した中3の永田です。電子版の部誌では、紙の部誌とは別の内容で編集後記を書いてみます。 まずは、9月頭の文化祭から、電子版の公開までに一ヶ月以上のブランクが空いてしまったことについて、この場を借りてお詫び申し上げます。本当にすいませんでした。この文章を書いている今は中間テスト期間なので、テスト終了後に部員にシメられる予定でございます。
電子版をpdf直張りではなく、それぞれの文書をHTMLに移植して再編集したことで、いろいろと分かったことがありました。
ひとつは、意外と移植が面倒だったということです。docxとHTMLでは仕様が異なりますから、Wordのプレビューを見ながら手作業でコピペしつつHTMLに起こすしかありません。一応、WordにもHTML形式にエクスポートする機能はあるのでしょうが、細かい部分が色々と崩壊しそうなので使っていません。後からの融通も効かなそうですし。
移植に際して、特に時間を食われたのがCSSの作成と数式の記述です。
私自身、HTML/CSSをほとんど触ったことがないので、今回移植をしながら手習いでどうにか覚えて使っています。おかげでだいぶ書けるようになりました。このサイトの骨格部分を全て一人で作り上げた3つ上の先輩には頭が上がりません。そういえば部員の中で一人、HTML形式で部誌を提出してきた人がいました。謎。
数式の記述には、MathJaxというオープンソースのスクリプトを使用しています。HTML内にLaTeX形式で記述した数式を、自動でキレイな形にまとめてくれるのでとても便利です。感動しました。もともとはMathJaxにHTML標準要素のMathMLをあわせて使っていたのですが、LaTeXの方が書きやすかったため、途中から移行しました。MathJaxを使うと、「\(\LaTeX\)」なんかも簡単に記述できます。
来年の編集も引き続き私が務める予定ですので、後一年、もっと精進して帰ってきます。
そういえば、なんとなくTwitterの共有ボタンをつけてみましたが、使ってくれた方は居るのでしょうか?</description></item><item><title>編集後記</title><link>https://asanobuturi.github.io/document/2021/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/11/</guid><description>この度は、私達物理部の部誌「Positron 2021」を手にとっていただき、どうもありがとうございます。今年の部誌の編集を担当しました、高校2年の永田です。今年の部誌は2万字級の記事がひとつ、1万字級の記事がひとつ、そして一人で2つの記事を執筆した部員が合計1万字超の記事を書き上げ、全体で100ページもの超大ボリュームの部誌を完成させる事ができました。記事の内容はいかがでしたでしょうか。
さて、今年の部誌では新たな試みとして、記事の下書きをMarkdownにて執筆してもらい、編集と組版(レイアウト)の作業をVivlioStyleというオープンソースのCSS組版ソフトウェアでこなすということを行いました。従来のWordファイルでの原稿提出で課題であった、レイアウト管理の煩雑さを解消し、CSSで部誌全体のレイアウトを一括変更できたことはとても良かったと思います。ウェブ上に公開されているVivlioStyleのテーマをベースに様々な調整を加えて、そこそこ雑誌らしい整った体裁になりました。
また、Wordファイルと異なりMarkdownファイルはシンプルなテキストファイルであるため、校正時にはMarkdownファイルをGitでバージョン管理することで、校正前後の差分を閲覧しやすくするなど細かい事務作業の効率化を図ることもできました。私は今年で部活動を引退することになりますが、MarkdownとCSS組版を駆使した編集のシステムは、ぜひ来年の編集担当にも継承してもらいたいと思います。
ただし、VivlioStyleのCSS組版は非常に細かく高度な編集ができる一方で、組版の難易度は極めて高く、CSSに慣れていない私には厳しいものがありました。そのことは編集の作業時間に現れており、この部誌のすべてが完成したのは文化祭2日前の木曜日となってしまいました。その木曜日の早朝に印刷するという約束で待機してもらっていた顧問の先生には本当に申し訳がありません。部員の皆さんにも多くの作業を手伝ってもらいました。文化祭直前の忙しい中お手数をおかけしたなと思っています。ちなみに、ここで2割ほど責任転嫁をしておくと、木曜の未明になって部誌の原稿を完成させた某部員にはちょっとだけキレております。
こちらの部誌は、私達物理部のウェブサイトにて電子版を公開する予定ですので、ぜひそちらも合わせてご覧いただければと思います。裏表紙にウェブサイトのQRコードを記載してありますのでご利用ください。2018年の部誌ではPDFを直接ウェブに記載し、2019年の部誌ではHTMLを直接記述してウェブ記事のような形にしてきたPositron電子版ですが、今年はVivlioStyleの昨日を用いてついにキ○ドルのような手軽に読める電子書籍が実現できるかもしれません。(実際にどうなるかはこの文章の執筆時点ではわかりませんが・・・)
それでは最後に、この冊子を手にとってくださった皆さんに改めてお礼を申し上げます。そして、この後も引き続き「物理部展丼2021」と「第42回打越祭」をお楽しみください！</description></item><item><title>編集後記</title><link>https://asanobuturi.github.io/document/2022/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/12/</guid><description>この度は2022年度物理部部誌を読んで頂きありがとうございます。Web版の編集後記なので、web版作成について少し話そうかと思います。web版はMarkdownで提出された原稿を先代が作ったpandocによる部のブログ用テンプレートを改造して原稿から簡単にHTMLを出力できるようにして作りました。それがあるならすぐに終わると思うかもしれませんが、実はconfigをいじったりレイアウトがおかしい状態で出力されたりとあるので、そこそこ時間がかかりました。こういうの書くの苦手なのでここらへんで切り上げたいと思います。読んでいただきありがとうございました。</description></item><item><title>編集後記</title><link>https://asanobuturi.github.io/document/2023/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2023/13/</guid><description>今年も二年前からの伝統を踏襲しマークダウン(MD)形式での提出、CSS組版ソフトを使用しての編集と組版を行うこととしました。やはり「UNIXという考え方 - Mike Gancarz」に書かれている通りフラットテキストファイルに保存することの利点を感じました。やはり校正の際にgitのバージョン管理機能で差分がすぐにわかるのはとても便利です。校正を行った際にもGitHubのコミットページのURLを送るだけで変更点の通知ができます。めちゃくちゃ便利です。
編集後記ではその年の部誌に行った新しいことを書くという恒例がありますので、今年行った新しい２つのことを紹介します。
一つは静的サイトジェネレータ「hugo」の導入です。去年の暮れに長年の問題であった物理部のHPのメンテナンス性の低さを解決すべくマークダウンファイルからHTMLページを自動生成する静的サイトジェネレータを導入ました。そのこともあり昨年と一昨年のpandocを使用してのマークダウンからHTMLへの変換を行なってそれを配置する手間が省け、MDファイルを所定のディレクトリ構造で配置すればWEB版の作業が終わるという手軽さになりました。
もう一つは参考文献でのQRコードの導入です。いままでは長ったらしいURLを何度も部誌とにらめっこしながら打つ必要があり、一文字でも打ち間違えた暁には台パン不可避な苦行をする必要がありましたが、携帯をかざすだけですっとページを見られるようになりました。便利だね。
そしてもう一つ、これは特に新しいということでもないのですが、表紙にイラストを導入してみました。これは夏休みに丁度良くペンタブを買ったI君の夏休みを犠牲にしてできたことです(彼はクリスタも買いましたがもちろん部費は降りません)。私(と部長)の悲願を成就してくれたI君は夏休みの宿題が残り一週間を切った今でも終わっていません。可哀想に。せめてもの感謝の気持ちを込めて裏表紙にラフを載せておきました。
昨年度の部長挨拶ではまともな文化祭を経験していないということを前部長が語っていましたが、今年は台風は避けたものの(一週間前に飛来して休校をもたらした)、文化祭で中心的な役割を担う高二がインフルエンザによって学年閉鎖になるという前代未聞の事態がありました。やはり文化祭は呪われているとしか思えない事態ですが、そんなことも気にされずに文化祭は決行されますので、不手際等あるかもしれませんがどうぞご容赦ください。</description></item><item><title>編集部後記</title><link>https://asanobuturi.github.io/document/2018/16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/16/</guid><description/></item><item><title>便利ソフトまとめ(2017年版)</title><link>https://asanobuturi.github.io/document/2017/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2017/7/</guid><description>どうも、中3の私です(誰だ)。今回は便利ソフトを紹介したいと思います。以前そういうまとめをしていた先輩がいるので(2017年版)と書いておきました。
GIMP 画像編集ソフト。無料だが、有料ソフトに匹敵するほどの性能を持つ。 レイヤー機能や、透過 TING の直接編集などが標準搭載。
URL: https://www.gimp.org/ (DL 方法が2つあるが、Directly を選ぶとよい。)
VLC media player 動画プレイヤー。とにかく軽い(CPU、メモリへの負荷)上に、ある程度の動画編集も可能という、万能ソフト。
URL: https://www.videolan.org/vlc/index.ja.html
Aviutl 動画編集ソフト。とにかく有能。追加スクリプトの導入でさらに輝く。
URL: http://spring-fragrance.mints.ne.jp/aviutl/
Davinci Resolve ハリウッド御用達の動画編集ソフト。長らく有料だったが、昨年無料に。様々な機能が標準搭載され、GUIも非常に見やすい。有能。
URL: https://www.blackmagiodesign.com/jp/products/davinciresolvel
Wallpaper engine デスクトップ背景をMP4形式の動画ファイルに出来る。ただし有料なのと、要求スペックがかなり高いので注意。
URL: http://steamcommunity.com/app/431960/workshop/
Atom 多機能テキストエディタ。C、JAVA などのプログラミング言語に対応。追加パッケージでさらに輝く。
URL: https://atom.io/
Free download manager ダウンロードが爆速になる。1GBが電話回線で数分。専用のブラウザ拡張機能の導入により、ダウンロードリンクのクリックで自動的にこのソフトで DL を行うことが可能。
URL: http://www.freedownloadmanager.org/
以上、便利ソフトまとめでした。
ライセンス情報 2022年9月追記：WEB版の発行にあたり、著作権の兼ね合いから画像を一部差し替え/削除しました。ライセンス情報を以下に記載します。
GIMPのロゴマーク・VLC Media Playerのロゴマーク：GPL
This work is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or any later version.</description></item><item><title>本格的に物理学っぽい話</title><link>https://asanobuturi.github.io/document/2017/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2017/9/</guid><description>はじめに 筆者は中三の6月に一旦物理部を辞めている。それで、6月に再入部をしたので、プログラミングは専門外である。しかし個人的に物理学に興味があるので物理学っぽいことを書くことにした。というわけで、少し前に世間を賑わせ、そのままフェードアウトした重力波についてなんとなく分かるくらいに書く。
重力とは何者か ―17世紀イギリス― 概要 最初から答えを言うが、重力とは、地球が私たちを引き付けたり、太陽が地球を周回運動させたりするあの力である。皆さんは古典力学の祖であるアイザック・ニュートン(1642-1727) があのリンゴのエピソードで万有引力に思い至ったことをご存じだろう。というわけで、第一章ではそれについて関係あるものもそこまでないものも、いろいろざっくりと書く。
プリンキピア以前 突然プリンキピアという固有名詞が出てきて驚いた人もいるだろう。本当に申し訳ない。プリンキピアというのは後で説明するが要するにニュートンが万有引力について書いた本である。多分科学の本としては世界一有名なので、これだけでも覚えてほしい。
本題に戻ろう。万有引力説以前は、アリストテレスが「どんなものにも本来の場所があり、ほとんどの物体はそれがずっと真下にあり、炎はそれが天上にある。天体は例外で円運動をする」、という説を出したのが近代になるまで信じられていた。
さあ、ここで筆者は妙なデジャヴを感じた。そう、地動説の時と状況が完全に一致する。しかも、やはり近代になってこれを疑う人が出てくるのも一致した。あのガリレオ・ガリレイもその一人だったが、ガリレイは、天体はアリストテレスの言った通りに動くと思っていたようだ。
その後ニュートンはペストという感染症の流行で大学が閉まったので実家にいたときに*1リンゴの一件で万有引力にたどり着くのだが、何が凄かったかというと、これは天体にも働くというのだ。同時期のロバート・フックという自然哲学者も同時期の研究から惑星の運動が円運動なのは太陽が惑星を引き付けているからだとし、引力は距離の2乗に反比例する、というところまで求めた。結果的にプリンキピアが出版されることになるが、フックとニュートンはどっちが先だったかで揉めたそうである。
プリンキピアについて さあ、プリンキピアという語句がここまでに五回出ているが、どんな本なのかをとりあえず説明しよう。まず、ハレー彗星とかグリニッジ天文台で有名なエドモンド・ハレーは敬虔なキリスト教徒で、アリストテレスの説を覆すのに抵抗があったのだが、*2「もしかしたら惑星の軌道はきれいな円ではなく楕円かもしれない。どう思うか」と訊いたところ、ニュートンは「実は前に計算で求めたことがある。やっぱり楕円だった。途中計算の紙は捨てたが、もう一回別の紙に書いて渡そう」と答えた。これによりハレーはニュートンが自分とは別アプローチで万有引力に気づいていたことを知り、それで本を出すことを提案したことからニュートンが出版したのである。
この本の正式な日本語題は「自然哲学の数学的諸原理」で、書くにしても話の話題にするにしても弊害があるのは自明なので、そのラテン語名である $&amp;ldquo;Philosophiae,Naturalis,Principia,Mathematica”$の $Principia$(多分正式な日本語題でいう「諸原理」の部分)を抜き出してプリンキピアと呼ばれている。*3物体の運動の法則とか、ここまで触れた万有引力や天体の運動について触れている。
プリンキピアは3巻に分かれていて、最初の二冊は物体の運動の法則について、まず高校物理で習うように抵抗を無視したうえで考え、次はこれらを勘定に入れて書かれている。そして、三冊目で、万有引力で地上の物理法則から天体の運動まで説明できることが取り上げられている。
微積分が誰のアイデアなのかでほかの学者ともめていたため微積分をしないようにしているが、そのせいで3冊になっているうえ、かなり難解になっている。しかも、第二巻は説明不足になっている。
この説は、万有引力が一瞬で伝わる、ということも表しているが、ほかの重大な発見と同様に、当初は力が一瞬で伝わるはずがない、とする反対派がかなりいて、ニュートン自身それに歩み寄るところがあったが、実験で一瞬で伝わると証明されて受け入れられるようになる。 尚、万有引力はこんな式で表される。
$$ F = G\frac{Mm}{r^2}$$
$F$が万有引力の大きさ、$G$は定数、$M$・$m$は二つの物体の質量で、$r$はその距離だ。二乗なので$r \times r$となる。
重力の本質 ―20世紀以降― かなり間をすっ飛ばしたが、重力は現代物理ではまた違った形で話題になる。ここからが筆者の興味のある分野なのだが、そんなことはどうでもいいのだ。
素粒子の場合 素粒子物理学では素粒子は
物質を作ったりする素粒子(電子とか、質量があることで一昔くらい前に話題になったニュートリノもこれ) 力(重力やら原子崩壊やら光やら)を伝える素粒子 の二種類に大別される。*4重力を伝える素粒子はそのまんま重力子と呼ばれている。が、重カ子自体が観測されていないうえ、質量ゼロ、電荷ゼロとなると観測のしようがないので、ここで素粒子から離れた話になる。
さっきの素粒子の分類における、後者の「力」には、電磁気力・弱い力・強い力・重力の4種類*5がある。
このうち、電磁気力と弱い力は同一視でき、強い力をそこに加える「定説」となった理論はできたものの、重力を入れられる理論だけは未だに確かな理論がない。
とはいえ、この4種類の力は宇宙ができたときには一つだったことが分かっており、重力が最初にそこから分離したようである。
これらをまとめる理論はいくつもあり、素粒子がさらにいくつかの粒子でできているとか、素粒子は小さなひもであるとか、いろいろある。
さらに重力子について言うと、重力だけはなぜかほかの3つよりものすごく弱い。これを説明するにあたり、ロープが遠目には1次元に見えて近くで見ると3次元に見えるようにこの世界は実は11次元時空であるが、残りの7次元は小さく折りたたまれているとする説が代表的だ。*6これについては、第一章でふれた逆二乗則が、ものすごくミクロなレベルでは破れると最近分かり、かなり確実性が出てきた。他にも、3次元世界はミルフィーユみたいにたくさん平行に並んでいて、重力子だけはそこを行き来できるとか、これには諸説ある。
重力場の場合 現代物理では、アルバート・アインシュタインがものすごく有名だが、アインシュタインは重力についても新しい考え方をもたらしている。簡単にどんなものかを説明しよう。
まず、この世界を一様に延々と広がっているゴム膜のようなものと考える。そこに何かものを置くと、その部分が沈む。これが重力だ。そこに十分に軽いものを置けば、沈んだ部分の傾斜で最初に置いたものに引き寄せられるだろう。そう、万有引力が働いたのである。どちらも同じくらいの質量なら、たがいに引かれあう。 また、光はここでは膜上の歪みに影響されながらまっすぐ進むと仮定される。つまり、光でさえも重力で曲がるのである。そして、もしそこにロードローラー*7か何かを置けば、沈むどころかゴム膜がこんな具合に沈む、あるいは破れるだろう。
雑な図ですまないが、このバスケットボールのゴールを延々と長くした様なのがブラックホールである。周知のとおり一定の範囲に入ると光でさえ出られなくなる。時々それがほかの空間と何かの拍子につながるのだが、それがワームホールだ。
もっと詳しい説明をできればそれが一番だが、残念ながらこれ以上は筆者にとっても皆さんにとっても苦痛になるので、この程度で説明はおしまいである。
重力波というが何を感知したのか、そして では、本題に移ろう。重力波というのは、簡単にいうと滅茶苦茶密度の高い天体が動くときに発生する空間の歪みである。その歪みは光が一定距離を行って戻るのにかかる時間の方向ごとの差で感知される、というプロセスを経る。これを重力波と呼ぶ。まあ、ざっと仕組みを説明すればこんな感じだ。
これを観測するのにどんなメリットがあるのかというと、おもにこんな感じだ。
重力波はすべてを素通りするので、観測できない天体を「見る」ことができる これによって今まで観測できなかったより初期の宇宙への理解が深まる また、この観測装置の精度を上げ、あるいは高精度な観測装置を作るのにおいて世界各国が現在競い合っている状態だ。もちろん日本もその一カ国だ。ニュートリノの観測に使われたカミオカンデの跡始に現在KAGRA(大型低温重力波望遠鏡)が建設中だ。筆者はこの競争による観測用の範囲を超えた技術の向上、そして観測による新たな知識の獲得に期待する。
脚注 *1 教師としてではなく、学生としてである。教師が才能に気づいていて、教師はニュートンに実験室を使わせていた。
*2 地動説の話を知っていれば大体わかると思うので、細かいことは省略。
*3「なぜそこでラテン語!?」、と思う人に説明すると、この時代には、論文はラテン語というのが鉄則だったし、生物学ではそれがとりわけ顕著である。
*4 ヒッグス粒子は一応力のほうに入るようだ。
*5 それぞれ説明すると、常に気力はつまり電力と磁力で、光子により伝えられる、実は日常における物体の衝突もここに含まれる。弱い力は原子崩壊に関わる。太陽がまぶしい理由もこれだったりする。 強い力は、原子核の陽子や中性子の中の素粒子同士を結び付けていて、核力とも呼ばれている。日本初ノーベル賞の湯川秀樹の理論もここに関わってくる。重力についてはわざわざ語る意味が思い浮かばない。
*6 残り一次元は時間だ。n次元は時間と空間だが、7次元は空間だけを指して言っている。
*7 グランドピアノも可。
あとがき 冗長なうえたいして面白くない文章だったと思うが、これを読んで物理学にほんの少しでも興味が湧いた人がいれば幸いだ。</description></item><item><title>無音カメラとその違法性について</title><link>https://asanobuturi.github.io/document/2016/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2016/3/</guid><description>こんにちは、3年のYtです。実は今回の編集なのですがそれは置いといて、今回はスマホの”無音カメラ”について話したいと思います。皆さんスマホで食べ物やスクリーンショットなどを撮るときにうるさいな&amp;hellip;と感じたことはありませんか？そしてそれを無音にしたいと思ったことはありませんか？
私はあります。電車内でLINEのトークをスクショして保存したい！ってときでも音が鳴るので周りに白い目で見られますよね。まずはそのときの対処法についてです。今回はアンドロイドを中心に話していきたいと思います。
無音カメラアプリを入れる これが一番気楽かと思います。例えばGoogle Playにある「忍びカメラ」です。ですがこれには、ピントを合わせられない、フラッシュが使えないなどの制限があります。ですが、手軽にインストールできるので皆様試してみてはいかがでしょうか？
カメラの音のデータを消す これは難易度が高いです。Androidでroot(パソコンでいう管理者権限)を改造して使えるようにし、カメラの音のデータを消します。こちらはメーカー保証をなくす行為なので良い子は真似しないでね。
海外のスマホを買おう これは海外のスマホを買い、そのまま使ってしまおうというものです。simカードという携帯に入っているものをさしかえて設定します。スマホはアマゾンでも売っていますし、海外のスマホはシャッター音のONOFFができるので大丈夫です。
※この内容は総務省の技術基準適合証明を通っていない端末を購入する方法となりますが、決して電波法違反を助長するものではありません。購入は自己責任でお願いします。 では実践していきたいと思います。
1番は使えばわかるので割愛します。 2番ですが、下の画像のところを削除したら、カメラ音が消えました。静かなので堂々といけますね。
3つ目ですが、さすがに新たにスマホを買うお金はないので、今回はXperia ZL2(SOL25)をZ2a(D6563)に中身をかえてみました。すると…音が消えました。ですが、日本の通信を使うとカメラの音が出てしまいます。ここらへんまで厳しいんですね…現状だと無音アプリが安全です。
では、次に何故海外ではシャッター音は鳴らさないでいいのに日本では音が出るようにしなければならないのか、ですが、これはわかりますよね。勿論公共の場での盗撮を防ぐためのものです。音が鳴らないとわからないですからね。それがルールになってきていますし、そのため、携帯メーカーは自主規制によりシャッター音を強制にしているというわけです。
ここからが本題です。
無音カメラについてどの辺りまで合法なのか、疑問点は2つあります。
無音アプリの配信は違法なのか 使用について違法なところはあるのか まず一つ目ですが、あくまで配信はただの配信なので縛る法律はありません。そのため、黙認状態となっています。使用者側が気を付けろ、ということらしいです。
２つ目は、こちらは状況によって違いますが、風景などを撮るのは構わないそうですが、公共の場で盗撮らしき行為またはそのものをすると、迷惑防止条例に当たるそうです。
結論 無音カメラは簡単なアプリを利用して利用できるが、公共の場で使用するのは気を付けた方がいい。
皆さんも無音カメラを電車の中などで人を撮ったりせずに使いましょう以上で私の部誌発表を終わります。最後まで読んで頂きありがとうございました。</description></item><item><title>面白フォントを使おう</title><link>https://asanobuturi.github.io/document/2002/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2002/3/</guid><description>Windowsパソコンには普通の文字を表すことができない、変わったフォントがついているのをご存知でしょうか?このフォントを使えばいろいろな絵を簡単に文章内に入れたり、ワープロソフトでテンプレートのように使ったりといろいろなことができます。
いざ使ってみよう!!! 何かワープロソフトを立ち上げてフォントの一覧を見てみて下さい。
Webdings,Wingdingsの2つが見つかると思います。これに加えてWingdings2とWingdings3がある場合もあります。この4つが変わったフォントです。
このフォントを選択するとそのキーに対応した絵文字が表示されます。例えばWebdingsを選んで「b」のキーを押すと「b」のように自転車の絵がでます。これらをうまく使えば、携帯電話の絵文字のように使えるのです。
普通はどのキーがどの絵文字に対応しているかなんてわかりません。そのための一覧表を使って載せてみました。上2段は小文字で(Shiftキーを押さずに)入力したとき、下2段は大文字で(Shiftキーを押しながら)入力したときに表示される文字です。
Webdings a b c d e f g h i j k l m n o p q r s t u v w x a b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0 - ^ ¥ @ [ ; : ] , .</description></item><item><title>落下る</title><link>https://asanobuturi.github.io/document/2016/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2016/9/</guid><description>初めに 今回で最後になりました、どうでもいいことを物理的に検証するというという企画です。今回検証するのは、この阿鼻地獄の刑罰の、2000年間落ち続けるというものです。早速ですが、Let&amp;rsquo;s 計算！
阿鼻地獄とは…
罪：殺生、盗み、邪淫、飲酒、妄語、邪見、犯持戒人、父母・阿羅漢（聖者）殺害。
具体的説明：地獄の最下層に位置する。大きさは前の7つの地獄よりも大きく、縦横高さそれぞれ2万由旬（8万由旬とする説もある）。最下層ゆえ、この地獄に到達するには、真っ逆さまに（自由落下速度で）落ち続けて2000年かかるという。前の七大地獄並びに別処の一切の諸苦を以て一分として、大阿鼻地獄の苦、1000倍もあるという。剣樹、刀山、湯などの苦しみを絶え間（寸分・刹那）なく受ける。背丈が4由旬、64の目を持ち火を吐く奇怪な鬼がいる。舌を抜き出されて100本の釘を打たれ、毒や火を吐く虫や大蛇に責めさいなまれ、熱鉄の山を上り下りさせられる。
これまでの7つの地獄でさえ、この無間地獄に比べれば夢のような幸福であるという、とんでもない地獄です。
問（配点ｎ点） 地獄の最深部にあるという、阿鼻地獄に到達するためには、2000年間落ち続ける必要があるという。
この時、ある罪びとが、紀元後16年に裁かれて、阿鼻地獄に落ちたとする。さて、この時、落下を始めてから２０００年後、つまり現在の落下速度は、いくつでしょう？また、この時落下した距離は、何キロメートルでしょう？ただし、重力加速度は、9.8m/sとする。ただし、空気抵抗などは考えず、基本的に物理基礎の考え方で考える。
解答1 まず、単純に、（速度）=（落下開始時の速度）+（時間）*（加速度）という、もっとも単純な計算式で考えてみよう。
すると、
$$（速度）=0+（2000\times365\times24\times60\times60）\times9.8 $$
をする。
$$\begin{align*}（速度）&amp;amp;=0+63,072,000,000\times9.8 \&amp;amp;=618,105,600,000（\mathrm{m/s}）\end{align*}$$
となる。
しかし、これは、正解とはならない。残念！
なぜならば、特殊相対性理論によって、すべての物体は、光の速さを超えないというルールみたいなものがあるので、光速つまり、$299,792,458\mathrm{m/s}$を優に超えてしまうので、まちがいとなる。
ちなみに、この時の落下距離は、いま、等加速度落下なので、
$$（距離）=（最高速度）\times（時間）\div2 $$
で求められるので、
$$\begin{align*}（距離）&amp;amp; =618,105,600,000\times63,072,000,000\div2\ &amp;amp; =38,985,156,403,200,000,000,000\div2\ &amp;amp; =19,492,578,201,600,000,000,000（\mathrm{m}）\ &amp;amp; =19,492,578,201,600,000,000(\mathrm{km})\ &amp;amp; =2,060,308.445365183（光年）\end{align}$$
※一光年を9461000000000キロメートルとする
うん。やばい距離ですね。
ちなみに、太陽系の直径は約0.000475光年らしいので、約4337490526.315789倍だそうです。わかりにくいので、太陽系を一円玉に例えると、横浜線の全長くらいになります。
つまり、とんでもなく長いということです。
解答2 次に、物体が光速に近くほど、その物体は重くなるというルールをつかって、考えてみましょう。つまり、光速に達したら、そこから早くならないという過程で計算してみましょう。
$$\begin{align*}299,792,458&amp;amp;=0+（時間）\times9.8 \（時間）&amp;amp;=30,591,067.14285714秒 \&amp;amp;\fallingdotseq509,851分 \&amp;amp;\fallingdotseq8,500時間 \&amp;amp;\fallingdotseq1年\end{align*}$$
つまり１年間は等加速度運動で以降は光速の速さで党則運動をするので、
$$\begin{align*}（距離）&amp;amp;=299,792,458\times31,536,000\div2 \&amp;amp;\quad+299,792,458\times31,536,000\times1,999 \&amp;amp;=300,000,000\times32,000,000\div2 \&amp;amp;\quad+300,000,000\times32,000,000\times1,999 \&amp;amp;=19,195,200,000,000,000,000ｍ \&amp;amp;=19,195,200,000,000,000ｋｍ \&amp;amp;=19,195,200,000\div9,461 \&amp;amp;≒2,028,876光年\end{align*}$$
やっぱりとんでもなく長い。
解答3 最後に距離から、考えてみたいと思う。仮に阿鼻地獄が地球の中心にあったとすると、もうこれは落下とは言えないかもしてないかもしてないが、日本とブラジルを地球の中心を通り、まるで、安部マリオのようにいったりきたりすると仮定すると、単振動で計算すればいいとすると、片道４２分分らしいので、$2000\times365\times24\times60\div42$で何回転するか求められる。計算すると、25,028,571周できる。この時、動く距離は、318,914,051,682キロメートルとなる。この時、マントルにぶつかってあっついとか、この計算で行くと、阿鼻地獄の入り口を25,028,571素通りすることは気にしてはいけない。
あとがき ここまで読んでくださりありがとうございました。今回は文化祭二日前に書いたため、計算ミスや誤字があると思いますが、ご了承ください。また、本当は万有引力で計算したりいなければならないところや、実験によって証明されていない、理論を使っているところがありますが、無視しています。文系の学生が作った記事なので温かい目で見てください。</description></item><item><title>理想と現実の界面で</title><link>https://asanobuturi.github.io/document/2021/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/8/</guid><description>はじめに こんにちは。物理部ポジトロンを手に取っていただきありがとうございます。展示は楽しめていただけましたか。今年の文化祭は、限定的ではありますが、浅野生とその家族、以外の来場者もいらっしゃるということと、自分がこの部活に携わる最後の文化祭になるということが重なり、僕としても、「文化祭」に対する意欲というのが生まれたので、部誌という形でも関わらせていただくこととなりました。技術的に興味深いことは他の部員がたくさん書いてくれているはずなので、僕はあえてそういった専門的、ではないことについて書きたいと思います。
僕は中1から物理部に入っておりますが、気が付いてみたらもう高2。これといった大会やら、コンテストやらに全力で取り組んだり、さらなる技術的な高みを目指して毎日努力奮闘する、といったことはなく、作りたいものが見つかったら、活動日にノートパソコンを持っていって地下一階の物理教室でのほほんと作業する、といった感じで、良い意味で緊張感のない活動をしてきました。ですが、決して社交的とは言えない僕でも、それなりには部活のことに参加したり、わずかな貢献もできたのかなぁ、と思うばかりです(できてなかったら悲しいですねw)。
小さくてゆるいコミュニティを形成しながら、しばしば友人や先輩後輩とのおしゃべりを交えつつ作業に打ち込める環境はとても快適な場所でございました。そういった居心地の良い場所だったからこそ、あっという間だったのかもしれませんね。しかしまあ、時間がたつのは速くても、ここで出会ったものはとてつもなく大きいものです。ここでは、そんなこんなを少しばかり話したいと思います。
理想 自作ゲームのあるべき姿 今年の物理部は、電子工作班とPC班で同じ教室を使って展示するというスタイルをとっており、例年の文化祭のような電工とPCを分けた展示とはひと味違った雰囲気が出ていることでしょう。そのなかで今年もPC班員たちが作ったゲームが変わらず人気なのでしょうか。
僕は今年、ゲームを自作しようとは全く思いませんでした。中3の文化祭以来、僕はゲームを自作するのを断念したからです。というのも、中2から中3にかけて、僕は寿司打（※フリーのタイピングゲーム）みたいなゲームを作りたいということで、タイピングゲームを自作したのですが、夏休みの中盤くらいになってから、タイピングゲームは子ども受けがよくないゲームだろうから、子どもたちが遊べるようなゲームをひとつ作るよう言われ、僕はとても困惑したことがあるのです。結局、それから文化祭までの短い時間になんとかもう1つのゲームを間に合わせたのですが、それ以来、遊んでもらうために、「文化祭」のためにゲームを自作する、ということに対していろいろ考え、疑問を抱き始めました。というのもどうも僕は「文化祭」のために、子どもたちに人気ではあるけれど、自分では作りたいとも思わないゲームを作らされるのを苦痛に感じ、どうしてもそれを強制されることに耐えられなかったようです。
中1中2がプログラミングに慣れる練習として、とりあえずゲームを自作するという考えに関しては、まだ的を射ていると思います。僕も今振り返ってみると、実際にある程度の量のコードを書いて一つのゲームを完成させたあとには、なんとなくプログラムの全体を見渡す能力が少しついたのかなぁ、と思わなくもないです。しかし、中3、高1、高2にまでなって作りたくもないゲームを作らされる、作らなければいけないような雰囲気になるのはもったいない気がするんですよね。パソコンでできる技術的な物と言えば自作ゲームのプログラムだけでなく、様々な種類があるにもかかわらず。例えば、何か特定のことをしてくれるプログラムの制作や、人工知能の開発、広く言えば動画編集や競技プログラミングなども含まれているでしょう。ひとそれぞれ興味のあることはもちろん違うでしょうし、彼らの興味に割かれるべき時間が、「文化祭」のためのゲーム制作によって搾取されていくなんてことがあっていいのだろうかと、疑わざるを得ません。「そもそもゲームを作るのが好きだ」という人にとっては何ともないでしょうが、それ以外の人にとっては厄介極まりないことでしょう。その時以降、「文化祭」のために強制的にゲームを自作させられるというようなことがなかったので良かったのですが、今後とも、このような犠牲者が出ないように気を付けていただきたいものですね。
文句ばっかり書き連ねていたら読み心地もよろしくないと思いますし、決して改善に向かわないので、とりあえずほどほどにしておきますね。
フーリエ級数展開によるお絵描き 僕が今年作ったのは、もちろん子どもたちに遊ばせることのできるようなゲームではなく、ただ、時間についての関数を実フーリエ級数展開して三角関数(角度についての関数)の式に変換した後に、円を回転させて図形を描くというプログラムです。
ふーりえAPC フーリエ級数展開を使って図形を描画するという試みは、世界中でたくさんの人が行ってきているので、インターネットで調べていただければ概要はわかると思います。僕は、おととしに、当時高校2年生だった先輩が作ったプログラムをみせてもらってこれを初めて知りました。円をくるくるまわしながら描いていくのこぎり波だったり矩形波を、「なんだかよくわからないけどすごいな」という感じで見ていました。その光景はとても複雑に見えましたが、実際は、大きさの異なる円を回すことで図形を描くという、意外と単純(?)な方法でありました。その後先輩からサインやらコサインやら(←全然わからなくてほとんど覚えていない…)説明を賜りましたが、中3だった僕は残念ながら理解するには到底及びませんでした。
しかしながら、そこで見たものが頭の中に焼き付いていたのか、高校二年生になって数学B(文系)の授業で三角関数を復習したときに、そういえば2年前にフーリエなんちゃらしてた先輩いたなぁ、となり、高校二年生になった僕ならできるかもしれないと思いながら、制作に取り掛かりました。覚えていたことは、その先輩がフーリエうんぬんでおえかきをしていたということぐらいだったので、そもそもの数式やそれらの導き方をネットで調べるところから始めなければなりませんでしたが、周りの人からの協力を受けて、楽しみながら完成させることができました。これはsvg形式の画像ファイルを読み込ませると、その画像を一筆書きしてくれるので、完成した後は、直ちに好きな画像を突っ込み、喜びにふけっていました。
こういう風に、僕の「作りたい！」という単なる欲求を満たすために作ったものを「作品」として展示しているだけに過ぎないのですが、そうはいってもやはり、僕にそのように、作りたいという「情熱」を思い起こさせるだけの魅力が存在するわけで、その情熱を少しでも感じ取っていただきたいという所存でございます。2年も前に見たのが記憶の片隅に残っていたというのは、僕がその妙な動きに多少なりとも惹かれていたからでしょう。好奇心とはすこし違うようなこの妙な心の揺れ動き、皆さんは感じたことはないでしょうか。
大きな「情熱」との出会い 中学1年生の時に物理教室で、僕は、今でも自分に絶えることなく「情熱」を与え続けるモノと偶然にも出会いました。そしてそのモノというのがなんと、ソビエト社会主義共和国連邦国歌なのです。皆さんがこの告白についてどう思おうとも、構いません。しかし、僕のソ連国歌に対する「情熱」は疑いようのない事実です。僕は非常に困ったことに、いわゆるJ-POPでも洋楽でもなく、ソ連国歌を好きになってしまったのです(最近はみんなが聴くようなものも少しは聴くようになりましたが)。僕はこの歌を初めて聴いたとき、もちろん流れてくる歌詞の意味は全く知りませんでしたが、「感銘」という言葉で表しきれないようなナニカが僕を満たしていくような、そんな不思議な衝動を感じました。
それからというもの僕は、ソ連国歌の歌詞についていろいろ調べたり、ソ連に関連した情報を集めたりするにつれて、近現代の歴史的な流れや思想や知識を得ていったりと、ソ連の国歌が原動力になって、いろいろな物に首を突っ込んでいくことになりました。そしてソ連国歌とソ連の関係を知れば知るほど、賛成できない点も複数ある中、ソ連に対する魅力はそれらをはるかに上回っていきました。今持っている音楽に対する興味も、この国歌がなければ持たなかったかもしれません。どうして僕がこんなにソ連に魅了されているのか、その謎は僕でさえもいまだ探求中、整理中でありますが、なんとかしてソビエト連邦を僕の生活におけるコンテクストに位置づけ、ある程度言語化したいという個人的な思いで、「情熱」の一例として紹介させていただきます。
さて、当初僕はというと、ソビエト連邦に一種の理想像、理想の共同体像を重ね掛けていたことがあり、今となっては少々過激だったかなぁと思い返すのですが、このことがなければそんなにソ連のことを好きになっていなかったと思われます。ソビエト連邦は、すごくざっくりいうと、指導者層の荒廃、政治的、外交的な欠陥などにより、1991年12月25日の真夜中にとうとうソ連の最初で最後の大統領ゴルバチョフが自身の大統領辞任を表明し、解体するという形で、第一次世界大戦期のロシア革命やそれに続く内戦を経て1922年に高い理想を掲げて成立したその国は、その69年にもわたる激動の歴史に終止符を打ちました。僕は当時生まれておりませんが、とても衝撃的なことだっただろうことは容易に想像できます。
ここで僕が注目したいのは、その時に立ち会わせていた当時のソ連の国民です。人々がソビエト連邦という国に対する帰属意識を強く持っていたかどうかは定かではないですが、生まれ育った祖国が、かつては世界を席巻した超大国から徐々に衰退の一途をたどっていき、しまいには国が瓦解していくのを目の当たりにしたソビエトの国民はいったい何を思ったのでしょうか。当時の写真や動画に映る人々は祖国の衰退に対して逆らおうと奮闘していたけれど、無力にもそれは成功しませんでした。彼らがソ連崩壊の時に受けたショックというのはいったいどれほどのものだったのでしょうか。壮大な曲調でもあるけれど、どこか寂しげな感じもするその国歌によって、僕はこういった無力感に思いを馳せ、同情せざるを得ませんでした。そして、とあることで思い悩み、よりどころを求めた僕は、最近かつ最大の「共同体」の崩壊を自分のにおけるものと重ね、親近感を伴って想起したのでした。なんだか、歴史が、僕なんかよりもはるかに大きいショックを受けただろうソビエト連邦の国民一人一人が、僕の側に立って、応援し、励ましてくれているようなそのような妄念を感じてしまうのです。
ソ連国旗降納 かつてのソビエト連邦が、望ましい共同体であったかどうかは疑わしいですが、それでも、その応援してくれているような感覚は僕の辛い気持ちをいつも癒してくれました。それ以来ソ連国歌は基本の原動力として、僕に大きな影響を与えています。しかし、自分の考えがコミュニズムというよりむしろコミュニタリアニズムのほうに近そうですし、決してコミュニズムを称賛しているわけではないことは了承していただきたいです。
個々の「情熱」を咀嚼する 物理部にいると、様々な人からこういった「情熱」を感じ取ることができます(もちろんですが、ソ連国歌ではございません)。部員のそれぞれが、僕に、彼らの趣味だったり、興味のある分野の話や、取り組んでいることについての話をしてくれるのですが、彼らが話しているときのその表情や口調、それから身振り手振りなどから、意図せずとも「情熱」がにじみ出てくるんですよね。そして、その「情熱」の形というのは十人十色で、それぞれの人の持っている性格、視点、価値観、奥深さ等等を本当によく表現していることでしょう。また、同じ人によっても、時と場合によってその「情熱」がポジティブになったりネガティブになったりすることもありますし、そういう点でも、バラエティーに富んでいるといえるでしょう。自分にとってそれらは未知なものばかりであるので、それらを見たり、触ったり、聴いたりしてようやくそのわずかを味わうに至ります。ですが、そのわずかな経験を通して、「その人」の人となりをより深く知ることになるでしょうし、あるいは、それによって自分が新しく触発されるかもしれません。他人の「情熱」や、その「情熱」から経験した事柄のような、未知との遭遇の可能性にありふれている場というのが、この物理部であり、もっと広く言えばこの浅野の文化祭なんじゃないかなと個人的には思っております。
物理部風景 こんなにも時間のかかる「作品」、しかも、作らなくても生活に支障をきたさないだろう「作品」を莫大な労力をかけてわざわざ作り上げるというある種の狂気を持つためには、間違いなく、とてつもなく大きい原動力が必要でしょう。そして、その原動力がどこから来ているのか、僕たちは、それらの「作品」の制作者でありますから、もちろんその「作品」に対する説明や思い入れを、展示に来てもらった皆さんに紹介すると思います。が、その説明を受けただけで終わらせてほしくないのです。なぜかというと、僕たちの、「作品」に対する説明というのはあくまでも僕たち自身の一元的な見方による説明でしかないからです。その説明を受けるだけでは、必然的にその「作品」のもつ可能性は限定されてしまうでしょう。僕ら作品制作者の「情熱」と、「鑑賞者」の感じたものの交わる点、その二つを折衷したところにこそ、無限の可能性が秘められているのではないでしょうか。作る側→見る側という一方的な主体客体の関係を超えて、「鑑賞者」自らが主体意識を持って「作品」と触れ合い、その界面で二つが融合することによって、唯一無二性が生じるのではないでしょうか。そしてそれは文字通りかけがえのないものとなるのではないでしょうか。ぜひとも、この文化祭で何かしらそういうものを得てもらえたらなあと願うばかりです。
現実 僕はいまこうやって自分の文化祭の理想像を語らせてもらっているわけなんですけども、なかなか簡単にそういう形にできるわけでもありません。すなわち、自由に、自分の興味のあることをして、事が上手く運ぶわけではないということです。その大きな理由の一つは、文化祭での集客効果という観点から、そちらへ方向転換しづらいということにあります。やはり、文化祭において、部員たちの自作ゲームは子どもたちにとても人気で、PC班の集客に大きな貢献をしてきているのはこれまでの4年間にこの目で見てきました。かつて、ライフゲームを展示していたり、(今年もだと思いますが、)壁新聞も一応展示していたりするのですが、自作ゲームを展示している机のほうより人が集中するということなどほとんどなく、もしもゲームの展示がなくなったらPC班の展示はおそらく閑静とした場になってしまうことでしょう。たとえその物寂しさに耐えられたとしても、やがてお金の面で、持ちこたえられなくなるはずです。
物理部は他の部活と同様に、部費という形で学校から援助を受けて成り立っており、あくまで浅野の経済力ありきでの物理部なのです。そしてその部費は、学校に対する貢献や、部活の実績等の要素で上下する可能性が高いのです(実際に部費を大幅に減らされたことはないので完全なる真実とは言い難いです)。部員からの部費を一切徴収していない上、部員数が多く、このお金が少ないと、パソコンが足りなくなったり、電工の備品を購入できなかったり、いろいろと不自由が生まれてしまいます。ゆえに、文化祭で、AsanoTheBestなるものでなるべく上位に入り学校への貢献を可視化し、なるべく多くの部費をいただかないと物理部そのものが崩壊しかねません。ですが、自作ゲームの力を借りずに文化祭での人気を保ち続けるのは考えづらいですし、部費が少ない状態で部活動を続けていくということも困難でしょう。すなわち、この成果主義的なシステムから逃れる方法は今の状態では到底考えられないのが現実だということです。
ここまで言っておいて何も手だてがないのか、とお思いになるかもしれませんが、まあ、実際現時点で生徒にできることはほとんどないでしょう。このような場で、あまり理想をかましすぎても結局空回りして終わりという、歴史の二の舞三の舞を演じてまうだけなので、ここはある程度譲歩するのが好手と言えるでしょう。しかし、完全に理想を諦めてはいけません。理想と現実の狭間で、理想を捨てずに、現実に抗い続け、止揚した先にある自由の可能性を信じて奮闘するのです。理想から出発した「情熱」を現実とうまく融け合わせ、このシステムの中で運用可能な形にしていくことこそが、最善の解決方法ではないでしょうか。
まとめ 時と場合によって、自身の心を揺さぶったものが受け入れられないことがあります。例えば、僕が先ほど例に挙げた「情熱」のことを他人に話したとき、はねつけられるということもまあ何回かありました。やはり現実は、自己の理解をすり抜け、自己の思い通りにならず、無限に連鎖する否定性を持っていると僕は考えます。ゆえに、「現実」というのは往々にして、「理想」そして「情熱」をも否定してくるものです。そこで僕たちはこのアンチテーゼとしての「現実」に屈するべきではないでしょう。自身のもつ「情熱」を、そしてそれが存在するという揺るぎない事実を強く根拠にもって、新たな「総合」を生み出していくべきではないでしょうか。おそらくその作業には少なからぬ苦痛や困難が立ちはだかっていると思います。ただ、その先には、自身と他人が融合した、ユニークなものが待っているはずです。ぜひそれを求めていただきたいですし、また、自分もそれを探求していきたいと思っております。きっと、歴史上で同じように奮闘してきた人々も寄り添ってくれていることでしょう。
おわりに＋スペシャルサンクス 最後まで読んでいただき本当にありがとうございます。内容のほうはいかがでしたか。 物理部のことに多少触れながら、僕の個人的な考えをエッセイ風に書くのは僕にとってあまりにも難しすぎて、これを書きながら何度も、無謀な挑戦をしたもんだなぁ、と思いました。それぞれで、言いたいことが似通っている部分もあるはずなのですが、僕が思うに、なんだか趣旨が若干曖昧で、一貫性のない文章になってしまいました。ともあれ、物理部の文化祭展示に来ていただいて、かしこくもこの部誌をとっていただいた方々に、これを読んで何かご自身の中で少しでも変わったことがあれば、僕は非常に嬉しい限りです。
ちなみにこの部誌は「自分自身」を一番の対象読者として想定しながら書きました。上にも少々書きましたが、僕のソ連に対するこの「情熱」を渾沌としたものから少しでも秩序づけたくて書いたというのが大きいです。なので、内容が個人的すぎたり、わかりにくかったり(わざと濁している箇所もございますが)、論理的根拠に欠ける点があったと思いますがお許しください。
最後に、多くの時間を一緒に過ごした物理部員のみなさん、本当にありがとうございました。特に、同学年の方々には、特別に感謝し申し上げます。そして、これからもぜひよろしくお願いします。
参考文献 Wikipedia-ソ連崩壊 https://ja.wikipedia.org/wiki/ソビエト連邦の崩壊　10月2日アクセス Wikipedia-エマニュエル・レヴィナス　https://ja.wikipedia.org/wiki/エマニュエル・レヴィナス　10月6日アクセス ソ連国旗降納の画像元　https://www.rferl.org/a/1830507.html　10月6日アクセス</description></item></channel></rss>