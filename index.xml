<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>浅野学園物理部</title><link>https://asanobuturi.github.io/</link><description>Recent content on 浅野学園物理部</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 06 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://asanobuturi.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>話題のアニメ声合成AI「MoeGoe」を使ってみよう</title><link>https://asanobuturi.github.io/blog/20221106/</link><pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20221106/</guid><description>ツイッターで、最近新しく公開された音声合成AI「MoeGoe」が話題になっていたので、試してみました。
MoeGoeとは まずはこちらをご覧ください。
なにやら中国の方が作られた音声合成AI「MoeGoe」の2891人の日本アニメキャラの音声モデルが公開されてしまった！！Hugging Faceでデモが試せる！早速まどマギの５人に喋ってもらった！！うわうわうわ！ヤバいよヤバい本当にヤバいよコレはヤバい！！　https://t.co/wzHJdwEvr7 pic.twitter.com/EFgUId9qpd
&amp;mdash; うみゆき@AI研究 (@umiyuki_ai) November 5, 2022 MoeGoeは、最新のアニメ声合成AIです。名称は日本語の「萌え声」が由来だと思われますが、開発者は中国人の方のようです。GitHub及びHuggingFaceでソースコードや学習済みモデルなどが配布されており、誰でも試すことができます。学習済みモデルに関しては、商用利用は固く禁止されています。
技術的には、昨年韓国で開発された音声合成技術の「VITS」を応用したものになっているようです。VITSは今年初めごろに日本でも話題を呼び、複数の日本語による実装レポートもWEB上で発表されました。(Qiita「【機械学習】VITSでアニメ声へ変換できるボイスチェンジャー&amp;amp;読み上げ器を作った話」など)
VITSの仕組みについては一応英語の論文があるので、そちらをご覧ください。15ページ程度ですが私には読めません。(https://arxiv.org/abs/2106.06103)
また、学習に際しては、アニメのセリフを中心に多くの音声をデータベース化し配信しているウェブサイト「VoiStock」などから収集したデータを一部のモデルで使用しているとのことです。NovelAIがStableDiffusionベースのアニメイラスト生成AIをリリースした際、学習に使用したデータがイラストの無断転載サイトから入手したものであったことがネット上で非難の対象になりましたが、このサイトについても著作権周りのことは少し気がかりです。
作者のCjangCjenghさんがビリビリ動画に公開している紹介動画も併せてご覧ください。(https://www.bilibili.com/video/BV1P8411Y7v5/)
MoeGoeを試す方法3つ MoeGoeは現在、GitHubで公開されているプログラムのほか、HuggingFace上のオンラインデモページ、Microsoft Azure上に構築された合成済み音声を返すAPIとそれを利用したAndroid向けアプリなどが主にリリースされています。
とりあえず試してみるだけであれば、すぐにブラウザから使用することができるHuggingFace版を試すのが良いでしょう。Androidユーザーの場合はアプリ版も有用です。以下にリンクを記載しています。
HuggingFaceのデモページ(ブラウザ版、PC・スマホ等対応) Android版アプリ(Google Play) この記事では、せっかくなのでGitHubで公開されているものを実際に手元のパソコンで実行することを試みます。(といってもめちゃくちゃ簡単です)
MoeGoeをローカル環境(自分のパソコン)で実行しよう ※下記のソフトウェアを使用して発生したいかなる問題についても、私達は責任を負いかねます。
現在、MoeGoeのプログラムはWindows用のものしか配布されていないので、実行にはWindowsパソコンが必要です。実装自体はPythonですので、技術的にはMac、Linux等でも実行出来ると思われます(GUIアプリを除く)。
また、7-Zip形式の圧縮ファイルを解凍できるソフトウェアが何かしら必要です。7-Zipをインストールしておけば問題ないでしょう。
Windowsパソコンさえ用意できれば、実行ファイルは全て完全にexeファイルにまとめられているので、ソースコードのビルドなどに怖気づく必要は全くありません(私はexeファイルがあるのに気づかず、プログラムを地道にビルドしようとしてVisualStudioの依存関係不足で時間を溶かされました)。
以下、手順を示します。
MoeGoeの実行ファイルをダウンロード まずはMoeGoeのGitHubレポジトリにあるReleasesページをブラウザで開き、最新のMoeGoeの実行ファイル(exeファイル)をダウンロードします。この記事の執筆時点で最新版はVer.3.0.0でした。「MoeGoe.7z」と書かれているファイルをダウンロードし解凍してください。
MoeGoeのReleasesページ：https://github.com/CjangCjengh/MoeGoe/releases
便利なMoeGoeのGUIアプリをダウンロード このファイルだけでも実行することは可能ですが、コマンドライン上での操作となり不便ですので、GUIアプリも続けてダウンロードします。MoeGoe GUIのReleasesページから、最新の「MoeGoe_GUI.exe」をダウンロードします。先ほど解凍したMoeGoeのフォルダーの中に入れておくのが便利ではないでしょうか。
MoeGoe GUIのReleasesページ：https://github.com/CjangCjengh/MoeGoe_GUI/releases
学習済みモデルのダウンロード 最後に、各キャラクターのボイスを学習した学習済みモデルをダウンロードします。GitHubページから好きな物を選んで、それぞれ「Config File」と「Model」を両方ダウンロードしてください。私はMoeGoeのフォルダー内に「models」というフォルダーを作成し、その中に配置しましたが、ファイルがどこに合ってもあとでその場所を適宜指定するだけなので問題ありません。
複数のモデルをダウンロードする場合は、以下のように適宜分かりやすいように名前を変更しておいた方が無難です。
モデルごとに対応している言語が異なっているので、ダウンロードリンクの上に書かれている対応言語を確認してください。中には日本語非対応のモデルもいくつかあります。
「ゼロの使い魔」や「ToLoveるダークネス」など絶妙に古いアニメのモデルが多いです。開発者の推しなのか、ノベルゲームメーカー「ゆずソフト」のキャラクターのモデルがなかなか充実しています。
また、下部にあるVoistockモデルは、先述のアニメ音声収集サイトから大量のデータベース化された音声を収集して学習した大型モデルで、3000人弱のキャラ(海外版声優と日本語版声優・同じ声優の演じる別キャラなどの重複はあるとみられる)の音声を学習しているモデルです。これが事実上の標準モデルでしょうか。日本語以外に英語、韓国語、中国語にも対応しています。
MoeGoeの学習済みモデルの配布ページ：https://github.com/CjangCjengh/TTSModels
実際に動かす 全ての必要ファイルのダウンロードが終わったところで、実際に音声合成を試してみましょう。
MoeGoe_GUI.exeを実行します。
このような画面が起動するので、それぞれのメニューについて、上から順に、以下のファイルを指定します。
「打开文件」：「ファイルを開く」の意。このボタンをクリックして、先ほど解凍したフォルダーの中にある「MoeGoe.exe」のファイルを指定する。 「VITS」「HuBERT-VITS」「W2V2-VITS」のメニュー：AIモデルの種類を指定する。MoeGoeが現在公開している学習済みモデルのほとんどがVITSなので、基本的にはVITSを指定しておけば問題ない。モデルをダウンロードしたページに、そのモデルがVITSなのか、HuBERT-VITSなのかといったことが書いてあるので確認する。 「打开模型」：「モデルを開く」の意。このボタンをクリックして、使いたいモデルの.pthファイルを指定する。 「打开配置」：「設定を開く」の意。このボタンをクリックして、先ほど指定したモデルに対応するconfig.jsonファイルを指定する。 モデルを設定出来たら、「文本」の画面に喋らせたい文章の内容を入力し、「说话人」に表示されるリストから、喋らせたいキャラクターを選択します。
最後に、保存ボタンをクリックし、保存先を指定すると、合成された音声が保存されます。「重新合成」は上書き保存、「删除」は削除、「播放」は保存した音声の再生、「停止」は再生中の音声の停止です。
また、一部の複数言語に対応したモデルを使用する際には、[JA]こんにちは[JA]や[ZH]你好[ZH]のように、中括弧で言語を示す必要があります。日本語はJA、中国語はZH、韓国語はKO、英語はENです。
設定はこのようになります。MoeGoe_GUIのアプリを日本語化してみたのですが、あとでMoeGoe_GUIのソースコードのライセンスが不明なことに気づき、公開はしていません。MoeGoe本体はMITライセンスだったので、いつかMoeGoe_GUIのライセンスが更新されたら、日本語化したものをGitHub上で公開するかもしれません。(ちなみに、「文章を消去」はおそらく誤訳で、発音・アクセント・イントネーションの手動設定？が正しい)
合成した音声は載せません 今の段階では権利関係があまりに不透明すぎると思ったため。
代わりに、TwitterやYouTube、ビリビリ動画にあるおすすめの動画をいくつかご紹介します。
包含2890名动画角色的VITS语音合成模型(2980人のアニメキャラの声を搭載したVITS音声合成モデル) - ビリビリ動画：冒頭で紹介した、作者のCjangCjenghさんの動画です。58秒ごろから、合成音声のサンプルが流れます。 綾地寧々の声を作ってみた - YouTube：同じく作者のCjangCjenghさんがYouTubeに公開している動画です。ビリビリ動画よりも視聴ハードルが低いので、YouTubeじゃないと見れないという場合にはこちらがおすすめです。ただし、少し古いバージョンの合成システムを使用しているものと思われます。 日本語Ｎ１聴解問題 - YouTube：こちらも作者のCjangCjenghさんがYouTubeに公開している動画です。日本語検定1級のリスニング問題を萌え声で再現しています。 MoeGoeのボイチェン(halfmony氏) - Twitter ：MoeGoe特有のイントネーションの弱さは、適切に発音された音声にボイスチェンジャーをかけることで改善できそう。 感想 音声合成のクオリティは総じて高く、VITSの技術を応用した製品の実用化が待たれます。</description></item><item><title>Windows 11にアップグレードして3ヶ月経ったけど感想を書いてみる</title><link>https://asanobuturi.github.io/blog/20221018/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20221018/</guid><description>あいさつ こんにちは。中２の杉本です。なぜか副部長になりました。初日の朝は豪雨に見舞われた打越祭ですが、無事(?)開催できました。ご来場してくださった方々、差し入れをくださったOBの方々（差し入れは顧問が美味しくいただきました）、本来ならば文化祭の仕事はしないはずなのに働いてくれた中１に、この場を借りて感謝いたします。ちなみに僕は初日の朝、シフトの時間が来るまで靴下を乾かし続けていました。
本題 ※この記事は感想を書いてる。インストールの方法などは書いていない。
なぜWindows 11にアップグレードしようと思ったか。 去年の8月頃に、Windows 11（以下、Win11と表記）がWindows Insider ProgramのDevチャネルで公開が開始された際、友達が「朝起きたらWin11になっていた」と言っていてとても苦労していた。Win11の記事を見たり友達の話を聞いてみたろころあまり好みのUIでもなく、Androidアプリケーションが使える機能も然程魅力的には思えず、そもそもMacからWindows 10（以下、Win10と表記）の移行がほとんど完了して、スタートメニューのパネルもかなりカスタマイズして自分好みにした直後に、パネルシステムを廃止した新OSが出てきたのである。発狂。まぁ実際発狂はしなかったが、当分アップグレードはしないつもりでいた。
そうは思ったものの、ちょっとだけ試用してみたいと思い、128GBの増設したSSDににプレビュー版Win11をインストールすることにした。
PC正常性チェックという、Microsoftが公式で出しているWin11のインストールが可能か調べるツールがある。今でこそなぜインストールできないかが表示されるが、昔はインストールの可否しか出力されず、置き物と化していました。（その後、一度MicrosoftはPC正常性チェックの公開を一時停止。）そこでなぜできないかを困っていたところ、&amp;ldquo;WhyNotWin11&amp;quot;というWin11のインストール（アップグレード）できない理由を教えてくれるアプリケーションを見つけます。WhyNotWin11によるとセキュアブートとTPM2.0が確認されないとのことだった。それらの問題を修正後に、Win10のインストールUSBを作成してWin10をインストール、Win11にアップグレードしました。 1
色々使ってみたが、うん、何も変わってない。最初期の頃は確かUIが変わっただけでほとんど中身は変わっておらず（今もそうと言えばそうだが）、ただセキュリティ強化されただけだった。あと、Devチャネルだったこともあり、すぐグラッシュしてしまうのだが、普通ブルスクが出るところ、グリーンスクリーンが出てきたのには驚いた。何だったのだろうか。まぁ大した面白みなかったため増設したSSDはWin11用からLinux用に変えた。
その後、Win11のことなんて忘れてWin10でWSLにデスクトップ環境をインストールして遊んでいたら、LinuxのGUIアプリケーションを動かせる&amp;quot;WSLg&amp;quot;というものがあることを知り、それがWin11でしか動かせないこと2を知り、仕方ないので春休みぐらいにアップグレードしたは良いものの、強烈に使いにくく、すぐWin10に戻しましたが、中２の夏休みに入った頃にいい感じのフリーソフトのアプリケーションランチャーとWin11のUIをWin10に戻せる&amp;quot;Explorer patcher&amp;quot;というものも見つけたこともあり、これらを使ってだんだんWin11に慣れていこうということにし、アップグレードすることを決めた。
アップグレードしてみよう さぁ！アップグレードだ！って思い立ったのは良いものの、Win11ではなんとUEFIブートしかサポートしないとかいう暴挙にMicrosoftが出きたとのこと3。PCを自作したときにインストールしたMBRのWin10はアップグレードできないらしく、GPTに変換する必要があった4。一度目、春休みのアップグレードの際にはMicrosoft公式のmbr2gpt.exeというツールを使うことでmbrからgptに変換することができた。
そしてWin11を使いづらくてWin10に復元した後、間違いでメインOSのディスクをまっさらにしてしまった。重要なデータ類はHDDにバックアップを取っていたので大した損害は大した損害はなかったものの、再度OSをインストール羽目になってしまった。まぁ再インストールは何事もなかったの良しとしよう。
それでまた夏休みには入るまでそのままWin10を使うのだが、いざWin11にアップデートするとなったときMBRが障壁になっていた。インストールのときの僕は何を考えていたんだ5。そして前回と同じように公式のmbr2gpt.exeで変換しようとしてみたところ、なんか色々エラー吐かれてでききなかった。途方にくれていたときに有志の方が開発してくださっているgdiskのWindows版を使用する方法を知ったので、gdiskを使用しすることにし、ちゃんとGPTに変換することができた。
その後は特に大きなトラブルもなく、スムーズにインストール成功、データも残っていた。一つ問題があったのは、Intelが提供しているドライバサポート&amp;amp;アシスタントが作動しなくなったことでだ。まぁIntelから個別に取得すればよかったので特に問題なし。6
使用した感想 スタートメニュー 中揃えのスタートメニューやタスクバーは、Macで慣れていたのでストレスにはならなかった。 初期のころは前述したランチャーソフトを使わずにやってみようと努力したが、やはり使いにくかった。スタートニューの下半分が意味分からない機能のために占領されてしまっているために、一面で18個のアプリしかピン止めできない。それでは流石に使いにくいというわけで&amp;quot;CLaunch&amp;quot;というフリーソフトを使用することにした。CLaunchはボタン式のランチャーで、とても愛用している。（今も補助的な役割として使っています。）
UI Windows 10時代の角ばっていたUIから、全体的に丸びを帯びたデザインに変貌を遂げた。うっすらウィンドウが透けるMicaというWindows独特のUIはとても良い。
設定、フォト、ペイント、メモ帳、エクスプローラーなどのUIの更新も行われた。個人的には設定とフォトの新しいUIは好みである。エクスプローラーはUIを変えるにしてもリボンUIは廃止しないでほしかった。
WSA(Windows Subsystem for Android) 僕がインストールしたときはまだアメリカでしか公開プレビューは公開されておらず、裏口的な方法を利用することでインストールが可能だった。そしてまだアプリストアは使用できなかったが、（できたのか？）&amp;ldquo;WAS PacMan&amp;quot;というソフトを使用することで.APKからインストールすることができたので、試験的にApple Musicをインストールしてみました。使用してみた感想ですが、割りとサクサク動くが、サウンド関係はまだ弱いようで、Windows版のiTunesで再生したほうがよっぽど音質が良い。ちなみに、ゲームは試していない。スマホゲーは嫌いなのです&amp;hellip;
しかし、今は日本でも正式に公開プレビューが開始し、Hyper-Vと共存できるAndroidエミュレーターは少ない上に、ウィンドウにして動かすことができるのはとても素晴らしい。今後の動きに期待だ。
WSLg さて、当初の目標であったはずのWSLgだが、特に使い道が見つからずにテスト用アプリケーションであるxeyesだけ起動して終わった。今度StableDiffusion関係で活用できないか考えているところだ。
その他 仮想デスクトップ まず、仮想デスクトップ周りが強化されたのは嬉しいことだが、仮想デスクトップのスイッチャーを使用している際のエクスプローラーのクラッシュが非常に多くなった。Win10のときはクラッシュなんて起こったら珍しい方だったが、今では一日に一回ぐらい起きている。 スナップ機能の強化 殆ど使わない コンテキストメニュー なんかモダンになった。これはすぐ戻すべき。 あとはセキュリティ周りが強化されていたらしい。素人には全くもって理解できない。
Win11にするにあたって利用したソフト類 Explorer Patcher 前述の通り、Win11のUIを選択して戻すことができるアプリ。タスクバーはWin11だけどスタートメニューはWin10&amp;hellip;みたいなことも可能 CLauch 前述の通り、アプリケーションランチャー。スキンを適用することでWin11にあった雰囲気にできる。数あるランチャーソフトの中でもオススメ。 Rufus 前述の通り、.isoをUSBに焼くことができるアプリ。Win10のインストーラーを作成する際に使用。 WhyNotWin11 前述の通り、Win11へのアップグレードの可否を表示する際に使用。 Winaero Tweaker 本来ならばレジストリをいじらなければいけない設定をGUIで行えるようになる。便利。 22H2アップデートについて Win11最初の大型アップデートである22H2は、通知機能の改善やタスクマネージャーのUIの変更（中身はもちろん変わっていない）などがあったらしいとのことだが、そんなことはどうでもいい。スタートメニューにフォルダーが作れるようになった。これは大きな進展で、スタートメニューにピン止めできる上限が18しかなく実用性が皆無だったスタートメニューにフォルダが作れるようになり、その上ピン止め可能な段数を増やせる設定も追加されたのである。かなり良いアップデートだったと思う。
結論 WSLgやWSAなどの最新機能が多くあり、個人的に感じていたスタートメニューの使い勝手の悪さも22H2のアップデートでかなり改善されたため、UIの変更に極端な抵抗がなければアップグレードはオススメする。
おわりに 高二の元部長がCEATECに行くらしく、訪問記を書くかもしれないと言っているので次の更新は早くなるかも&amp;hellip;?</description></item><item><title>物理部の歴史を探る</title><link>https://asanobuturi.github.io/blog/20220619/</link><pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20220619/</guid><description>挨拶 どうも。中２のS.K.です。
無断で倉庫の整理をしたりサイトの改修したりしてます。
物理部の歴史を探る 先週あたりに物理部の先輩が過去の部誌のバックナンバーを取り出してて、先輩方が書いた部誌を呼んでいたら、いろんなことがわかってきた。
過去の物理部のサイト 昔の部誌にいろんなURLがあったので、アクセスしてみたら軒並みアクセスできなかったけど、魚拓に取ってくれている人が居たのでまぁそれを。
おそらく初代 おそらく二代 二代目の方のページのフッターに
画面解像度 800x600 以上、色数 16 bit 以上推奨
Internet Explorer 6.0 以上推奨
って書いてあるのがとても時代を感じる。というかIEサ終しましたね。
このブログがあるんですが、ここも2015年で更新が止まってますね。
これもあるらしいんですが、詐欺サイトに飛ばされますね。こわいこわい。
いつもの 無線班 ここに所属班員がなくなったって書いてあるので、2006/7/24には班員が居なくなってますね。
部誌から無線班の消息を辿ろうとしたんですが、2005年の部誌が無いんですよね。どうしたものか。
2004年には生存しているので、2004年ではもう虫の息だったのかもしれません。というか無線班の新入部員がいないのは無線班の存在を知らない人が多いからでは...? 1982年の部誌 部誌のバックナンバーを仕舞おうとしたら、何やら青いとても古い本があったんですよね。そしたら昭和57年って書いてあったんですよね。
そんな骨董品の部誌が残されているのも驚きなんですが、なんか部長挨拶的なところに今の校長の名前が書かれてるんですよね。つまり物理部の部長は校長になれるんですよね。
倉庫整理した 暇で暇でしょうがなかったので倉庫の整理をしてました。なんやかんやで高二も手伝ってくれてかなり綺麗になりました。このあともう一回整理してもう少し綺麗になりました。
整理中 整理後：棚 整理後：床 なんか落ちてた では、短めな気がしますが、また今度。</description></item><item><title>高校数学で描くマンデルブロ集合</title><link>https://asanobuturi.github.io/blog/20220508/</link><pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20220508/</guid><description>.youtube { width: 100%; aspect-ratio: 16 / 9; } .youtube iframe { width: 100%; height: 100%; } はじめに お久しぶりです。2019年に最後のブログを投稿してから3年以上が経ったようなのですが、当時中学2年だった私もいつの間にか高校三年になってしまいました。物理部がブログではなくTwitterを積極的に使うようになってからは、このウェブサイトも部誌の電子版の公開以外で使うことはほとんどなくなったのです。浅野を卒業する前にもう一度くらいはブログ記事を執筆しておきたいと思い、今回キーボードをたたいています。 前置きはさておき、今回は久しぶり(そりゃそうだろ)に技術的な記事になります。
対象読者 日本の高校一年生相当以上の基本的な数学の知識を有している人。必要な知識を前半部分で解説し、高校一年生、あるいは中学生程度でもある程度は理解できるように書いているつもりです。
加えて、基本的なプログラミングの知識を有している人。今回はJavascriptを使用しますが、for文、変数などの一般的な文法が分かっていればおおよそ意味はつかめると思います。
マンデルブロ集合とは マンデルブロ集合というものを知っていますか？実態はただの複素数の集合[※]なのですが、よくこのような写真の形でウェブ上に共有されることがあります。
※集合とは 日本では「数学A」で学習する概念。 数やその他さまざまなものの集まりのこと。集合を構成する「要素」は数だけでなく、(たぶん)確率や式であったり、数学以外の分野に集合の考え方を応用すれば「単語」や「情報」であるパターンもある(と思う)。 マンデルブロ集合は、数、そのなかでも複素数の集合である。つまり、マンデルブロ集合の中には(\(-0.2+0.5i\))や(\(0.1-0.3i\))などの様々な複素数が大量に収納されている。(複素数については後程解説します。)
画像出典：Wikimedia Commons(CC BY-SA 3.0) 下の画像は一部を拡大したもの。
このように、マンデルブロ集合をある規則にしたがって画像に落とし込むと、非常に美しい幾何学模様をみせるため、YouTubeをはじめインターネット上にはマンデルブロ集合を描画した映像がたくさん投稿されています。
この記事では、このようなマンデルブロ集合の写真を、高校数学の知識だけで描画することを試みます。なお、今回は上記の写真や映像のようなカラフルな色付けは行いません。
マンデルブロ集合の実態は、以下の漸化式が無限大に発散しないような複素数\(C\)の集まりです。(より正確な定義を後程記載)
\[ \begin {cases} Z_0 = 0\\ Z_{n+1} = {Z_n}^2 + C \end {cases} \]
このように定義されるマンデルブロ集合を構成する各複素数を複素数平面上に黒い点としてプロットしていくと、おおよそ上記の写真のような画像が得られます。
さて、一応ここまで高校数学の用語だけを用いて解説してきましたが、まだ該当範囲を学んでいない人にとってはちんぷんかんぷんだと思いますので、ここから一つ一つ噛み砕いて理解していきましょう。
ここから下は、複素数、複素数平面、漸化式、極限についての基礎知識の解説が続きます。これらを既に理解している方は、「マンデルブロ集合の要素を調べる」の章まで読み飛ばして頂いて構いません。
複素数(数学Ⅱで学習)とは 中学三年で習う平方根(ルート)を思い出してください。 \(2\times2=4\)であるとき、\(4\)のルートすなわち\(\sqrt4\)は\(2\)となります。同様に\(3\times3=9\)なので、\(\sqrt9=3\)です。このように、ある数に対して、2乗することでその「ある数」となるような「別のある数」を求めるのがルートの計算です。
なお、\((-2)\times(-2)=4\)でもあるため、正確には\(\sqrt4=\pm2\)となります。また、\(\sqrt2\)などの値もコンピューターなどを使うことでおおよそ\(\pm1.41421356\)という値(近似値)を求めることが出来ます。実際に電卓でこの数を2乗してみれば、約2(1.999999993…くらい)になることが確認できると思います。
虚数の定義 さて、ここで負の数のルートを考えてみます。 \(\sqrt{-1}\)はいくつでしょうか？
\(\sqrt1\)であれば答えは\(\pm1\)、すなわち\(1\)と\(-1\)ですが、2乗して\(-1\)となるような数は存在するのでしょうか？
はい、そんな数は存在しません。正確には、実数(整数、分数&amp;amp;少数、ルートや円周率などの無理数)の中には存在しません。そこで、先ほど2乗して\(2\)になるような、少数で正確に表せない数を\(\sqrt2\)という記号で表したように、2乗して\(-1\)になるような数を\(i\)という記号を用いて考えることになったのです。つまり、\(i^2=-1\)であり、\(\pm i=\sqrt{-1}\)です。このような、2乗して負の数になるような数を、「虚数」と呼びます。
この、\(\pm i =\sqrt{-1}\)で定義される数\(i\)には、「虚数単位」という名前がついています。\(\pm i\)とあるように、この方程式の解はプラスマイナスの2つがありますが、虚数単位はそのどちらか片方のみを表します(計算の途中でプラスとマイナスをごっちゃにして考えなければどちらでも問題ない)。</description></item><item><title>フルカラー7セグ時計</title><link>https://asanobuturi.github.io/electronic/1/</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/electronic/1/</guid><description/></item><item><title>AviUtlについて、導入など</title><link>https://asanobuturi.github.io/blog/20190306/</link><pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20190306/</guid><description>お久しぶりです。時がたつのは早いもので、前回書いたのは約3ヶ月前になってしまいました。
いや、すぐに記事を出すつもりだったんですよ。しかしいつの間にかもうこんな時期になってしまいました。本当にはやいです。
ということで今回はAviUtlについてです。
AviUtlとは
参考：AviUtlの易しい使い方（外部リンク）
概要
AviUtlとは無料で提供されている動画編集ソフトです。
ＫＥＮくんという方が開発しました。
特徴
・操作がわかりやすい
・多機能で動作が軽い
・なにからなにまで基本的に無料
・使うのに管理者権限がいらない（インストールは不要）
・有志の方たちが作ってくださったプラグインが豊富
・使っている人が多く情報も多い
・拡張がしやすい
ざっくりとした歴史
1997年
「KENくん」さんが初めてAviUtlを公開。
拡張編集（後述）はまだなく、できることは基本的な動画のカットや結合でした。
2008年
「KENくん」さんが「拡張編集」を開発し、リリース。
AviUtlの機能がそれまでの何倍にも便利になりました。
～今
無料で高機能の動画編集ソフトとして有名になり、様々なプラグインなどが開発され、配布されました。
さらには「ゆっくりMovieMaker」「AviSynth」などのAviUtl対応のソフトも出ています。
AviUtlで編集しているYouTuberの方も結構います。
ゆっくりMovieMakerとは
ゆっくりMovieMaker（ゆっくりむーびーめーかー）は饅頭遣いのおもちゃ箱で
配布、開発しているゆっくり実況プレイ動画用の動画編集支援ソフトである。
主にニコニコ動画、Youtube等の動画投稿サイトでアップロードされているゆっくり実況動画の作成に使用されている。
愛称は"YMM"である。
引用 - Wikipedia
「拡張編集」とは
拡張編集でできるようになったことで一番大きいのは、
↓これです↓
そう、タイムライン機能です。無料のソフトでタイムラインが扱えるものはかなり少ないです。
タイムラインのおかげで、視覚的に操作ができるようになり、とても編集がしやすくなりました。
さらに、↓設定ダイアログというのも追加されました。
このダイアログで簡単に座標の設定や効果をつけることができるようになりました。
とにかく、今のAviUtlには欠かせない機能です。
導入方法
参考：AviUtl初心者が最初に読むべきページ【導入から使い方まで】（外部リンク）
分からないことなどがあったら上のサイトも見てみてください。おそらくこっちのほうがわかりやすくて正確です。
なお、一部フィルタ設定など省いている場所があります。
1.AviUtl本体と拡張編集の導入
2.L-SMASH Works(入力プラグイン)の導入
↑これを導入することで、mp4、mp3などのファイル形式も読み込めるようになります。
必要のない方は読み飛ばしてかまいません。</description></item><item><title>MIDIについて語る その三</title><link>https://asanobuturi.github.io/blog/20181229/</link><pubDate>Sat, 29 Dec 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181229/</guid><description>前回はDominoでとりあえず音を鳴らしてみました。
今回はその続きです。 更新日時が結構空いてるなんて言ってはいけない。
取り消し 前回作った青い四角（これを「ノート」といいます。）を今度は消してみましょう。
方法① 上の方に鉛筆と四角い点線と消しゴムがあると思います。
←これ
今は鉛筆が選択されているので、消しゴムを選択します。
そして、消したいノートをクリックしてください。
すると消えます。
方法② こちらのほうが絶対に速いです。
こちらの方法を強く推奨します。
やり方は簡単。ノートをダブルクリックするだけです。
この方法だと消した後にわざわざ切り替えなくてよいのでとても楽です。
ノートの色々な変更 音の高さやタイミングの設定 ノートの真ん中をクリックしたまま動かすだけ。
以上！！
ノートの長さの変更 これは上の2行で終わった説明に比べて少し難しいです。
そうはいっても簡単ですが。
ノートの左右の端にマウスポインタを合わせてください。
するとマウスポインタが矢印に変わるはずです。
あとはクリックしながら伸ばしたり縮めたりするだけです。
音の強さの変更 音の強弱を設定するにはVelocityという値をいじる必要があります。
Velocityは和訳すると、「速度」です。
つまりどういうことかというと、
ピアノの鍵盤を強くたたいた時と、弱く押した時の音の違いということです。
すなわち、「押す強さ」≒「速度」なのです。
では実際に変えてみましょう。
下の方にグラフのようなものがあると思います。
編集モードを選んで（デフォルトでは直線）高さを調節すると、
音の強さが変わります。
Velocityが大きいと強く、小さいと弱くなります。
まとめ 基本的なことは大体わかったと思います。
それではよいお年を。</description></item><item><title>MIDIについて語る その二</title><link>https://asanobuturi.github.io/blog/20181130/</link><pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181130/</guid><description>前回はMIDIについて少し話しましたが、今回はMIDIを使って 作曲、打ち込みのやり方を書いていきたいと思います。
ソフトの導入 まず最初に ここ でも紹介していた、MIDIファイルを作成する「Domino」というソフトを導入します。
ほかにもMIDIファイルを作成するソフトはあるのですが、
これが一番初心者に分かりやすいかつ、MIDIのたいていの機能があるので
今回はこれを使いたいと思います。ただDomino以外が使えないだけ
では Domino公式ホームページ にアクセスしてください。
右側にダウンロードのボタンがあるのでダウンロードしてください。
すると「Domino xxx.zip」（現時点で143）というZIPファイルが保存されるので、お好きな場所に展開してください。
なお、Dominoは管理者権限のいるようなインストールはしないのでご安心を。
では解凍したZIPファイルのDomino.exeというファイルを開いてください。
するとこの様な画面になると思います。 そしたら左上の「ファイル(F)」→「環境設定(E)&amp;hellip;」と環境設定を開いてください。
そして「MIDI OUT デバイス」を「Microsoft GS Wavetable Synth」に変更してください。
同様に「音源（音源定義ファイル）」を「GSm(Microsoft GS Wavetable SW Synth)」に変更してください。
変更が終わったら「OK」を押して環境設定を終了してください。
これで導入は完了です。
Dominoの使い方 とりあえず音を出してみる ではピアノの右側の好きなところを左クリックしてみて下さい。
するとこのように青い四角ができるはずです。
ではスペースキーか上部にある緑の三角の再生ボタンを押してください。
ピアノの音が出たはずです。もしできていないなら環境設定を見直してみてください。
楽器を変えてみる 次に楽器を変えてみましょう。
左にあるこの部分をダブルクリックしてください。
するとこのような画面が出てくるので、
左のマップからオルガンを選択し、「PC#」を「017 Organ 1」に変更してください。
ではまた再生してみてください。音が変わりましたね。
まとめ 今回でDominoで作曲する一歩を踏み出しました。
ということで次回に続きます</description></item><item><title>MIDIについて語る その一</title><link>https://asanobuturi.github.io/blog/20181126/</link><pubDate>Mon, 26 Nov 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181126/</guid><description>みなさんは、MIDIというものを知っていますか？
例えばこんな感じの動画、見たことありませんか？
このような形の動画は「曲名　MIDI」というように検索すればたくさん出てきます。
ではMIDIとはいったい何なのでしょうか。
MIDIの使われ方 MIDIが使われる場面の多くは、
・曲などの打ち込み1
・作曲
という時でしょう。
冒頭の動画もAlan Walkerの「Faded」という曲を打ち込んで、MIDIファイルにしたものです。
YouTubeにあるMIDI系の動画のほとんどはSynthesiaというソフトを使ったものです。
このSynthesiaによって上から降ってくる動画を作ることができるのです。
また、作曲もMIDIをつかうことで手軽にできます。
つまり&amp;hellip;
MIDIとは かみ砕いていうと、
MIDIというのはコンピューター向けの楽譜のようなもの。
これを作って作曲したり、打ち込みをするわけです。
パソコンのソフトだけでMIDIファイルを作ることもできますし、
MIDI対応の楽器をパソコンにつないで演奏したデータを取り込むこともできます。
これのDomino とか使えば比較的簡単に作曲ができますよ。
MIDIの長所 MIDIの長所　１ mp3やwavといった音データと違い楽譜のような構造なので、
曲などの場合はファイルサイズが小さくなりやすいです。
MIDIの長所　２ 作曲などをするときに楽器が弾けなくても大丈夫！
でもやるならある程度は引けたほうがいいと思いますよ。
MIDIの長所　３ どの音がどのタイミングでなるかというデータの集まりなので、
専用ソフトなどで開けば簡単にピアノなどで弾くことができます。
という感じです。
まとめ 長くなりそうなので複数回に分けることにします。
それではまた。
打ち込み（うちこみ）とは、主にドラムマシンやミュージックシーケンサーなどに 前もって演奏情報を入力しておいて（打ち込んでおいて）、 それを再生することで演奏を実現させる技法、またはその結果としての音楽のこと。 Wikipedia より &amp;#x21a9;&amp;#xfe0e;</description></item><item><title>DELL OPTIPLEX 780手術</title><link>https://asanobuturi.github.io/blog/20181113/</link><pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181113/</guid><description>DELLのパソコンが動かない! 物理部では、私物のノートパソコン等を持ち込んで作業ができない場合、部活にあるパソコンを貸し出して使うことがあります。
PC班員が作業をするときは、持ち込むか借りるかの二択で、部活のPCは文化祭の展示でも使われるものになります。
部活のPCの中に、DELLのOPTIPLEX780があるのですが、それがある日突然電源がつかなくなってしまいました。
電源ボタンを押しなおしたり、電源ケーブルを押し直したりしても動かないので、電源が壊れているという判断に至りました。
変な電源 替えの電源に交換すればいいのですが、組み込まれていた電源が見慣れない形のものでした。よく見るATX電源などではなく、小さな筐体に収まるように独自に設計されたもののようで、物理部内に替えの電源がなかったのです。
「DELL 電源」とAmazonで検索したら、意外と簡単に見つかりました。3000円くらいで安かったので、すぐに買うことになりました。
電源到着、そして交換 暫く待っていたらAmazonから電源が届きました。
日本の倉庫から発送されるのかと思っていたのですが、中国語の伝票が張り付いて届いたので驚きました。深センの業者から香港国際空港→成田空港と飛んできたようです。
一部モザイクを掛けておきました。不必要なところにもかかっているかもしれませんが&amp;hellip;
中にすごく潰れやすいプチプチが入っていました。雑巾絞りでブヂブヂブヂッってやるの楽しかった。
上のが新しい電源です。古い電源はアルミの表面が錆びているみたいです。きれいになってよかった。ついでにPCの中のほこりも拭き取っておきました。
換装前と換装後ではこんな感じ。見た目上ではきれいになって以外に特に変わりはないですが。狭い筐体に配線、CPUファン、HDD、DVDドライブなどを詰め込んでいるせいで色々外さないと配線し直すことができなかったので非常に面倒でした。
その後 蓋をしめて、電源ケーブルをさしたらちゃんと起動しました。よかった。
このブログを書いている日に、新しく別のPCのOSが起動しなくなったのは内緒。
それでは、最後まで読んでいただきありがとうございました。他の記事もぜひ読んでいってくださいね。</description></item><item><title>物理部員のよく使うブラウザ</title><link>https://asanobuturi.github.io/blog/20181109/</link><pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181109/</guid><description>今、あなたはこのページをどんなブラウザで見ていますか。 物理部員のほとんどがこだわりのブラウザを使っています。 では、そんな物理部員たちのブラウザを見ていきましょう。
※これには個人的な意見がまたまたとても多く含まれています。
また、もしかしたら間違った情報があるかもしれません。
Chromium系列 Chromiumは、Googleが主体となって開発したオープンソースのブラウザで、Google Chromeなどの元になっています。
WEBページはHTMLという形式で文字・画像などの情報がまとめられ、
それをブラウザに搭載されているレンダリングエンジンが画面に描画します。
Chromium系列のブラウザでは、レンダリングエンジンにBlinkを採用しています。
Google Chrome 今世界で一番使われているブラウザです。
リリース当時の他のブラウザと比べて、ものすごく軽いブラウザだったので、今も大人気です。 とくにこだわりがない人はこれか、Windows10標準の Microsoft Edge がおすすめです。
Chromium Chromeとほぼ同じです。
オープンソースで（くどい）インストールが不要です。
「Chromium使うならChromeでいいだろ」というのが物理部のブラウザマスターの意見です。
Chromiumという名前は金属のChrome（クロム）の元素名だと言う事です。
Opera ノルウェーの会社が作ったブラウザです。（現在は中国の会社に買い取られてしまいました。） Chromeよりも軽く、標準で広告ブロッカー1がついています。
Vivaldi Operaの開発者がOperaの開発後に作ったブラウザです。
広告ブロッカー機能はもちろん、ページキャプチャーなどの機能もあるので、おすすめです。
また、OperaはOperaの拡張機能しか入らなかったので「この拡張機能が入れられない！」という事がありました。
しかし、VivaldiはChromeの拡張機能がすべて入るので、主要な拡張機能をほとんど入れることができます。
また、標準でタブを管理する機能がついています。
例えば&amp;hellip;
こんなことができたり&amp;hellip; Chromeより良いブラウザがいいという方にはお勧めです。
その他 FireFox Mozilla Firefoxとも呼ばれます。
Chromeが出る以前にあったブラウザで、InternetExplorerでなければこれを使う、という感じでした。
豊富な拡張機能も魅力の一つです。
Microsoft Edge Windows10にプリインストールされているブラウザです。
そこそこ軽いブラウザです。
でもできるならChromeなどを使ったほうがいいでしょう。
Safari Appleが開発しているMacOS向けのブラウザです。
Windows向けもありますがあまりおすすめしません。
おわりに 結局、物理部員はVivaldiを推しているようですね。
&amp;hellip;と、いうことでですね、以上です。
最後まで読んでいただきありがとうございました。
WEBサイトの広告を表示させなくするものです。 スマホなどの場合、これを使うことによってデータ通信量が減ることがあります。 ただし、読み込みが遅くなる場合があるので注意です。 &amp;#x21a9;&amp;#xfe0e;</description></item><item><title>物理部員PC班のよく使う言語</title><link>https://asanobuturi.github.io/blog/20181102/</link><pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181102/</guid><description>ここでいう言語というのはもちろんコンピュータープログラムで使う言語のことです。 別に「英語で会話しなくてはならない」なんていう縛りがあったりするわけじゃありません。
※これには個人的な意見がまたまたとても多く含まれています。
また、もしかしたら間違った情報があるかもしれません。
C系列 C言語は、すぐ下に書いたものを読んで頂ければわかりやすいと思います。
C言語は初版が半世紀近く前に使われはじめて以来、様々なプログラミング言語の代表格として君臨してきました。
C言語をベースとして、様々な機能が追加されたC++,C#,Javaなどが使われています。
C言語 物理部のパソコン班の中一のほとんどがこの言語から始めます。
参考書籍なども多く、今あるプログラミング言語はC言語がもとになっているといっても
過言ではないと思います。でも最初に断ったようにC言語を話す人は（少なくとも物理部には）いませんよ。
C++ 中二～中三ぐらいから自然とC++を始める人が現れてきます。
当初、この言語はC言語の拡張版として開発されていましたが、
今はC言語とはそれなりに区別されています。
とある人はこの言語の文法などにハマって、ゲームの制作スピードが落ちてしまいました&amp;hellip;
Java C++を参考にして作られた言語です。
物理部員のよく使うソフト で書いた通り、Eclipseというソフトを使って書かれます。
環境構築がめんどくさいけどAndroidのアプリなどの制作に使われています。 結局Javaあきらめてたので&amp;hellip;
C# C#自体で作るのではなく、Unityという開発環境でこの言語を使う、という人が大半です。
歴史的には　C言語　→　C++　→　Java　→　C#　という順番です。
C#はMicrosoftが開発したので、.NET Frameworkなどを使ってWindowsのアプリを簡単に作れるようにもなっています。
インタープリタ型の言語 インタープリター型言語は、Cなどの静的コンパイラ型の言語とは違い、プログラムを機械語に翻訳する作業をプログラムの実行時に行います。
俗に動的言語とも呼ばれます。
Python 「C言語に飽きた！」という人などがたどり着いたのがこれです。
ほかの言語とは違う文法で、読みやすく設計されています。
また、ライブラリ（拡張機能みたいなもの）が多めなので、色々なことができます。
Java 前述 の通り。Cと違って中間言語というものにしてから
実行するので、Javaが入っていればいろいろなプラットフォームで動かすことができます。
JavaScript 「またかよ&amp;hellip;」と思ったそこのあなた！
JavaとJavaScriptはオーストラリアとオーストリアぐらい違うといわれるくらい違いますよ！
JavaScriptはブラウザ上で実行されます。たとえばこれとか。
その他 なでしこ 「プログラミングって英語じゃん！やだ！」って日本人が好きそうな言語がこれです。
この言語は日本語で書くことができる日本産の言語です。
物理部でははるか昔に使われていたそうですが&amp;hellip;
個人的にはソース読むのも書くのも大変そうだと思います。
Scratch 「プログラミングって英語じゃん！しかも文字うたなきゃいけないし！やだ！」
という人や初心者の方におススメしたい言語がこれです。
ブロックを組み合わせるだけでプログラミングができます。
公式のホームページには世界中の人の作品も公開されているので参考にすることができます。
ただそこにあるゲームにハマりすぎないように注意！
Ook! 「プログラミングって英語じゃん！人間の言葉なんてわかるわけないだろ！やだ！」
というオランウータンのための言語です。世界って広いですね。
「Ook.」「Ook?」「Ook!」の三種類しか使いません。
なので暗記がものすごく苦手という方にも良いかもしれません。
ただものすごく読みにくいと思いますよ&amp;hellip;
あれ、これって「物理部員がよく使う言語」じゃないじゃん&amp;hellip;</description></item><item><title>物理部員のよく使うソフト</title><link>https://asanobuturi.github.io/blog/20181026/</link><pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181026/</guid><description>物理部員がよく使うソフトを紹介したいと思います。 ここにあるソフトは基本的に無料なのでよければ調べてみてください。
※これには個人的な意見がとても多く含まれています。
プログラミング Visual Studio 2017 Community 物理部のパソコン班のほとんどが使っています。
プログラミングをする上での開発環境として王道です。
これを入れておけば困ることはなさそうです。
Visual Studio Code 一部の人が使っています。
自分の好みに合わせてカスタマイズができますが、今のところ物理部にはWi-Fiがないため、
本来の力を発揮できていないようです。悲しい。
Atom これまた一部の人が使ってます。
Git Hubが制作したカスタマイズできるテキストエディタです。
ですが、今のところ物理部にはWi-Fiがないため、本来の力を発揮できていないようです。
ん？どこかで同じような文章を見たような&amp;hellip;
Eclipse IBMが開発した統合開発環境で、 物理部では主にJavaというプログラミング言語を書くのに使われています。 結局Javaあきらめてたので今は使われていません。
シミュレーションなど LTspice 物理部の電工班の一部の人が使っています。 様々な回路素子を組み合わせて動作をシミュレーションすることが出来ます。 一々ブレッドボードの上に回路を組むのが面倒な時に使います。
音楽・動画関係 Domino MIDIファイルという楽譜のような形式の音楽ファイルを作る作曲ソフトです。
これで文化祭の自動演奏装置のデータなどをいろいろしていました。
Audacity ちょっとした音の編集からガチなものまでいろいろ編集ができるソフトです。
音のピッチあげたり&amp;hellip;音量上げたり&amp;hellip;
あとPCからの音をマイクを通さずに録音することも可能です。
AviUtl 無料の動画編集ソフトです。
このソフトもプラグインを入れることでできることがかなり増えます。
有料ソフト並みの使いやすさだと思うのでオススメです。
VLC media player いろいろな形式の動画を再生することができます。 再生だけでなく、ほかの形式への変換も可能です。
画像 ペイント Windows標準のソフトがなぜか物理部の絵師に使われている&amp;hellip;
弘法筆を選ばずってことなのかな？
EDGE ブラウザじゃないですよ。EDGEという高機能ドット絵エディタです。
Dominoの開発者と同じ方が開発されています。
Domino同様、分かりやすくて使いやすい！
inkspace inkscapeはベクター1（.svg）の形式の画像ファイルを作ることができるソフトです。
シンプルなデザインをするときに使われます。
物理部員に絵心がないわけではありません。ハイ。
GIMP 結構本格的な画像編集ソフト（と思っている）。
たまに使われています。
GIMP難しいからあんまり書けません&amp;hellip;
手軽に透明.png そのまんまの機能があります。 機能が透明化のみなので手軽に使うことができます。 よく透明化だけする人にはオススメです。
おわりに 書いてみてわかりましたが、物理部員は結構メジャーなソフトを使っているようですね。</description></item><item><title>近況報告とか</title><link>https://asanobuturi.github.io/blog/20181025/</link><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20181025/</guid><description>前回の更新から一年ほど経ちました。この間に新しい中学1年生が入ってきたり、2018年の打越祭(文化祭)があったりしたので近況報告をしたいと思います。
今回のブログを書いているのは今までの人とは別の人です。
最近の物理部の様子の写真でも貼っておきます。中1も何人かいます。 中学1年生がたくさん入ってきた 今年は中学１年生がやたらとたくさん入ってきました。ざっと2,30くらいでしょうか。この人数は一部の運動部よりも多かったりするらしいです。部活動紹介のときに触らせた部員作成のゲームや電子工作の作品に興味を持ってくれたのかも知れません。
しかし今年度の中1に関して危惧されているのは、電子工作班の人数が入ってきた人数の割に少なすぎることです。現役の電子工作班員も、「人数が少なすぎて技術を受け継ぐのが難しいかもしれない」と言っていました。
また、多くの人が案の定幽霊になってしまいました。あまり人が多くてもモノが足りないので意味がないのですが、幽霊になってしまったのは残念です。そのせいもあって、今のところはパソコンをあと一、二台(新調|修理)すれば問題なさそうです。
2018年打越祭(文化祭)が終わった 2018年の打越祭が終わりました。第三十九回だそうです。今年は9月8日と9日に開催されました。全体としての様子など詳しい情報は 打越祭公式Twitter なんかを見て頂ければわかりやすいと思います。 中華3Dプリンターを買った 2017年は、部費が少し余ったということで最後の方に前々からほしかった3Dプリンターを買うことになりました。
今回買ったのはQIDI TECHNOLOGYという中国・浙江省温州市の会社のX-ONE2です(ONEなのに2とは(笑))。 アマゾンの商品ページ が有ったので貼っておきます。
3Dプリンターというと、台湾のXYZ Printingが有名ですが、年度末で部費もあまり残っていないので、たくさんのプリンターの中でも高コスパだったこのプリンターを買うことになったようです。
実際にこのプリンターを使ってみての気になったことを書いていこうと思います。ただし、他のプリンターを使ったことがあるわけでもないので比較はできません。完全に独断です。
ほっとくとパイプの中で樹脂が詰まる これは他のプリンターでも同じかも知れません。印刷が終わった後、掃除をしないとパイプの中で溶けた樹脂がつまりました。二回目の印刷でなかなか樹脂が出てこないと思ったら中にキノコが入っていました。 遅い 3Dプリンターってこんなに時間がかかるものなんですね。物理部では最初にテストとして5cm立方くらいの中が空洞の蓋がない立方体を印刷しましたが、かなり時間がかかって部活動終了時刻になってからは倉庫で一人動いてもらいました。
さすがに次の活動日には印刷が終わっていましたが。
モデリングが難しい 実は、プリンターを買ってから、テストとして最初についてきた3Dデータひとつと立方体を印刷した以外に何も印刷していません。
作りたいものが有っても、3Dのモデルを作ることが出来る人が物理部に居ないのです。
今、 Blender という3Dのソフトを勉強していたりするので、来年の文化祭でなにかできたらいいなと思っています。
最後に ということで、最後まで読んでいただきありがとうございました。次回も早めに更新していきたいと思います。物理部にあった古いパソコンを何台か修理したりしているので、その報告でも書こうかと思っています。</description></item><item><title>2018年2月は満月にならない</title><link>https://asanobuturi.github.io/blog/20171217_2/</link><pubDate>Sun, 17 Dec 2017 08:49:15 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20171217_2/</guid><description>まずは，これを見てください。
上の画像は，国立天文台の暦のページからお借りしたのですが，普段なら
このように「望(満月)」があるはずなのに，2018年2月の暦には「望(満月)」がないんです。
今回は，このことについてです。
そもそも満月とは 天文学的な意味での満月（望）は、太陽、地球、月の位置関係によって決まります。満月とは、地球から見て月と太陽が反対方向になった瞬間（月が太陽の光を真正面から受けて、地球からまん丸に見える瞬間）の月のことを指します。
つまり，「○月○日は満月」ではなく，「○月○日 ○時○分の瞬間に満月になる」ということです。上の2017年12月の例で言うと，2017年12月4日 0:47の瞬間，地球から見て月と太陽が反対方向になります。
なぜこんなことが起こるのか 実は，2018年1月と3月に満月はそれぞれ２回あります。 2018年1月から3月の満月を見てみると，
2018/01/02 11:24 2018/01/31 22:27 2018/03/02 09:51 2018/03/31 21:27 こんな感じで，ちょうど2018年2月に満月が来ません。
満月から次の満月までは約29.5日なので，うまく１月の最後に満月が来れば２月に満月が来なくなるというわけです。
2018年2月以外にはいつあるの？ import ephem pr=0 d=ephem.Date(&amp;#39;1800&amp;#39;) while d&amp;lt;ephem.Date(&amp;#39;2500&amp;#39;): d=ephem.next_full_moon(d) tl=ephem.Date(d+ephem.hour*9) mo=tl.datetime().month if (mo-pr+12)%12&amp;gt;=2: print(&amp;#39;{0}/{1}&amp;#39;.format(tl.datetime().year,mo-1)) pr=mo その結果は，
1801/2 1809/2 1847/2 1866/2 1885/2 1915/2 1934/2 1953/2 1991/2 2010/2 2018/2 2029/2 2037/2 2067/2 2094/2 2105/2 2143/2 2162/2 2181/2 2200/2 2219/2 2238/2 2257/2 2287/2 2306/2 2325/2 2363/2 2382/2 2401/2 2420/2 2439/2 2466/2 2485/2 前回は2010年2月，次回は2029年2月。大体100年に４回から６回あります。</description></item><item><title>ホームページ引っ越し</title><link>https://asanobuturi.github.io/blog/20171217/</link><pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20171217/</guid><description>Hello, New Home page!
新しいホームページからこんにちは！
ということで，HPを移転しました。若干デザインの変更もしてあります。
引っ越し先 以前は， 忍者ホームページ を使っていたのですが，色々あって GitHub Pages に移転しました。
デザインの変更 このアップデートから，Material Design Liteという，Google製のフレームワークを使っていません。 左上にあるハンバーガーメニューも，他のサイトを色々と参考にしながら作りました。
それだけ。短いですが今回はこのへんで終わり。</description></item><item><title>ホームページ更新</title><link>https://asanobuturi.github.io/blog/20171126/</link><pubDate>Sun, 26 Nov 2017 08:37:58 +0000</pubDate><guid>https://asanobuturi.github.io/blog/20171126/</guid><description>はじめまして。というか、お久しぶりです。の方が正しいですかね。書いている人（前回の更新は２代前の部長さん）は変わりましたが。
ホームページを更新しました 多分ちょうど１年ぶりの更新になります。 というか、最終更新日（だと思われる）のが2016年9月9日。去年の文化祭直前。 そして、その時のホームページが、
部誌のページ
ゲームのページ
（ぜんぜん「文化祭終了後」ではないですね。もう次の文化祭も終わったのに。） 来年はちゃんと更新するのでご安心を～（←信用できない）
ブログっぽい何か（これのこと）を作りました そもそも、ブログはもとから存在していました。
物理部活動日誌
↑これのことです。
一応、このブログのIDとパスワードはもらっているので更新はできます。 でも、上のブログって自由度が低いし、それに物理部のホームページを一つにまとめたかったので、 こっちにブログ（っぽい何か）を新しく作りました。
「じゃあ こっち もまとめろよ」と言われそうですが、それはまだちょっと先になりそうです。
このホームページは無料版の忍者ホームページを使っているのですが、 忍者ホームページはPHPが使えないので、ブログ向きではないんです。無料で使わせていただいているのに失礼ですが。
このページも、HTMLから直接いじって書いている状態です。
なので今現在、ホームページを移転することを考えています。</description></item><item><title>編集後記</title><link>https://asanobuturi.github.io/document/2022/edit/</link><pubDate>Thu, 01 Jan 1970 00:00:12 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/edit/</guid><description>この度は2022年度物理部部誌を読んで頂きありがとうございます。Web版の編集後記なので、web版作成について少し話そうかと思います。web版はMarkdownで提出された原稿を先代が作ったpandocによる部のブログ用テンプレートを改造して原稿から簡単にHTMLを出力できるようにして作りました。それがあるならすぐに終わると思うかもしれませんが、実はconfigをいじったりレイアウトがおかしい状態で出力されたりとあるので、そこそこ時間がかかりました。こういうの書くの苦手なのでここらへんで切り上げたいと思います。読んでいただきありがとうございました。</description></item><item><title>編集後記</title><link>https://asanobuturi.github.io/document/2021/edit/</link><pubDate>Thu, 01 Jan 1970 00:00:11 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/edit/</guid><description>この度は、私達物理部の部誌「Positron 2021」を手にとっていただき、どうもありがとうございます。今年の部誌の編集を担当しました、高校2年の永田です。今年の部誌は2万字級の記事がひとつ、1万字級の記事がひとつ、そして一人で2つの記事を執筆した部員が合計1万字超の記事を書き上げ、全体で100ページもの超大ボリュームの部誌を完成させる事ができました。記事の内容はいかがでしたでしょうか。
さて、今年の部誌では新たな試みとして、記事の下書きをMarkdownにて執筆してもらい、編集と組版(レイアウト)の作業をVivlioStyleというオープンソースのCSS組版ソフトウェアでこなすということを行いました。従来のWordファイルでの原稿提出で課題であった、レイアウト管理の煩雑さを解消し、CSSで部誌全体のレイアウトを一括変更できたことはとても良かったと思います。ウェブ上に公開されているVivlioStyleのテーマをベースに様々な調整を加えて、そこそこ雑誌らしい整った体裁になりました。
また、Wordファイルと異なりMarkdownファイルはシンプルなテキストファイルであるため、校正時にはMarkdownファイルをGitでバージョン管理することで、校正前後の差分を閲覧しやすくするなど細かい事務作業の効率化を図ることもできました。私は今年で部活動を引退することになりますが、MarkdownとCSS組版を駆使した編集のシステムは、ぜひ来年の編集担当にも継承してもらいたいと思います。
ただし、VivlioStyleのCSS組版は非常に細かく高度な編集ができる一方で、組版の難易度は極めて高く、CSSに慣れていない私には厳しいものがありました。そのことは編集の作業時間に現れており、この部誌のすべてが完成したのは文化祭2日前の木曜日となってしまいました。その木曜日の早朝に印刷するという約束で待機してもらっていた顧問の先生には本当に申し訳がありません。部員の皆さんにも多くの作業を手伝ってもらいました。文化祭直前の忙しい中お手数をおかけしたなと思っています。ちなみに、ここで2割ほど責任転嫁をしておくと、木曜の未明になって部誌の原稿を完成させた某部員にはちょっとだけキレております。
こちらの部誌は、私達物理部のウェブサイトにて電子版を公開する予定ですので、ぜひそちらも合わせてご覧いただければと思います。裏表紙にウェブサイトのQRコードを記載してありますのでご利用ください。2018年の部誌ではPDFを直接ウェブに記載し、2019年の部誌ではHTMLを直接記述してウェブ記事のような形にしてきたPositron電子版ですが、今年はVivlioStyleの昨日を用いてついにキ○ドルのような手軽に読める電子書籍が実現できるかもしれません。(実際にどうなるかはこの文章の執筆時点ではわかりませんが・・・)
それでは最後に、この冊子を手にとってくださった皆さんに改めてお礼を申し上げます。そして、この後も引き続き「物理部展丼2021」と「第42回打越祭」をお楽しみください！</description></item><item><title>部内で鯖を飼育する</title><link>https://asanobuturi.github.io/document/2022/server/</link><pubDate>Thu, 01 Jan 1970 00:00:11 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/server/</guid><description>鯖（生き物ではない） 鯖 サーバー(server)コンピューターのこと。コンピューター・ネットワーク上でクライアントから受けたリクエストに対し、様々なサービスを提供するシステム。 &amp;ndash;(株)朝日新聞出版発行「知恵蔵」より
もちろん生き物の鯖ではありません。物理部の劣悪な環境下では魚の鯖はおそらく飼育不可能でしょう。
鯖を飼う理由 物理部ではいままで部員にWindows搭載ノートパソコン等を購入することを部員に推奨してきました。これは物理部の限られた部費で部員全員分のコンピューターを用意するのが困難なためです。実は物理部の部員は100人ほどいます。なお部活出席率は普段から部活にいる20人分のコンピューターを部活動が負担するのは到底不可能です。データをローカルに保存する都合上、毎回の部活で利用するコンピューターが固定されることになります。国税庁が言うにはコンピューターも消耗品、耐用年数は5年とされています。プログラミングや動画編集などを行う都合上ある程度のマシンパワーが必要になってくるため1台当たりの値段はかなり高額になります。 そこで考えたのは「部内にNASを立ててそこにデータを保管する」というものでした。しかし市販のNASを買って設置するだけでは面白みに欠けます。そんなわけで部内にファイルサーバーを建てるという結論に(自分の中で)達しました。
鯖の品種（パーツ）の選定 サーバーたるものやっぱり常時起動は見据えなければなりません。また浅野学園では生徒は学校のネットワークを利用するのを利用することは禁じられているため、部内ネットワークを立てる必要も出てきました。
CPU マザーボード メモリー SSD グラフィックカード 電源 ケース オペレーティングシステム Wi-Fiルーター それぞれ選定品とその理由を説明できればと思います。またCPU～グラフィックボードは実店舗で購入できるかどうかも判断材料に含まれます。
CPU 今回はIntel Corei3 10105を選択しました。理由は簡単。現行のCoreシリーズで一番省電力だから。サーバーなのでやっぱり電力は気になります。市販のNASではCeleronなどが一般的ですが、将来的にサーバーからデスクトップコンピューターに生まれ変わることも見据えて Core i3を選択しました。 マザーボード ツクモでメモリースロットが4本で一番安かったASRockのH570M Pro4を選択しました。無駄に光ります メモリー メモリーはファイルサーバーで割とこだわるべき場所な気はします。無難に8GB2枚組です。 SSD ファイルサーバーでかなり重要な場所です。これを適当に決めてしまうと故障によってファイルの消失もあり得ます。今回はシステムドライブとデータドライブを分けることにしました。システムドライブはADATAのSATA120GB、データドライブは信頼性と速度を重視しKIOXIAのM.2 1TBモデルを選択しました。 グラフィックカード 所詮ファイルサーバーなので高性能なものは必要ありません。当初はCPUは内蔵グラフィックなしの下位モデルを選択し、日本最安グラフィックカードのGT710を使用しようかと思いましたがツクモに行ったところCPUの価格差があまりなかったので内臓グラフィック搭載のCPUを選びました。強いて言うならIntel UHDグラフィック630でしょうか。 電源 これはサーバーで一番おろそかにしてはいけないものじゃないでしょうか。激安の電源ユニットを利用して発火したら洒落になりません。比較的安め、ある程度の信頼はできる玄人志向の450W電源を選びました。 ケース 別にケースは性能に直結しないのでどんなものを選んでもいいのですが、物理部は収納スペースの都合上スチールラックの上に設置することになったので横置きケースを選ばざるを得ませんでした。これで地震が来ても大丈夫(なはず)。 オペレーティングシステム ファイルサーバーとして運用する都合上管理は簡単なほうがいいに決まってます。そのほうが引き継ぎも楽です。詳細は後ほど。 Wi-Fiルーター サーバー設置場所と物理部の普段の活動場所との間には鉄製の扉が2枚あります。そのためアンテナが本体から飛び出しているもの且つWi-Fi6に対応していて、ちょうど購入時にAmazonセールで安かったTPLINK AX4800を購入しました。 鯖のOS オペレーティングシステム、これはかなり迷いました。ubuntuを利用してもよかったのですが、後輩への引き継ぎが困難を極めると予想したため、データ保管サーバー用のOSとしては定番なOpenmediavaultで環境を構築しました。このOSはWeb上で簡単に操作できるのが特徴です。やっぱり操作しやすいのはいいですね。
トラブル OpenMediaVaultをインストールした後にトラブルが発生しました。それは「OpenMediaVaultがIntel I219-Vを認識してくれない」というものでした。Intel I219-VはマザーボードのRJ45(=LANコネクタ)の端子です。調べてみるとOpenMediaVaultを導入する前にUbuntuをインストールし、I219-Vのドライバーを導入しないといけないらしい。いまさら再インストールするのは時間がかがりすぎると感じたので、SSDのみI219-Vを搭載していないPCで起動させ、そこで初期設定のみ進めることにしました。インターネットに繋げられないのですばらしいWeb操作も一切できません。ずっと黒い画面とにらめっこ。精神的にもつらい。
ファイル構成 前述の通りこのサーバーにはデータドライブとして1TBのSSDがあります。そこで今回は以下のように割り振るようにしました。
KIOXIA 1TB SSD ├ goole drive backup -250GB └ data -750GB google drive backupは物理部の共有ドライブの内容をクローンする予定でしたが、時間がないので後輩に頑張ってもらいます。 割り当てさえ決まったらあとはSMBを有効にしてPCからログインするだけです。</description></item><item><title>自作OSで文字列をPC98に表示する</title><link>https://asanobuturi.github.io/document/2022/pc98apcos/</link><pubDate>Thu, 01 Jan 1970 00:00:10 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/pc98apcos/</guid><description>はじめに 二度目の登場の高2のN.Kです。展示用に作ったものの簡単な解説をしようと思います。
実際の展示 まず文化祭で展示する物を紹介しようと思います。
画像の通りPC98でTHANK YOU FOR COMING TO APCと表示させています。
基本的なプログラムの仕組み ざっくり言うとメモリーの中のテキストVRAMに割り当てられている領域にASCII文字コードを書き込んで文字を表示しています。
一定の周期でコンピュータがテキストVRAMの内容を読み込んでモニターへ送るようになっているので、テキストVRAMに文字を書き込むと書き込んだ番地に応じた画面上の位置に文字が表示されます。
実際のコード 今回はアセンブリ言語というプログラミング言語を使用します。
https://github.com/asanobuturi/PC98APCOS で全体のコードを公開しています。
はじめはフロッピーディスクの情報を指定します。
1行目のJMP entryで文字を書くプログラムの場所を示していますJMP命令はC言語でいうところのgoto文と同じです。
2行目はNOP命令でCPUに何もしないで一命令分の実行時間を消費するものだそうです。なぜこれが必要なのかはよくわかりませんがこれが一般的だそうです。
3行目はブートセクタの名前を8byteで指定しています。ブートセクタとは起動に必要なプログラムや情報を記録したものです。
4行目は1セクタの大きさを指定しています。セクタとは円盤型の記憶媒体の最小の記録単位でフロッピーの場合は512byteなので512を指定します。
5行目はクラスタあたりのセクタ数を指定しています。
クラスタとはOSが記録媒体を管理する際の最小単位で2の累乗である必要があり、今回は1クラスタあたり1セクタとしています。
6行目は予約領域のセクタ数を指定しています。
予約領域とはPCの起動に必要なプログラムのことですなわちこのプログラム自身です。ディスクのはじめにこれがあるので1を指定しています。
7行目はFATの個数で2を指定するのが一般的だそうです。
8行目はルートディレクトリでのファイルの情報が格納されているディレクトリエントリの数をいれています。
9行目はディスクのセクタ数です。フロッピーディスクは2880セクタです。
10行目はハードディスクだと0xf8、リムーバブルメディア(電源が入っている状態でも取り付けや取り外しができるるもの ex:USBメモリ,フロッピー)だと0xf0を指定します。
11行目は一個のFAT(ファイルやディレクトリについての情報を記録する特殊なシステム領域)あたりのセクタ数を指定しています。
12行目はトラックという単位が何セクタで構成されているかを指定しています。普通のフロッピーでは18セクタです。
13行目は磁気ヘッドの数を指定します。
表と裏があるので2です。
14行目はこのボリュームの手前に存在するセクタ数で、パーティションを使っていないので0を指定しています。
15行目はドライブの総セクタ数が0x10000を超えるときにドライブの総セクタ数を指定します。
今回は超えていないので0を指定しています。
16行目はBIOSで使われるドライブ番号でフロッピーだと0x00を指定します。
17行目はWINDOWSで使う領域で当然WINDOWSを使わないので0です。
18行目は以下三行の設定が存在している場合0x29を指定します。
19行目はボリュームを識別するための番号で8桁の十六進数で指定します。
20行目はディスクの名前を11byteの文字列で指定します。
21行目はフォーマットのタイプを8byteの文字列で指定します。今回はFAT12です。
JMP entry DB 0x90 DB &amp;#34;HELLOAPC&amp;#34; ; ブートセクタの名前 DW 512 ; 1セクタの大きさ DB 1 ; クラスタの大きさ DW 1 ; FATがどこから始まるか DB 2 ; FATの個数 DW 224 ; ルートディレクトリ領域の大きさ DW 2880 ; このドライブの大きさ DB 0xf0 ; メディアのタイプ DW 9 ; FAT領域の長さ DW 18 ; 1トラックにいくつのセクタがあるか DW 2 ; ヘッドの数 DD 0 ; パーティションを使ってないため0 DD 0 ; 総セクタ数&amp;lt;0x10000より0 DB 0x00 ; フロッピーディスクでは0x00 DB 0 ; WindowsNT予約領域 DB 0x29 ; 下の3つの設定が存在することを示す。 DD 0xffffffff ; ボリュームシリアル番号 DB &amp;#34;APC &amp;#34; ; ディスクの名前（11バイト） DB &amp;#34;FAT12 &amp;#34; ; フォーマットの名前（8バイト） 何行目に何をしているかはわかったけどDBやらDDやらDWは何だと思われたかと思います。DBはファイルに1byte書き込むという命令です。DWは2byte、DDは4byteです。</description></item><item><title>自作コンパイラを実装してみた</title><link>https://asanobuturi.github.io/document/2021/compiler/</link><pubDate>Thu, 01 Jan 1970 00:00:10 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/compiler/</guid><description>1.はじめに こんにちは、高二の中野です。今回の部誌では、コンパイラについて紹介してみたいと思います！自分自身昔からコンパイラに対して「難しそう」みたいな偏見を抱えていて全く触れてこなかったのですが、ふとしたきっかけで自作Cコンパイラについて体系的にまとめているサイト(参考文献に載せておきます)を見かけて覗いたところ、「意外といけそう」と思ったので軽く始めてみたらハマってしまったという次第です。ところどころ至らない点があると思うので、もし不明な点や疑問があればこのメールアドレス( s2017197@asano.ed.jp )に連絡してください。
2.対象読者 C++, Pythonなどのメジャー言語で基礎的なコードが書ける人。ある程度人のコードが読める人。今回の部誌は扱う内容がかなり学問的というか高度なので、細かいプログラミング言語の文法などは説明しないのでご了承ください。同様に小学生がこれを読むのもあまりおすすめしません。受験勉強してください。逆にこの条件から外れた方々にとっては割と楽しめる内容かと思います。わからない用語・関数などが出てきたら適宜自分で調べてみてください。コーディングにおいて自分のほしい情報を限られた時間でインターネット等で見つけるのは大事な能力です。ちなみに私はC++のリファレンスを参照する際には cpprefjp(https://cpprefjp.github.io)を主に使っています。
3.コンパイラとはなんぞや ではここから実際にコンパイラとは何かを説明しましょう。
Wikipediaにはこのように書いてあります。
コンパイラ（英: compiler）は、コンピュータ・プログラミング言語の処理系（言語処理系）の一種で、高水準言語によるソースコードから、機械語あるいは元のプログラムよりも低い水準のコードに変換（コンパイル）するプログラムである。
有名な話かもしれませんが、コンピュータは0と1の羅列(2進数)をデータとして扱い、それをもとに計算などを実行しています。要は、コンピュータは0010100110011001010101000などのような我々人間にとって一見摩訶不思議に見える数字の羅列を用いています。一方、我々は普段日本語や英語などの自然言語を用いています。この人間とコンピュータの通訳係となってくれるのがコンパイラです。大半のプログラミング言語は人間にとってある程度の可読性が担保されています。もちろん、我々はコンピュータを利用するためにさっきの0と1の羅列を自分でキーボードで打つわけにはいけませんよね？その、割と人間寄りいわば自然言語寄りのプログラミング言語をコンピュータが理解できるように0と1の羅列に変換するのがまさにコンパイラの仕事なのです。 コンパイラの仕組みを理解することできっとあなたはコンピュータと、より親しくなれるでしょう！
4.コンパイルの手順 前章ではコンパイラの概要について説明しました。ここから詳しい話に移りたいと思います。まず簡潔に言うと、コンパイラは以下の4つのフェーズを踏んで実行されます。
1.字句解析
↓
2.構文解析
↓
3.アセンブリコードの生成
↓
4.生成したアセンブリコードをバイナリに変換する
これだけだと分かりづらいと思うので具体例を出して説明します。今 int main(){return 0;} というC言語のソースコードをコンパイルしたいとします。当然コンパイラへの入力形式は 文字列 です(C++で扱うとしたら const char*やstd::stringのような型を用いるでしょう)。しかしコンパイラからしてみると、文字列の状態だと大変扱いづらいのです。プログラムによってはint main () { return 0; /*hogehoge*/} のような本来コンパイルする際には不要な空白やコメントがついている場合もあります。それを除去してよりソースコードの本質を抽出するような処理が1番目の字句解析です。このプログラムの場合、ソースファイルは [int,main, (, ), {, return, 0, ;, }] という一つずつが意味を持った 字句(トークン) の配列に変換され、コメントや空白なども全て無視されます。こうすることで、2番目以降の処理が格段にやりやすくなるのです。次にこのトークン配列を 構文解析木(AST) という 木構造 に変換します(なぜこのようにする必要があるのかは後ほど説明します)。この工程を文字通り　構文解析と呼びます。そして、その構文解析木を元にアセンブリコードを生成して、そのコードを機械語(バイナリ)に変換(アセンブルといいます)すればコンパイラの仕事は終わりです。字句解析の過程は比較的に簡単なので、ページ数的に ここでは省略したいと思います。では次章からさっそく構文解析から実装していきましょう！ちなみに今回はすべてC++で実装しています。
5.開発環境 今回私はVisual Studioでコーディング&amp;amp;ビルドし、生成したアセンブリコードは WSL(Windows Subsystem Linux) というWindowsマシン上でLinux(Ubuntu)が動く的な仮想環境上で実行ファイルにアセンブルしました。ちなみにビルドする際は x86 ではなく x64 でビルドしてください。 x86 だとなぜか WSL の呼び出しに失敗します。</description></item><item><title>PC98という古いPCで曲をビープ音で演奏してみた</title><link>https://asanobuturi.github.io/document/2022/pc98_beep/</link><pubDate>Thu, 01 Jan 1970 00:00:09 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/pc98_beep/</guid><description>はじめに 皆さんこんにちは高2のN.Kです。今回はPC98で曲を演奏するという内容なのですがこの記事を書こうと思った理由の中に後輩へ技術を継承するということがあります。というのもPC98を扱える部員が私の4個上の代で途絶えており、私がこの企画をやるのに苦労したからです。もしかしたら後輩がPC98を扱うかもしれないのでしっかりと文章で書いておこうと思います。(いつまで部にあるPC98がもつのかわかりませんが&amp;hellip;)
PC98とは 物理部の文化祭に来てくださるのは小学生が多いので一応軽くPC98の説明をしておきます。 PC98とはNECが1982年から2003年まで製造・販売を行っていたパソコンのシリーズである「PC-9800」の略称です。 今回使っていくのは1995年発売のPC9821Xa10という機種で本体標準価格税別268000円だそうです。当時のPCの高価さがうかがえます。
PC98でのプログラミング 今回はC言語というプログラミング言語を、統合開発環境はTurboC++4.0を使っていきます。 統合開発環境とはテキストエディタやプログラミング言語を機械語に変換するコンパイラなどの機能を含むソフトウェア開発のための統合的なプログラミング環境のことでTurboC++は1987年にボーランド社から発売されたTurboCの後継である統合開発環境で今回使うver4.0は1995年に発売されました。
PC98での操作 PC98のOSはMicrosoftが開発したMS-DOSとなっており、基本的にはCUIと呼ばれる文字列でコンピュータに指示を与えてディスプレイに文字を表示して応答するUIとなっています。 基本操作はWindowsのコマンドプロンプトと変わらないのでそこまで難しくないです。 物理部のPC98にはFILMTNというフリーのファイルマネージャが入っているので案外コマンドを入力しなくても何とかなります。
日本語入力 日本語入力にはATOKというIMEを使います。入力中にXFER+CTRLを押すことで日本語入力になります。F7でカタカナなど後の操作は基本的に今と変わりません。
実際にコードを書く IDEを起動してコードを書いていきます。ここから先はソースコードの一部を公開して、解説していこうと思います。
ビープ音の高さは周波数で指定するので周波数と音階を対応させています。 長さはミリ秒で指定するので同様にミリ秒と音符の長さを対応させています。
//音階 const int A = 440; const int AF = 415; const int AS = BF; const int B = 494; const int BF = 466; const int C = 262; const int CS = DF; const int D = 294; const int DF = 277; const int DS = EF; const int E = 330; const int EF = 311; const int F = 349; const int FS = GF; const int G = 392; const int GF = 370; const int GS = AF; //音符 const int eight = sixteen*2; const int four = eight*2; const int one = two*2; const int sixteen = 125; const int two = four*2; その次は音声再生用の関数を作ります。playmsg(音符,歌詞,音階,音程)で歌詞つきで音符を再生します。play()はそれの歌詞なし版です。</description></item><item><title>コイルガン 四年間のすべて</title><link>https://asanobuturi.github.io/document/2021/coilgun/</link><pubDate>Thu, 01 Jan 1970 00:00:09 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/coilgun/</guid><description>お久しぶりです。そうでない方もお久しぶりです。高二になってしまった部長です。前回部誌を寄稿してから早二年、今でもバカの一つ覚えみたいにコイルガンを作り続けているわけですが、その間いろいろありましたね。「いろいろ」の中身はあえて触れませんが。
1.ただのコイルガン？ コイルガン…なんて漠然と言ったところで、人によって色んなやり方があります。電源、昇圧回路、コンデンサ、スイッチング素子、コイルの段数、コイルの巻き。どんな理由で何を選んだか、そこに焦点を当てて解説します。
1-1.電源 コイルガンはEML(Electro Magnetic Launcher)の一種で、その名の通り電気を使って金属製の弾を発射するものです。電気を使うということは当然電源が必要で、その電源をどうするかも人によって様々です。
一番簡単(に思える)のは、コンセントのAC100V電源をブリッジダイオードで整流して、コンデンサで平滑した後にそのままコイルに流す方法でしょうか。ただこれはコンセントからコンデンサの間にトランスを挟まないといけないという欠点があります。(なぜかはググってください) いや、少し言い方が雑でした。実を言うとACアダプタにもトランスは入っていますし、トランスを挟むことそのものが欠点になるわけではないのです。そう、50~60Hz用の大きくて重いトランスを挟むことが欠点なのです。 今のACアダプタはスイッチング回路を使って相当小さく、軽くなっています。半導体技術の賜物ですね。このスイッチング回路を一から自作するのは大変ですし、コイルガンの機能の肝になるわけではないので市販のACアダプタで済ませることにしました。 また電池駆動も考えたのですが、乾電池は一瞬で無くなってランニングコストが相当高く付きそうなのと、eneloopなどの乾電池型の充電池も容量が少ないので交換の手間がありますし、かといってニッケル水素電池やリチウムイオン電池を組み込んで、充電制御回路まで作るのも面倒です。幸い僕が製作で使う物理教室にはあちこちにコンセントがありますし、文化祭の展示の時はコイルガン用に電源タップを用意すればいいですからね。
さてACアダプタと一口に言っても電圧、電流、電源容量と色んな種類のものがあります。 これをおざなりにすると痛い目に遭います。何て言ったって中2の文化祭で充電が異様に遅かったのはそのせいでしたから。 例えば電源容量(平たく言うとW数です)の小さいものを選ぶと、電力量は電圧と電流の積ですから、高電圧を扱うコイルガンでは引き出せる電流量が極端に少なくなってしまいます。5V2AのACアダプタで100Vのコンデンサを充電する、ぐらいなら待ち時間も気にならないぐらいだとは思いますが、今回のコイルガンは400V2720μF(後述)を10秒ぐらいで充電したいので、あんまり電源容量の少ないやつでは困ります。売ってる中で一番大きいやつがいいですね。
電源容量が大きければ何でもいいわけではありません。極端な話0.1V500Aだったりすると困るわけです。例えば半導体の耐電流は電圧に関わらず絶対的な電流で決まります。今回はなるべく大きくして電流を小さくする方針で行きます。仮に電圧が高すぎるなら抵抗で分圧すればいいのに比べて(電流消費が小さい場合に限りますが)、低すぎるから昇圧するのは色々面倒ですし。 結果電圧は15V前後にすることにしました。これは昇圧回路で使うNE555(後述)というICの耐圧が16Vだからです。16VのACアダプタもあるのですが、電源電圧でギリギリを攻めるのはさすがに怖すぎます。
また取り回しも重要です。先述の通り物理教室はあちこちにコンセントがありますが、かといってコンセントから全く動けないのは困ります。ですからできればPC用のACアダプタぐらいの大きさで、ATX電源のような大きいものは使わないことにしました。
この「なるべく電源容量の大きなもの、でもPC用のACアダプタぐらいの大きさで」という条件を元に、秋葉原の秋月電子で探してみたところ、15V 3.34Aがちょうどよさそうですね。何でよりにもよって3.34Aなのかは知りませんが。
(https://akizukidenshi.com/catalog/g/gM-08432/) これで電源については解決です。
1-2.昇圧チョッパ コイルガンの肝となる部分の一つが昇圧チョッパです。「高速充電」や「連射」など、使いやすいコイルガンを作るにはここの改良が不可欠です。
これだけ言っておきながら、昇圧チョッパに関してはほとんど改良点がありません。本当はネットで色々調べたり、どこを改良するか構想も描いていたのですが、何しろ時間がなくて…。基本も大事だということでお許しください。
さて、一番簡単にやろうとするなら使い捨てカメラの(ストロボの)昇圧回路にコンデンサを繋げるのがいいのでしょうか。確かに簡単ではあるのですが、当然欠点も多くあります。
まず一つは性能が低いことです。ストロボの消費電力はコイルガンと比べてかなり少ない(はず)なので、回路もかなり簡素です。これでは充電に相当時間が掛かるでしょう。
二つ目、これが一番大きいのですが、僕にわざわざ写真店に行って「回収した使い捨てカメラ、いくつか頂けませんか」なんて言う度胸がないことです。「コイルガンに…」なんて言ったところで相手にとっては意味不明ですし、そこまでして性能の低いものを集めに行く必要はありません。
また昇圧チョッパ単体で市販品があればいいのですが、コイルガン用なんてものは当然なく、そもそも昇圧チョッパ自体がマイナーなんです。降圧はPCやスマホ用にICもたくさんあるのですが…。 ICレベルなら昇圧チョッパもあるのでしょうが、だからといって「400Vまで耐えられて、数A出せる」ものは調達も難しいでしょう。ここに関しては使い捨てカメラを諦めるなら自作しかありません。
自作するにはまず昇圧チョッパの原理を理解しないといけません。 昇圧チョッパは次のような回路構成になっています。
スイッチON時 まずスイッチQ1がONのとき、電流は赤線の経路で流れます。 このとき、コイルに電流が流れるとエネルギーが次第に蓄えられていきます。電流I[A]が流れるリアクトルL[H]に蓄えられるエネルギーP[J]は次式で示されます。
$$ W = \frac {1}{2} LI^2 $$ スイッチOFF時 ここでスイッチQ1をOFFにしてみましょう。スイッチQ1がOFFのとき、電流は青線の経路で流れます。 このとき、Q1がON状態のうちにインダクタに貯まったエネルギーが矢印の通りにコンデンサに蓄えられます。コンデンサの両端に電流が流れればエネルギーもその分蓄えられ、両端の電圧も上昇していきます。 また出力電圧(=コンデンサの電圧)Voutが入力電圧Vinより大きくなったとしても、ダイオードD1の働きでVout側から電流が流れ出ることはないので、負荷抵抗を繋がない限りコンデンサに蓄えられたエネルギーは保持されます。
こうしてコイルガンに必要な数百V、今回は400Vの電圧が得られるわけです。ちなみに、今回は主に執筆時間の関係で説明が相当雑ですが、数式を交えた詳細な解説はネット上にたくさんあるので、気になった方はぜひ調べてみてください。
「スイッチ」を「切り替える」 さて、問題はこの先にあります。先ほどの解説ではスイッチを「理想的な」、つまり電圧電流の制限もなく、ON時の電気抵抗はゼロで、一瞬でON-OFFの切り替えができて、なおかつ制御が不要なものとして扱っていました。 現実的にそんなものがあるかどうかなど言うまでもないでしょう。ありません。 そこでこの「理想的な」スイッチの代わりに何か使えそうなものを用意しないといけません。
「スイッチ」と漠然というと多くの方はこの「トグルスイッチ」を思い浮かべるでしょう。確かにこれもスイッチの役割を果たせますし、扱う電流が小さければ全く問題はありません。射撃用のトリガーなどはこれを使っていますし。
ただし、昇圧チョッパの「スイッチ」となると話は違います。まずは電圧です。 回路構成からもわかるとおり、このスイッチには出力電圧がそのまま掛かります。今回は400Vですね。一応スイッチそのものの耐圧の条件は満たせるはずですが、問題はそこではありません。
出力電圧がそのまま掛かって、なおかつスイッチON時の電流を見てみると、このとき電源-インダクタ-スイッチで閉回路ができるわけですが、この回路かなり大きな電流が流れます。 具体的には…これはインダクタの定数なども考慮して色々計算してやる必要があるのですが、結局のところACアダプタの最大電流程度になりそうです。勘ですけど。
また、「スイッチ」を「切り替える」速度も問題です。 先ほど「スイッチON時インダクタにエネルギーが貯まり、スイッチOFF時それが放出される」ことを述べましたが、これはすなわち「インダクタにどれほどエネルギーが貯められればいいか」はスイッチがONの時間、すなわちスイッチのON-OFFが切り替わる周期に依存することになります。
「インダクタにどれほどエネルギーが貯められればいいか」というのはインダクタの定格電流のことです。当然ながら定格電流の大きなインダクタは大きく、重くなります。 なるべく回路は小型化したいので、インダクタも例外ではありません。 スイッチング周期を短くしてインダクタを小型化しましょう。
(今後は数値として扱いやすい一秒間の振動数、つまり周波数f[Hz]で解説していきます。周波数fは次式で求められます。)
$$ f[Hz] = \frac {1}{T[s]} $$ さて、スイッチング周期を短く、つまり周波数を高くするにあたって大きな制約が立ちはだかります。それは「スイッチ」です。 具体的に今回はスイッチング周期を10kHz程度にしたいのですが、周期にすると1/10000秒です。こんな早さでトグルスイッチのON-OFFを切り替えられる人はいるのでしょうか。 もし我こそは！という方がいらっしゃいましたらお近くの物理部員までお声かけください。詳しくお話を伺います。</description></item><item><title>n進法のおはなし</title><link>https://asanobuturi.github.io/document/2022/base_n/</link><pubDate>Thu, 01 Jan 1970 00:00:08 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/base_n/</guid><description>初めに この文章を読むにはn進数の基礎知識が必要です。
内容の転載・改変・再配布を禁止します。
内容に関しての質問や、誤字脱字の報告はs2019188@asano.ed.jpまでお願いします。
筆者は淡泊なので文章が味気ないですが、それでもよろしければお楽しみ下さい。
負のn進数 私の知る限り、一般に基数は自然数であるとされています。
しかし基数が自然数でなくても大丈夫です。
というわけで今回は-2進数を紹介します。
四則演算 四則演算は、繰り上がりなどの演算法則が分かればOKです。
足し算&amp;hellip;1+1=110で、1つ上の位に1があったら打ち消す。 $$ (-2)^n+(-2)^n=(-2)^{n+1}*(-1)=(-2)^{n+1}(-2+1)=(-2)^{n+2}+(-2)^{n+1} $$ 引き算&amp;hellip;0-1=11が分かれば他の計算もできると思います。 $$ 0-(-2)^{n}=(-2)^{n}(-2+1)=(-2)^{n+1}+(-2)^{n} $$ -1をかけて足す、というのも可能です。(面倒ですが)
掛け算&amp;hellip; 途中まで2進数と同じように計算して、足すときだけ上記の手法を使う。
割り算&amp;hellip;
まだ理解できてないので、説明できません。
宿題ということにします。
2進数を-2進数にする けっこう面白そうですよね。
10進数に直してから-2進数にするのはつまらないので、直に変換します。
人によって考え方が違うと思いますが、私のやり方を書きます。
2進数のある桁は、-2進数に変換出来ます。
偶数乗の桁はそのままです。
奇数乗はその位と1つ上の位に足せばいいです。(上の引き算と同じ)
あとは足し算するだけです。
これならプログラムにもできますね。
(プログラムではこんな無駄で複雑なことしませんが)
10進数を変換する 生きていると、10進数を他の記数法にすることがよくあります。
整数なら簡単ですが、小数だと同様には計算できません。
そんな時はこんな風に計算をします。
例:1.2を2進数にする $$ (\frac{1}{4})^{n}の位の数をa_nとする(n:非負整数,0 \leq a_n &amp;lt;4,a_n \in Z)$$ $$ 1.2=a_0+a_1*(\frac{1}{4})^{1}+a_2*(\frac{1}{4})^{2}&amp;hellip; $$ $$ a_1以降の和は0以上1未満だからa_0=1$$ $$ 両辺からa_0=1を引き、2をかけて$$ $$ 0.4=a_1+a_2*(\frac{1}{4})^{1}&amp;hellip;$$ $$ a_1=0$$ $$ &amp;hellip;&amp;hellip; $$ 循環するため、1.2=1.\dot001\dot1 $$
で、ここまでならある程度数学を学んでいる方は知ってると思うんですけど-2進数で同じことをやろうとすると出来ないんですね。
例:0.8を-2進数にする $$ (\frac{1}{-2})^{n}の位の数をa_nとする(n:非負整数,0 \leq a_n &amp;lt;|-2|,a_n \in Z)$$ $$ 0.</description></item><item><title>理想と現実の界面で</title><link>https://asanobuturi.github.io/document/2021/essay/</link><pubDate>Thu, 01 Jan 1970 00:00:08 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/essay/</guid><description>1.はじめに こんにちは。物理部ポジトロンを手に取っていただきありがとうございます。展示は楽しめていただけましたか。今年の文化祭は、限定的ではありますが、浅野生とその家族、以外の来場者もいらっしゃるということと、自分がこの部活に携わる最後の文化祭になるということが重なり、僕としても、「文化祭」に対する意欲というのが生まれたので、部誌という形でも関わらせていただくこととなりました。技術的に興味深いことは他の部員がたくさん書いてくれているはずなので、僕はあえてそういった専門的、ではないことについて書きたいと思います。
僕は中1から物理部に入っておりますが、気が付いてみたらもう高2。これといった大会やら、コンテストやらに全力で取り組んだり、さらなる技術的な高みを目指して毎日努力奮闘する、といったことはなく、作りたいものが見つかったら、活動日にノートパソコンを持っていって地下一階の物理教室でのほほんと作業する、といった感じで、良い意味で緊張感のない活動をしてきました。ですが、決して社交的とは言えない僕でも、それなりには部活のことに参加したり、わずかな貢献もできたのかなぁ、と思うばかりです(できてなかったら悲しいですねw)。
小さくてゆるいコミュニティを形成しながら、しばしば友人や先輩後輩とのおしゃべりを交えつつ作業に打ち込める環境はとても快適な場所でございました。そういった居心地の良い場所だったからこそ、あっという間だったのかもしれませんね。しかしまあ、時間がたつのは速くても、ここで出会ったものはとてつもなく大きいものです。ここでは、そんなこんなを少しばかり話したいと思います。
2.理想 自作ゲームのあるべき姿 今年の物理部は、電子工作班とPC班で同じ教室を使って展示するというスタイルをとっており、例年の文化祭のような電工とPCを分けた展示とはひと味違った雰囲気が出ていることでしょう。そのなかで今年もPC班員たちが作ったゲームが変わらず人気なのでしょうか。
僕は今年、ゲームを自作しようとは全く思いませんでした。中3の文化祭以来、僕はゲームを自作するのを断念したからです。というのも、中2から中3にかけて、僕は寿司打（※フリーのタイピングゲーム）みたいなゲームを作りたいということで、タイピングゲームを自作したのですが、夏休みの中盤くらいになってから、タイピングゲームは子ども受けがよくないゲームだろうから、子どもたちが遊べるようなゲームをひとつ作るよう言われ、僕はとても困惑したことがあるのです。結局、それから文化祭までの短い時間になんとかもう1つのゲームを間に合わせたのですが、それ以来、遊んでもらうために、「文化祭」のためにゲームを自作する、ということに対していろいろ考え、疑問を抱き始めました。というのもどうも僕は「文化祭」のために、子どもたちに人気ではあるけれど、自分では作りたいとも思わないゲームを作らされるのを苦痛に感じ、どうしてもそれを強制されることに耐えられなかったようです。
中1中2がプログラミングに慣れる練習として、とりあえずゲームを自作するという考えに関しては、まだ的を射ていると思います。僕も今振り返ってみると、実際にある程度の量のコードを書いて一つのゲームを完成させたあとには、なんとなくプログラムの全体を見渡す能力が少しついたのかなぁ、と思わなくもないです。しかし、中3、高1、高2にまでなって作りたくもないゲームを作らされる、作らなければいけないような雰囲気になるのはもったいない気がするんですよね。パソコンでできる技術的な物と言えば自作ゲームのプログラムだけでなく、様々な種類があるにもかかわらず。例えば、何か特定のことをしてくれるプログラムの制作や、人工知能の開発、広く言えば動画編集や競技プログラミングなども含まれているでしょう。ひとそれぞれ興味のあることはもちろん違うでしょうし、彼らの興味に割かれるべき時間が、「文化祭」のためのゲーム制作によって搾取されていくなんてことがあっていいのだろうかと、疑わざるを得ません。「そもそもゲームを作るのが好きだ」という人にとっては何ともないでしょうが、それ以外の人にとっては厄介極まりないことでしょう。その時以降、「文化祭」のために強制的にゲームを自作させられるというようなことがなかったので良かったのですが、今後とも、このような犠牲者が出ないように気を付けていただきたいものですね。
文句ばっかり書き連ねていたら読み心地もよろしくないと思いますし、決して改善に向かわないので、とりあえずほどほどにしておきますね。
フーリエ級数展開によるお絵描き 僕が今年作ったのは、もちろん子どもたちに遊ばせることのできるようなゲームではなく、ただ、時間についての関数を実フーリエ級数展開して三角関数(角度についての関数)の式に変換した後に、円を回転させて図形を描くというプログラムです。
ふーりえAPC フーリエ級数展開を使って図形を描画するという試みは、世界中でたくさんの人が行ってきているので、インターネットで調べていただければ概要はわかると思います。僕は、おととしに、当時高校2年生だった先輩が作ったプログラムをみせてもらってこれを初めて知りました。円をくるくるまわしながら描いていくのこぎり波だったり矩形波を、「なんだかよくわからないけどすごいな」という感じで見ていました。その光景はとても複雑に見えましたが、実際は、大きさの異なる円を回すことで図形を描くという、意外と単純(?)な方法でありました。その後先輩からサインやらコサインやら(←全然わからなくてほとんど覚えていない…)説明を賜りましたが、中3だった僕は残念ながら理解するには到底及びませんでした。
しかしながら、そこで見たものが頭の中に焼き付いていたのか、高校二年生になって数学B(文系)の授業で三角関数を復習したときに、そういえば2年前にフーリエなんちゃらしてた先輩いたなぁ、となり、高校二年生になった僕ならできるかもしれないと思いながら、制作に取り掛かりました。覚えていたことは、その先輩がフーリエうんぬんでおえかきをしていたということぐらいだったので、そもそもの数式やそれらの導き方をネットで調べるところから始めなければなりませんでしたが、周りの人からの協力を受けて、楽しみながら完成させることができました。これはsvg形式の画像ファイルを読み込ませると、その画像を一筆書きしてくれるので、完成した後は、直ちに好きな画像を突っ込み、喜びにふけっていました。
こういう風に、僕の「作りたい！」という単なる欲求を満たすために作ったものを「作品」として展示しているだけに過ぎないのですが、そうはいってもやはり、僕にそのように、作りたいという「情熱」を思い起こさせるだけの魅力が存在するわけで、その情熱を少しでも感じ取っていただきたいという所存でございます。2年も前に見たのが記憶の片隅に残っていたというのは、僕がその妙な動きに多少なりとも惹かれていたからでしょう。好奇心とはすこし違うようなこの妙な心の揺れ動き、皆さんは感じたことはないでしょうか。
大きな「情熱」との出会い 中学1年生の時に物理教室で、僕は、今でも自分に絶えることなく「情熱」を与え続けるモノと偶然にも出会いました。そしてそのモノというのがなんと、ソビエト社会主義共和国連邦国歌なのです。皆さんがこの告白についてどう思おうとも、構いません。しかし、僕のソ連国歌に対する「情熱」は疑いようのない事実です。僕は非常に困ったことに、いわゆるJ-POPでも洋楽でもなく、ソ連国歌を好きになってしまったのです(最近はみんなが聴くようなものも少しは聴くようになりましたが)。僕はこの歌を初めて聴いたとき、もちろん流れてくる歌詞の意味は全く知りませんでしたが、「感銘」という言葉で表しきれないようなナニカが僕を満たしていくような、そんな不思議な衝動を感じました。
それからというもの僕は、ソ連国歌の歌詞についていろいろ調べたり、ソ連に関連した情報を集めたりするにつれて、近現代の歴史的な流れや思想や知識を得ていったりと、ソ連の国歌が原動力になって、いろいろな物に首を突っ込んでいくことになりました。そしてソ連国歌とソ連の関係を知れば知るほど、賛成できない点も複数ある中、ソ連に対する魅力はそれらをはるかに上回っていきました。今持っている音楽に対する興味も、この国歌がなければ持たなかったかもしれません。どうして僕がこんなにソ連に魅了されているのか、その謎は僕でさえもいまだ探求中、整理中でありますが、なんとかしてソビエト連邦を僕の生活におけるコンテクストに位置づけ、ある程度言語化したいという個人的な思いで、「情熱」の一例として紹介させていただきます。
さて、当初僕はというと、ソビエト連邦に一種の理想像、理想の共同体像を重ね掛けていたことがあり、今となっては少々過激だったかなぁと思い返すのですが、このことがなければそんなにソ連のことを好きになっていなかったと思われます。ソビエト連邦は、すごくざっくりいうと、指導者層の荒廃、政治的、外交的な欠陥などにより、1991年12月25日の真夜中にとうとうソ連の最初で最後の大統領ゴルバチョフが自身の大統領辞任を表明し、解体するという形で、第一次世界大戦期のロシア革命やそれに続く内戦を経て1922年に高い理想を掲げて成立したその国は、その69年にもわたる激動の歴史に終止符を打ちました。僕は当時生まれておりませんが、とても衝撃的なことだっただろうことは容易に想像できます。
ここで僕が注目したいのは、その時に立ち会わせていた当時のソ連の国民です。人々がソビエト連邦という国に対する帰属意識を強く持っていたかどうかは定かではないですが、生まれ育った祖国が、かつては世界を席巻した超大国から徐々に衰退の一途をたどっていき、しまいには国が瓦解していくのを目の当たりにしたソビエトの国民はいったい何を思ったのでしょうか。当時の写真や動画に映る人々は祖国の衰退に対して逆らおうと奮闘していたけれど、無力にもそれは成功しませんでした。彼らがソ連崩壊の時に受けたショックというのはいったいどれほどのものだったのでしょうか。壮大な曲調でもあるけれど、どこか寂しげな感じもするその国歌によって、僕はこういった無力感に思いを馳せ、同情せざるを得ませんでした。そして、とあることで思い悩み、よりどころを求めた僕は、最近かつ最大の「共同体」の崩壊を自分のにおけるものと重ね、親近感を伴って想起したのでした。なんだか、歴史が、僕なんかよりもはるかに大きいショックを受けただろうソビエト連邦の国民一人一人が、僕の側に立って、応援し、励ましてくれているようなそのような妄念を感じてしまうのです。
ソ連国旗降納 かつてのソビエト連邦が、望ましい共同体であったかどうかは疑わしいですが、それでも、その応援してくれているような感覚は僕の辛い気持ちをいつも癒してくれました。それ以来ソ連国歌は基本の原動力として、僕に大きな影響を与えています。しかし、自分の考えがコミュニズムというよりむしろコミュニタリアニズムのほうに近そうですし、決してコミュニズムを称賛しているわけではないことは了承していただきたいです。
個々の「情熱」を咀嚼する 物理部にいると、様々な人からこういった「情熱」を感じ取ることができます(もちろんですが、ソ連国歌ではございません)。部員のそれぞれが、僕に、彼らの趣味だったり、興味のある分野の話や、取り組んでいることについての話をしてくれるのですが、彼らが話しているときのその表情や口調、それから身振り手振りなどから、意図せずとも「情熱」がにじみ出てくるんですよね。そして、その「情熱」の形というのは十人十色で、それぞれの人の持っている性格、視点、価値観、奥深さ等等を本当によく表現していることでしょう。また、同じ人によっても、時と場合によってその「情熱」がポジティブになったりネガティブになったりすることもありますし、そういう点でも、バラエティーに富んでいるといえるでしょう。自分にとってそれらは未知なものばかりであるので、それらを見たり、触ったり、聴いたりしてようやくそのわずかを味わうに至ります。ですが、そのわずかな経験を通して、「その人」の人となりをより深く知ることになるでしょうし、あるいは、それによって自分が新しく触発されるかもしれません。他人の「情熱」や、その「情熱」から経験した事柄のような、未知との遭遇の可能性にありふれている場というのが、この物理部であり、もっと広く言えばこの浅野の文化祭なんじゃないかなと個人的には思っております。
物理部風景 こんなにも時間のかかる「作品」、しかも、作らなくても生活に支障をきたさないだろう「作品」を莫大な労力をかけてわざわざ作り上げるというある種の狂気を持つためには、間違いなく、とてつもなく大きい原動力が必要でしょう。そして、その原動力がどこから来ているのか、僕たちは、それらの「作品」の制作者でありますから、もちろんその「作品」に対する説明や思い入れを、展示に来てもらった皆さんに紹介すると思います。が、その説明を受けただけで終わらせてほしくないのです。なぜかというと、僕たちの、「作品」に対する説明というのはあくまでも僕たち自身の一元的な見方による説明でしかないからです。その説明を受けるだけでは、必然的にその「作品」のもつ可能性は限定されてしまうでしょう。僕ら作品制作者の「情熱」と、「鑑賞者」の感じたものの交わる点、その二つを折衷したところにこそ、無限の可能性が秘められているのではないでしょうか。作る側→見る側という一方的な主体客体の関係を超えて、「鑑賞者」自らが主体意識を持って「作品」と触れ合い、その界面で二つが融合することによって、唯一無二性が生じるのではないでしょうか。そしてそれは文字通りかけがえのないものとなるのではないでしょうか。ぜひとも、この文化祭で何かしらそういうものを得てもらえたらなあと願うばかりです。
3.現実 僕はいまこうやって自分の文化祭の理想像を語らせてもらっているわけなんですけども、なかなか簡単にそういう形にできるわけでもありません。すなわち、自由に、自分の興味のあることをして、事が上手く運ぶわけではないということです。その大きな理由の一つは、文化祭での集客効果という観点から、そちらへ方向転換しづらいということにあります。やはり、文化祭において、部員たちの自作ゲームは子どもたちにとても人気で、PC班の集客に大きな貢献をしてきているのはこれまでの4年間にこの目で見てきました。かつて、ライフゲームを展示していたり、(今年もだと思いますが、)壁新聞も一応展示していたりするのですが、自作ゲームを展示している机のほうより人が集中するということなどほとんどなく、もしもゲームの展示がなくなったらPC班の展示はおそらく閑静とした場になってしまうことでしょう。たとえその物寂しさに耐えられたとしても、やがてお金の面で、持ちこたえられなくなるはずです。
物理部は他の部活と同様に、部費という形で学校から援助を受けて成り立っており、あくまで浅野の経済力ありきでの物理部なのです。そしてその部費は、学校に対する貢献や、部活の実績等の要素で上下する可能性が高いのです(実際に部費を大幅に減らされたことはないので完全なる真実とは言い難いです)。部員からの部費を一切徴収していない上、部員数が多く、このお金が少ないと、パソコンが足りなくなったり、電工の備品を購入できなかったり、いろいろと不自由が生まれてしまいます。ゆえに、文化祭で、AsanoTheBestなるものでなるべく上位に入り学校への貢献を可視化し、なるべく多くの部費をいただかないと物理部そのものが崩壊しかねません。ですが、自作ゲームの力を借りずに文化祭での人気を保ち続けるのは考えづらいですし、部費が少ない状態で部活動を続けていくということも困難でしょう。すなわち、この成果主義的なシステムから逃れる方法は今の状態では到底考えられないのが現実だということです。
ここまで言っておいて何も手だてがないのか、とお思いになるかもしれませんが、まあ、実際現時点で生徒にできることはほとんどないでしょう。このような場で、あまり理想をかましすぎても結局空回りして終わりという、歴史の二の舞三の舞を演じてまうだけなので、ここはある程度譲歩するのが好手と言えるでしょう。しかし、完全に理想を諦めてはいけません。理想と現実の狭間で、理想を捨てずに、現実に抗い続け、止揚した先にある自由の可能性を信じて奮闘するのです。理想から出発した「情熱」を現実とうまく融け合わせ、このシステムの中で運用可能な形にしていくことこそが、最善の解決方法ではないでしょうか。
4.まとめ 時と場合によって、自身の心を揺さぶったものが受け入れられないことがあります。例えば、僕が先ほど例に挙げた「情熱」のことを他人に話したとき、はねつけられるということもまあ何回かありました。やはり現実は、自己の理解をすり抜け、自己の思い通りにならず、無限に連鎖する否定性を持っていると僕は考えます。ゆえに、「現実」というのは往々にして、「理想」そして「情熱」をも否定してくるものです。そこで僕たちはこのアンチテーゼとしての「現実」に屈するべきではないでしょう。自身のもつ「情熱」を、そしてそれが存在するという揺るぎない事実を強く根拠にもって、新たな「総合」を生み出していくべきではないでしょうか。おそらくその作業には少なからぬ苦痛や困難が立ちはだかっていると思います。ただ、その先には、自身と他人が融合した、ユニークなものが待っているはずです。ぜひそれを求めていただきたいですし、また、自分もそれを探求していきたいと思っております。きっと、歴史上で同じように奮闘してきた人々も寄り添ってくれていることでしょう。
5.おわりに＋スペシャルサンクス 最後まで読んでいただき本当にありがとうございます。内容のほうはいかがでしたか。 物理部のことに多少触れながら、僕の個人的な考えをエッセイ風に書くのは僕にとってあまりにも難しすぎて、これを書きながら何度も、無謀な挑戦をしたもんだなぁ、と思いました。それぞれで、言いたいことが似通っている部分もあるはずなのですが、僕が思うに、なんだか趣旨が若干曖昧で、一貫性のない文章になってしまいました。ともあれ、物理部の文化祭展示に来ていただいて、かしこくもこの部誌をとっていただいた方々に、これを読んで何かご自身の中で少しでも変わったことがあれば、僕は非常に嬉しい限りです。
ちなみにこの部誌は「自分自身」を一番の対象読者として想定しながら書きました。上にも少々書きましたが、僕のソ連に対するこの「情熱」を渾沌としたものから少しでも秩序づけたくて書いたというのが大きいです。なので、内容が個人的すぎたり、わかりにくかったり(わざと濁している箇所もございますが)、論理的根拠に欠ける点があったと思いますがお許しください。
最後に、多くの時間を一緒に過ごした物理部員のみなさん、本当にありがとうございました。特に、同学年の方々には、特別に感謝し申し上げます。そして、これからもぜひよろしくお願いします。
6.参考文献 Wikipedia-ソ連崩壊 https://ja.wikipedia.org/wiki/ソビエト連邦の崩壊　10月2日アクセス Wikipedia-エマニュエル・レヴィナス　https://ja.wikipedia.org/wiki/エマニュエル・レヴィナス　10月6日アクセス ソ連国旗降納の画像元　https://www.rferl.org/a/1830507.html　10月6日アクセス</description></item><item><title>ヴィトゲンシュタインのカブト虫</title><link>https://asanobuturi.github.io/document/2022/wittgenstein/</link><pubDate>Thu, 01 Jan 1970 00:00:07 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/wittgenstein/</guid><description>「シュレディンガーの猫」を考える 「シュレディンガーの猫」は有名だろう。（細かい説明は割愛するが）かの有名な物理学者シュレディンガーが
猫と任意の放射性物質を箱に密閉する。 放射性物質が崩壊する確率を一時間あたり50%とする。 崩壊した原子が出す放射線を検知すると毒ガスが放出される。
といった条件下で、観測者が箱の中身を確認するまで「猫が生きている確率」と「猫が死んでいる確率」がそれぞれ50%ずつである、 つまり猫は「生きているし死んでいる」という、今までのマクロな世界における解釈と矛盾した奇妙な状態におかれることになるとした。 彼はこの思考実験をもってミクロの世界における確率の解釈に対して問題提起をしたのだ。
なぜ「シュレディンガーの猫」がここまで有名になったのだろうか。物理（量子力学）と関係ない文脈においても、「奇妙な思考実験」や「結果として導かれるパラドックス」 の代名詞のようにこの名前はしばしば登場する。
これはおそらく「＜人名＞の＜一般名詞＞」という言葉の組み合わせの覚えやすさ、そして「シュレディンガー」「猫」という言葉を組み合わせた時の 語呂の良さに起因するのではないか。今回はもう一つ、この人名/一般名詞の思考実験を紹介しよう。「ヴィトゲンシュタインのカブト虫」だ。
ヴィトゲンシュタイン？ ゆっくり解説レベルの雑な導入ではあるが、まずは今回触れる「ヴィトゲンシュタインのカブト虫」の前提知識から紹介していこう。 ルートヴィヒ・ヴィトゲンシュタインはオーストリア出身の哲学者だ。第一次世界大戦の直後に出版した『論理哲学論考』、 そして遺稿をもとに出版された『哲学探求』で有名で、特に『論考』は文庫本にもなっているほか、
語りえぬことについて、人は沈黙せねばならない。
という一節においてよく知られている。 （そして非常に難解なことも）
では『探求』はどうか？
『探求』は一言で言うなら自己批判だ。『論考』で示された
言語に含まれる言葉一つ一つはそれそのものを表す像（実体）と対応していて、全ての言葉には決まった意味がある。目の前のものを指さして、それに対応する名前を呼ぶのに近い。
といった、ヴィトゲンシュタイン以前の哲学者と同じ潮流にある古典的な言語観に代わる新たな言語観の提示など、後期ヴィトゲンシュタインの思考を辿る上で欠かせない著作だが、 こちらは『論考』の影に隠れあまり語られることはない。
例えばある人の思い出を記録したアルバムのように、通し番号が付され独立した節（アルバムにおける写真）を最小単位として、 あるものは独立して、またあるものは他の節と共に一つの記述に対する一連の考察を構成する「アルバム形式」や ダッシュ（――）を挟み一方では現在（執筆時）のヴィトゲンシュタインが、 もう一方では『論考』以前の言語観をもつある哲学者（過去の彼を念頭に）が語る「疑似対話」などの独特な論述や分量の多さ、 そしてそもそも文庫本になっていないなど読破する上でハードルが高いのが原因だろうか。
今回は、『哲学探究』でヴィトゲンシュタインが示した考え方に少しでも触れてもらうため、彼が無意識下に想定しているであろう前提なども明らかにしながら、 『探求』で行われた「カブト虫」に関する思考実験をなるべくわかりやすい形で「追試」してみよう。
追試 「カブト虫」の思考実験は§243から行われる私的言語、とりわけ「痛み」に代表される感覚語についての哲学的考察の一環だ。まずは「カブト虫」の思考実験の前提知識を以下に示す。
ヴィトゲンシュタインは先に触れた『論考』的言語解釈を疑問視している。（「対称と名」モデル） 代わりに、言葉の意味は実際に「言語ゲーム（独：Sprachspiel）」でどう扱われているかで解釈すべきと考えている。 ニュアンスは「ことば遊び」が近い。言葉を用いたやり取りなどを「ゲーム」にたとえ、言葉の意味をゲームにおける機能に注目してとらえる。
この「論考」的な「対象と名」モデルを前提にして以下の思考実験を行うとわかりやすいはずだ。
あるグループの人たちがそれぞれ箱を持っていて、その中に「カブト虫」と呼ばれる何かが入っている。 他の人が持つ箱の中身は見えない。 「カブト虫」が何を表すかは自分の「カブト虫」を見ることによってわかる。
という条件で、「カブト虫」という言葉と「カブト虫そのもの」の関係について考えてみよう。
お互いの箱の中身が見えるなら、「カブト虫」が何を指すかは明確だ。
しかしここでは他人の箱の中身が見えない。もしそうであれば、箱の中身が何であっても「カブト虫」という名が指す「何か」は 実は何であってもよいのではないか。自分にとって、他人の箱の中にある「カブト虫」はおおよそカブト虫とは呼べないような代物であっても、 はたまた常に変化し続けるような何かであっても、 本人がそれを「カブト虫」と呼んでいるなら「カブト虫」という言葉を用いる言語ゲームにおいて 何か齟齬が生じるわけでもないし、そもそもそれを判別する手立てもない。 ヴィトゲンシュタインはそう考えたのだ。
それでもこの人々の『カブト虫』という言葉が使用されているとしたら？（§293）
その場合、箱の中にある「カブト虫と呼ばれるもの」 （注：カブト虫という名前のことではない。本人は「カブト虫」と呼ぶが他の人が見たら「クワガタ」と呼ぶようなものでもあってよい、ということ。） 自体はこの言語ゲームにおいて「あるもの」としてすら意味を成さず、そもそも言語ゲームに属していないといえるのだ。 そもそも、これは箱の中に何も入っていなくとも成立するのだから。
ヴィトゲンシュタインはこの思考実験を通して 「痛み」に限らず感覚を表す文法を「対象と名」――ここでは痛みと痛みそのもの（痛みの像？）――というモデルに即して解釈しても、 上記の理由でこのとき想定した「痛みそのもの」は意味を成さず、これを想像することはナンセンスであることを示している。 （そして我々がそう解釈したくなる誘惑に駆られることも）
つまり痛みの対象、痛みそのものが「存在する」か「存在しない」かではなく、それを想定すること自体がナンセンスということだ。</description></item><item><title>芸術の重要性について</title><link>https://asanobuturi.github.io/document/2021/art/</link><pubDate>Thu, 01 Jan 1970 00:00:07 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/art/</guid><description>1.はじめに 皆さんこんにちは、またまた登場の中学3年生のR.K.です。
さて突然ですが、皆さんは音楽、美術、書道といった芸術について興味を持っていますでしょうか？もしかしたら「芸術を学んでも意味がない」「芸術は役に立たない」と考えている方もいらっしゃると思いますが、僕は、そう考えるのは甘いと思っています。
皆さんは芸術というと何を思い浮かべるでしょうか？例えば昔の芸術家の絵画とか、有名音楽家の音楽などといったものを鑑賞したり、絵や彫刻を作らされたり、音楽を演奏したりすることを思い浮かべる人もいらっしゃると思います。しかし芸術とはそんなに幅の狭いものではありません。古い芸術を見ながら新しい芸術を切り拓いていく、それが芸術だと僕は考えます。具体的なことについてはこの章以降で説明しますが、学校で習うような国語、数学、社会、理科などの教科同様、芸術もまたこの世界には欠かせません。
物理部でもプログラミングや電子工作にとどまらず、3DCG制作や映像編集、作曲といったこともしている部員もいたり、そうでなくてもそれらを趣味にしている部員もたくさんいます。僕がこの記事を書こうと思った理由は、芸術に未知の可能性を秘めている(？)物理部の部員である僕から芸術の存在意義をまだ見いだされていない方に芸術の重要性を伝えたいと思った他、僕自身に対しても「この記事を書いて改めて芸術と向き合ってみよう」と思ったからです。
もちろん僕は芸術関係の活動がまだまだ他の人に比べては浅いため、芸術の本質からはかけ離れている事があるかもしれませんし、これはあくまで僕の考えなので、他の人が思っていることとは異なるかもしれません。あくまで1人の人間の考えと思ってください。また、物理部の活動内容とはズレている事があるかもしれませんがご了承ください。僕の拙い日本語もご愛嬌ということで。
物理部員の方々を含め、ごゆっくりお読みください。
2.なぜわたしたちは芸術を学ぶのか そもそも私達はなぜ学校の授業として芸術を学ぶのでしょうか。僕が勝手に考えたことを説明します。
もちろん、芸術を学ぶのは学校側が芸術を使って金を稼ぐことを促しているからである、ということはありません。
まず理由の1つとして、「芸術とはなにか」を学ぶためということがあります。もちろん人間は生まれてから何かしらの方法で教えられるまでは「芸術」の概念はわかりません。しかも、「芸術とはなにか」というものが芸術についての知識が何もない状態で端的に言葉で伝えられても分かる人は少ないでしょう。鑑賞・実践などを繰り返すことでようやく「芸術とはなにか」がわかるようになります。
2つ目は、芸術的なセンスを発揮するためです。人間は生まれながらにして芸術的センスを持っているのですが、唯持っているだけでは発揮することはできません。芸術を鑑賞したり実践したりして芸術的センスを磨き、発揮できるようにするということです。
3つ目には、芸術作品を芸術作品として捉える能力を育むためということもあります。もし学校で芸術について学んでいなければ芸術作品をただの絵、ただの物質の塊、ただの音としか捉えることができません。しかし授業などによってただの絵、ただの物質の塊、ただの音にも芸術性を見出すことができるようになります。先程述べた「芸術的なセンスの発揮」にもつながっていきます。
3.芸術とはなにか さて、「芸術とは何か」ということを説明しようかなと思います。
世の中には色々な芸術作品がありますが、皆さんはどのようなものを芸術作品と考えていますか？ある人は芸術作品と考えているものであっても、別の人は芸術作品と考えていないかもしれません。このように、世の中に存在するモノの中で芸術作品とみなすかみなさないかは個人次第です。
また、芸術作品というとどのようなイメージがあるでしょうか？あまり日常においては使われない、または身近ではないと考える人も多いと思います。しかし芸術作品の判断基準が曖昧であることから考えれば、役に立つようなものだって芸術作品とカウントされるかもしれないのです。
したがって、僕は芸術とは世の中に存在するモノすべてと考えます。
その芸術の中にも「役に立つ芸術」と「役に立たない芸術」の2つに分かれています。
世の中に存在するモノすべてというのは、音楽などといった形のないものも含まれています。また、役に立つ芸術であるかそうでないかというのは一般的な分類が存在しているわけではなく、個人によって分かれます。ある人が、これは役に立つと考えているものでも他の人にとっては役に立たないと考えることもよくあるからです。
俗に「芸術」と言われている音楽、美術、書道などは「役に立たない芸術」です。しかし「役に立たない」ことと「存在してもしなくても良い」ということは混同してはいけません。ただ私達が日常生活を送るうえでで役に立たないというだけです。詳しくは第5章で説明します。
4.芸術の重要性 いよいよ本題の、芸術の重要性についてです。
まず、この世の中には「芸術作品」と呼ぶことができるものは無限にあり、世の中に存在するすべてのモノから学ぶことができることがあるのです。
芸術は「世の中に存在するモノすべて」である以上、何かしらモノを作る時には常に、今まで取り入れてきた芸術の知識が必要となります。ということは、今まで取り入れてきた芸術の知識と勘すべてが新たな芸術作品の制作に役に立ちます。
世の中に存在する芸術作品にも独創的なものが多くあります。その独創的なものは、何も芸術の知識や勘がない状態から生まれると思われがちですが、何も知識がない状態では芸術作品を生み出すことさえもできません。独創的な芸術作品は数多ある芸術作品を知ることで、そこから生み出されるのです。
つまり何が言いたいかというと、「芸術」、つまり色々なものを吸収することで日常においてものを独創的な観点から見ることができるようになり、また独創的なものを作り出すことができるようになるのです。その独創性は、芸術の情報を吸収すれば吸収するだけ大きくなります。
もちろん、役に立たない芸術も含みます。
5.役に立たない芸術の重要性 では、俗に言う「芸術」、つまりは役に立たない芸術の重要性についても説明していきます。
先程述べたとおり、役に立たない芸術はあくまで日常生活において直接的に役に立たないだけであり、これらの存在も世の中において欠かせません。
役に立たない芸術も役に立つ芸術同様、ものを独創的な観点から見るのに役に立ちます。しかし、役に立たない芸術の重要性はそれだけではありません。
まず、役に立つ芸術は役に立つが故に、そこから感動するということはあまりないでしょう。なぜなら役に立つ芸術の作品が作られるうえで、芸術的な意図はないからです。
皆さんは絵画を見たり音楽を聞いたりして、心を動かされたことはありますか？役に立たない芸術は、人の心を動かすためにあるのです。
むしろこちらの重要性のほうが納得することができるでしょうか。
もちろん役に立つ芸術も同じくらい人の心を動かしているのですが、それに気づくことはできません。役に立たない芸術は人の心を直接的に動かしています。
しかし、それは役に立たない芸術としての存在意義であって、日常において役に立たない芸術に存在意義があるということにはまだ繋がりません。役に立たない芸術が、役に立つ芸術との間の垣根を超える瞬間が何処かにあるはずです。
僕は先程「役に立つ芸術から直接的に心を動かされる事は少ない」と言いましたが、「見えないところで心が動かされている」、つまり心が動かされていないように思われていても、実は心の底ではその役に立つ芸術の作品に夢中になっているということはありえます。そのようなことは、あるものが役に立たない芸術の要素を取り入れているか次第でありえるかもしれません。
以上より、僕はこう考えます。
役に立たない芸術を通して人の心を直接的に動かすことを学び、その知見を利用して、役に立つ芸術作品をつくる上で、役に立たない芸術から得た独創性を活かすことができるというだけでなく、人の心を見えないところで動かすという点においても役立てることができるということです。
これが本当の、役に立たない芸術が役に立つ芸術との垣根を超える瞬間です。
6.物理部と芸術 さて、ここまで全く物理部に関係ないことを書いてきたのですが、これはこの部活である物理部の部誌であり、少しは物理部のことについても書こうと思います。物理部と芸術はどのような関係性について説明します。「そもそも物理部とはなにか」という根本的なところまで説明してしまうかもしれませんね。
物理部はプログラミングや電子工作をしている部活であり、一見芸術に関係ない部活であると思われると思いますが、物理部、いや、部活というものすべて芸術団体であると僕は考えます。 この物理部の場合、「ブログラム」「機械」という名の「芸術作品」を創り上げています。
その「プログラム」「機械」にも種類は部員が作ってきた数だけあり、同じものはありません。
特に物理部は「モノ」を作る部活であり、つまりははっきりとした「芸術作品」を作る部活であるということです。
物理部員は、先輩が作った芸術作品の仕組みを知り、それに似たものを作ろうとしているがその過程で道がずれ、結果的にオリジナリティのある芸術作品を作ることができるようになると思います。
その中にも「役に立つ芸術」作品、「役に立たない芸術」作品を作っている部員がそれぞれいて、その役に立つか立たないかの垣根を超えてものづくりに励んでいます。
「はじめに」で、「3DCG制作や映像編集、作曲といったこともしている部員がいる」と言及したように、それはつまりたとえ特定のことであっても、芸術の面白さと可能性を見出し、役に立たない芸術に足を踏み入れる部員も増えてきています。
だからこそ、ものづくりの楽しさを知っている部員がいる物理部は、芸術団体の頂点を名乗るのにふさわしいと言えるのではないでしょうか。
7.芸術を学ぶにあたって さて、芸術を学ぶにあたって、私達は何を意識すればいいのかを考えてみます。この章で説明する芸術は、主に役に立たない芸術を示しています。
そもそも、芸術を教わるがまま学ぶというのも1つの芸術の学習で、それだけでも十分な芸術の知識を得ることができるとはいえ、それだけでは勿体ありません。与えられた少ないものから、その更に上を学ぶこともできるはずです。
例えばこのようなことができるでしょう。
芸術の情報が1つ与えられたら、自分が得た役に立つ芸術または役に立たない芸術の情報を1つ引っ張り出します。次に、与えられた芸術の情報をその情報と対比します。そこから共通点を見つけ出します。共通点があろうとなかろうと、それを数回繰り返します。
もちろんそこから見つけ出したことを何かしらの紙に書き記すなどする必要はありませんし、頭に留めておくくらいで十分だと思います。
このようなことをすることで、得た芸術の情報を独立させず、すべての情報を互いにつなげる事ができ、芸術をひとかたまりにすることができます。そうすることで、第5章や第6章で書いたようなことをすることが容易になるのです。
もちろん今挙げた方法は一例で、情報をひとかたまりにする方法は他にもたくさんあります。その方法を考えるところから始め、芸術を学ぶときに活かしてみるのも良いかもしれません。
8.結局何が言いたいのか ここまで長ったらしい文章を書いてきたのですが、結局僕が言いたいのはこれだけです。
芸術とは、世の中に存在するモノすべてである 芸術には役に立つ芸術、役に立たない芸術がある 芸術を学ぶことで日常においてものを独創的な視点から見ることができる 役に立たない芸術は人の心を動かすことに繋がる 物理部は芸術団体の頂点を名乗るのにふさわしいのではないか 芸術をただ学ぶだけでは勿体ない という僕の芸術に関しての独断と偏見でした。改めて言いますが、これは一般的な考えではなく1人の人間の考えです。もちろん反対意見もあるだろうし、この人何を言っているんだと思う方もいらっしゃると思います。あくまで参考程度にしていただければ幸いです。</description></item><item><title>AMDのZen3について考える</title><link>https://asanobuturi.github.io/document/2021/ryzen/</link><pubDate>Thu, 01 Jan 1970 00:00:06 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/ryzen/</guid><description>はじめに 昨年の10月、AMDがRyzen5000シリーズを発売し、CPU業界は大きく盛り上がりました。この部誌ではどうしてRyzen5000シリーズがあれほど大きな話題を呼んだのか考えたいと思います。RyzenThreadRipperシリーズに関してしては大きく省いている点があること、また筆者の個人的な意見を多く含んでる場合がありますのでご了承ください。
そもそもRyzen5000シリーズとは そもそもRyzenシリーズはAMDが2016年12月13日に発表したCPUのブランドです。これにより当時はIntelがCPU市場を独占していた状況に大きく風穴を開けました。
Ryzen1000シリーズはIntel製CPUに比べ、安価でクロック数が低い一方で、コア数、スレッド数が多いという点で人気を集めました。同時にIntelはCPUの開発に苦戦しており、多少性能を向上させた程度ものを別の世代として販売していたことから、Intelを見捨てた消費者も多かったことでしょう。
グラフを見ればわかるように、Ryzenの発売直後の2017Q1期(1月~3月)に、今まで下がり気味であったAMD製CPUのマーケットシェア率は上昇に転じています。
またデスクトップCPUに関しては2021,Q1(1月~3月)時点ではIntel製CPUのマーケットシェアを追い抜いています。これはおそらくRyzen5000シリーズ発売の影響でしょう。いろいろなWEBメディアでも大きく取り上げられていましたからね。 ちなみに混乱した方もいらっしゃったかもしれませんが、Ryzen5000シリーズはRyzenの第４世代の製品です。(Ryzen4000シリーズは第3世代のセキュリティ強化モデル)
Ryzen5000シリーズの特徴 いままでのRyzen7,Ryzen9シリーズでは、4コア+L3キャッシュ16MBを１グループとしてそれを複数搭載することによって多コアを実現してきましたが、Ryzen5000シリーズからは8コア+L3キャッシュ32MBを１グループとすることでコア間のデータ転送速度を大幅にアップさせ、また１つのCPUが大量のL3キャッシュに瞬時にアクセスできるようになりました。これによりCPUの性能は19%アップしたとされています。参考画像ﾎﾟﾝｯ
Ryzen5000シリーズのRyzen9ではこのグループを2基、Ryzen7では1基搭載しています。こうして性能が飛躍的に向上したにもかかわらず、Ryzenのコストパフォーマンスは維持され続けています。まあ実際すごいのはAMDではなくこのCPUの設計と製造を担当しているTSMCなんだけどね。
この先のRyzenについて すでにRyzen6000シリーズ(Zen4)の情報はリークされていますが、最大の違いはなんといってもソケットの変更でしょう。いままでのRyzenは、デスクトップ向け製品に関してはずっとAM4という規格のCPUソケットを採用し続けてきました。そのおかげでユーザーはマザーボードメーカーが対応してさえいれば「Ryzen1000シリーズのCPUを使ってきたけれどそろそろ性能に不満が…」となった際に簡単に世代を超えてCPUをアップグレードすることができたのです。しかしソケットの形状が変わってしまうとそれもかないません。 10年ほど前からIntelは2世代ごとぐらいにソケット形状を少しずつ変化させるという暴挙に出ていますが。 いままでこのアップグレードの簡単さがRyzenシリーズの売りであったような気もするので、これからパソコンを買う人の中ではRyzenシリーズを避ける人も出てくるかもしれませんね。まぁまだリーク段階なのでソケット形状が変わると確定したわけではありません。今後の最新情報に期待ですね！
終わりに 参考文献 CPUシェアグラフ　https://www.cpubenchmark.net/market_share.html AMD CCXに関する情報 https://www.gdm.or.jp/review/2020/1105/368230</description></item><item><title>知れば知るほど知りたくなるLEDの世界</title><link>https://asanobuturi.github.io/document/2022/led/</link><pubDate>Thu, 01 Jan 1970 00:00:06 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/led/</guid><description>はじめに こんにちは。去年の部誌も読んでくださった方は1年ぶりです。高校一年生のK.R(去年の部誌ではR.Kとして紹介)です。
この記事を書き始めたときにはもう文化祭まで2週間を切っており、急いで執筆することを強いられています。そのうえ、まだ僕は物理部で製作途中の作品がありそれも完成からは程遠く、残り2つの兼部先でも多くの作業を抱えており、本当にこの記事を書き終わって作品を作り終わり他の部活のタスクも終わらせることができるかが心配です。もし僕が文化祭の日に死体が如く部室に横たわっていたら、作品が完成しなくて落ち込んでいるか数々の作業で疲労しているかのどちらかが理由であると思います。部員の皆さん、僕の死体を発見した時にはジュースでも奢って下さい。
字数稼ぎができました。では、本題に入りましょう。
この記事では、僕が電子工作班の作品制作でよく使用している、LEDについて自分なりに解説します。 僕はPC班員として物理部に入部し、中2までは気まぐれでプログラミングをしていましたが、中2の後半になって電子工作に興味を持ち始め、中3の後半になってようやく本格的に電子工作を始めました。遅咲きですね。
そのときに先輩が途中まで制作した、LEDを使った作品を引き継ぐことになり、自分でどうやって動かすかを調べて最後まで配線しました。入部してからPC班である程度構築されていたプログラミングのスキルを利用して、そのLEDをプログラミングで制御することもできました。
それをきっかけに主にLEDを使った作品制作を本格的に始めるようになりました。
ということでこの記事では、僕がLEDの作品を1年作り続け、暇があれば電子部品のサイトを徘徊していたその経験に基づいて、LEDの種類とその制作例、作品の大まかな仕組みを説明します。
タイトルの「知れば知るほど知りたくなる」というのは1分でなんとなく思いついたタイトルですし、本当に知りたくなるほど奥深い世界を描写できているかは分かりません。それでもこの記事をきっかけに少しでもLEDに興味を持ってくれる人がいることを願っています。
拙い文章ではありますが、どうぞお楽しみ下さい。
そもそもLEDとは まずはLEDの基本的な内容・特徴について説明します。LEDとは発光ダイオード(Light-Emitting Diode)の略で、ダイオードの一種です。
ダイオードとは、アノードからカソードの1方向にしか電気を流さない(整流作用をもつ)電子部品です1。その性質を生かし、逆流を防止するために回路に挟まれたり、ACアダプターなどで平滑回路とともに交流を直流に変換する回路の一部(整流回路)に使われたりしています。
下の図は、ダイオードの回路図記号です。
LEDとは、そのダイオードの中でも電気を流して発光するものを表しています。下の図はLEDの回路図記号です。
また、LEDの中で最も一般的なものは、下の写真のような「砲弾型LED」とよばれるものです。
砲弾型LEDは、発光する素子をプラスチックで覆うことで素子を保護し、素子からの光を拡散しています。
LED単体での光の色は、LEDが発する光の電磁波の波長によって決まります。例えば、紫色の波長は380nm〜450nm、青色が450〜485nm、緑色は500〜565nm、赤色は625〜780nmです。波長が紫色から赤色の範囲までの光はヒトの目で見ることができ、その範囲の光線を可視光線といいます。赤色よりも波長が長い光は赤外線とよばれています2。
砲弾型LEDにも白色で光るものはありますし、恐らく殆どの家庭に白色のLED電球や白色のLED蛍光灯はあると思いますが、可視光線の中に白色はありません。今の技術で白色の電磁波を作ることは不可能なのです。 しかし、複数の色を合わせることで、白色などの可視光線では表現できない光の色を作ることが可能になります。読者の多くが「光の三原色」という言葉を聞いたことがあると思います。「光の三原色」の考え方に沿った場合、赤色、緑色、青色の3色のLEDを組み合わせ、それぞれの明るさを調節することで色が混ざって様々な色をつくることができます。例えば、すべてのLEDを点灯すると白色に見え、赤色のLEDと青色のLEDだけを点灯すると紫色に見えます。色のこのような表現法のことを、それぞれの頭文字をとって「RGB」といいます。「R」、「G」、「B」は色の三原色のそれぞれの色を英語にした頭文字(Red、Green、Blue)をとっています。
3
ここまである程度LEDの基本について説明しました。
もっと詳しいことは第4章以降で説明しますが、LEDは部屋などの照明に使われているのは勿論、人々に情報を提供することも、部屋の雰囲気を変えることも、娯楽として利用することもできるのです。このように、LEDは人間の生活においてとても身近であり、大切な役割を果たしているのです。
マイコンとLED ここからはLEDの形態や作品例を説明したいと思うのですが、その前に、LEDを扱ううえで大切な「マイコン」について説明します。「マイコン」とは「マイクロコントローラー」の略で、プログラムを書きこむことで電気の複雑な入力(スイッチやセンサーなどの読み取りなど)や出力(モーターの回転やLEDの点灯など)ができる集積回路です。
4
マイコンを単体で扱うこともできますが、マイコンをさらに扱いやすくした基板であるマイコンボードというものもあります。マイコンボードの代表としては、2005年にイタリアで開発されたArduino(アルドゥイーノ)が挙げられます。下の図は、Arduinoの主要モデルであるArduino UNOの写真です。
Arduinoとは、ピンに導線を挿してセンサーやトランジスタ、LEDやモータードライバーやモーターなどの電子部品を配線して回路をつくり、Arduino IDEという専用のアプリケーションを使用して、C++をもとにしたプログラミング言語でプログラムを記述し、コンパイルして作ったスケッチを書き込むことでプロジェクトが完成します。
下の図は、Arduinoをプログラミングする流れを大まかに描いた図です。
ライブラリも充実しており、後述するたくさんの種類のLEDをすべて制御することができます。
ここまで難しい言葉を羅列してきましたが、やっていることは「配線してプログラムを書き込む」という、たったこれだけなのです。Arduinoは、初心者には本来難しいはずのマイコンの制御を初心者にも簡単にできるようにした、革新的なアイテムなのです。
LEDの種類 ここからは、LEDを光らせる形態としてどのようなものがあるのかを説明していきます。勿論この世にはたくさんの形態があり、部誌の中にすべてを収めるのは難しいです。個人の2年間の電子工作の経験をもとに、「これはよく使われる」と思ったLEDを4個選びました。
砲弾型LED 第2章でも少し書きましたが、最も一般的な種類のLEDです。発光する素子にプラスチックのカバーがついているだけですが、その中にも更に細かい種類があります。 まずは、下の図を御覧ください。
LEDには端子が2つあり、長い方を「アノード」、短い方を「カソード」といいます。例えば電圧が5Vの電源装置を用いた場合、およそ200Ωの抵抗を回路の中に入れることで明るく点灯します。
しかし、このようなLEDは単色にしか光りません。「場面によって光る色を変えたい」「LEDの色を滑らかに変えたい」などと思ったら、下の図のようなLEDを用いるとよいでしょう。
このLEDは、中に光の三原色である赤色、緑色、青色のLEDが入っていて、それぞれのLEDの光の量を調整することで、様々な色の光を作ることができます。このようなLEDを「RGB LED」とよびます。
このLEDは端子が2個ではなく4個になっています。なぜそうなっているのでしょうか。
そもそも端子が4つのRGB LEDには主に「アノードコモン」「カソードコモン」の2つの種類があります。
まず、アノードコモンのRGB LEDには1つの+端子、3つの-端子があります。+端子に電源の+極をつなげ、3つの-極に流れる電流の大きさをそれぞれ制御することで、3つの光の量を調整することができます。 一方、カソードコモンのRGB LEDは、3つの+端子、1つの-端子があります。-端子を電源装置の-極に繋げ、残りの3つの+端子の電流の大きさを制御することで様々な色に発光させることができます。
Arduino等のマイコンボードには、ピンがそのまま+極となるためアノードコモンのRGB LEDよりもカソードコモンのRGB LEDのほうがよく使われます。 その他、「素子の中に抵抗器を内蔵しているLED」「アノードからカソードに電気を流すだけで色がゆっくり変化するLED」「キャンドルのように明るさが変わるLED」「リモコンなどに使われる赤外線LED」など、砲弾型LEDにも様々な種類があります。
このように、LEDの中では一般的な砲弾型LEDであっても、作りたいものに合わせてその種類も豊富なのです。
チップLED 次に説明するのは「チップLED」です。チップLEDとは、プリント基板上などに表面実装する(穴に導線を挿してはんだ付けをするのではなく基板の表面にはんだ付けをすること)ためのLEDです。「表面実装用LED」ともよばれたりします。
そのサイズは、多くの砲弾型LEDの樹脂部分の直径は5mmであるのに対し、上の画像のLEDの場合、長辺が1.6mm、短辺が0.8mmと、素手で扱うことがとても難しいくらいに小さいです。
この小さなLEDですが、その小ささを生かして身近な様々な製品に利用されています。
例えば、部屋の天井にあるLEDの電灯は、1つの電灯で1つのLEDの素子が使われていると思われがちですが、そうではなく実はたくさんのチップLEDを並べて点灯させることで部屋を照らすという仕組みの製品がほとんどなのです。
また、この後説明するLEDマトリクスパネルやLEDテープのLEDの1つ1つもチップLEDです。RGBのチップLEDが使われていることもあります。
さらに、多くの電気製品に搭載されていて、電源が入ると点灯したり色が変わったりする、電源ランプにも多くはチップLEDが使われています。
その他にも説明しきれないくらいにチップLEDには様々な使われ方があります。そのくらいチップLEDとは普段の生活に身近であり、日常生活に欠かせないものなのです。
LEDマトリクスパネル 次に説明するのは、たくさんのチップLEDを一面に並べることで、それぞれのLEDの点灯/消灯で文字や絵を描画することができる、「LEDマトリクスパネル」です。
ArduinoなどのマイコンボードやRaspberry Piなどのシングルボードコンピューターなどを使用してプログラムによって制御したり、専用のコントローラーを使用したりすることで自由自在に制御することができます。
下の写真は、Arduinoを使用してLEDマトリクスパネルに文字をや絵を表示させてサインボードを作っている例です。
おそらく多くの人がこのようなパネルが店などに使われているのを一度は目にしたことがあると思います。また、鉄道の発車標などの電光掲示板にもLEDマトリクスパネルが使われています。</description></item><item><title>PWMについて</title><link>https://asanobuturi.github.io/document/2022/pwm/</link><pubDate>Thu, 01 Jan 1970 00:00:05 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/pwm/</guid><description>この記事はコロナ感染中に執筆しているため、もしかしたらおかしな所があるかもしれません。大目に見てください。
PWMとは PWMは Pulse Width Modulation の略で、直訳するとパルス幅変調となります。アナログ信号をデジタル信号に変調する方式の一つで、ONとOFFの比率を変化させることで擬似的にその間の値を表現するものです。
用語説明 周期：繰り返しの現象が一周りしてまた戻ってくるまでの時間。 周波数：繰り返しの現象が1秒間に行われている回数。 $$ \frac{1}{\text{周期}} $$ パルス幅：一周期のうち、ONになっている時間。 デューティ比：一周期の中でのONの時間の割合。 $$ \frac{\text{パルス幅}}{\text{周期}} $$で計算できる。 平均電圧：名前の通り、電圧の平均。 $$ \text{デューティ比}\times\text{ONのときの電圧} $$ 実行電圧：周期的に変化する電圧の大きさを表すのに使う値。PWMの場合、$$ \text{ONのときの電圧} \times \sqrt{\text{デューティ比}} $$ で計算できる。 {height=300}
上の画像はPWMの電圧のグラフですが、電流、電力も同じ形になります。
PWM信号の基本的な作り方 PWMの信号を生成するには、２つの入力が必要になります。１つ目は変換したいアナログ信号(当たり前)、もう一つは変調に使うためのノコギリ波(三角波でも可)です。 変換したい信号とノコギリ波の大小を比較し、変換したい信号の値がノコギリ波より大きいときはON、小さいときはOFFを出力することでPWM信号を生成することができます。言葉で説明するより実際に下のグラフをいじってみたほうがわかりやすいでしょう。赤い線がアナログ信号、オレンジの波がノコギリ波、紫の線がPWM信号、青い線がPWM信号の実効値を表しています。半透明の点はドラッグで動かせます。(若干重いです)
上のグラフを見て分かる通り、変調に使ったノコギリ波の周期と生成したPWM信号の周期は一致し、変調したいアナログ信号の最大値、最小値はノコギリ波の最大値、最小値のなかに収まっていないといけません。 また、連続的に変化する信号を変換することもできます。
変調するアナログ信号の振幅を大きくし、ノコギリ波の範囲を超えると、音割れのような状態になってしまうのがわかるかと思います。
Arduino Uno上での実行 先ほど紹介した方法をArduino Uno上で実行します。 Arduino Unoには タイマー０、タイマー１、タイマー２の３種類のタイマーがあり、役割や特徴が少しずつ違います。この３つの違い等については割愛します。 Arduino Unoではタイマーが16Mhzで(1秒間に16,000,000回)カウンタを一ずつ増やしていき、0~255まで数え、255になったらリセットするというのを繰り返しています(自分で設定すれば変えられます)。これをPWMの変調に使うノコギリ波の代わりにします。
#include &amp;lt;avr/io.h&amp;gt; //タイマーを設定するのに必要なライブラリを読み込む int duty = 50; //指定したいデューティ比(%) void setup() { pinMode(11, OUTPUT); //11番のピンを出力に設定 } void loop() { // タイマーのモードを指定 TCCR2A = 0b10100001; TCCR2B = 0b00000100; // Dutyの比指定 OCR2A = 255*duty/100; } 上のプログラムを実行すると周波数：982Hz、デューティ比：約50％のPWMがArduino Unoの11番のピンから出てくるはずです。これでも十分短いプログラムですが、単にArduinoでPWMを使いたいだけだったら下の一文で使うことができます。</description></item><item><title>アーキテクチャへの扉</title><link>https://asanobuturi.github.io/document/2021/architecture/</link><pubDate>Thu, 01 Jan 1970 00:00:05 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/architecture/</guid><description>はじめに（免責） この記事はネットや本などで知識だけを身に着けた経験の浅い人が書いています。この人はこんな考え方をしているんだなぁ位にこの記事を読み流してきちんとした本を読むことをお勧めします。本記事の考えのもとになっている本はを最後に紹介します。
本記事の目標 本記事ではプログラムとはどんなものか、またオブジェクト指向とは何かを説明しながらプログラムの大まかな構造を考えていきます。最終的に、良いと言われているようなプログラムの構造を考えられればなと思います。
プログラムの評価は使う人が直接触るわけではないので、いわゆる絵や音楽などの受け手からの評価とは違ってきます。プログラムに触れるのは仕様を変更したり追加したりする同業者または自分です。つまり、プログラムはそれを作り替える人から評価を受けるわけです。よって良いプログラムとは仕様を変更したり追加したりしやすいプログラムということになります。
プログラムを評価する指標は大まかに三つほどあります。一つ目は読みやすさです。読みづらければプログラムを理解することが大変になってしまいます。二つ目は再利用のしやすさです。同じようなものを何度も書いているとプログラムが無駄に大きくなってしまいますし、それだけ労力がかかってしまいます。三つめは正しさです。当然ですがバグが多いプログラムはプログラマに対してだけでなくユーザーに対しても被害が出ます。
プログラム コンピュータプログラム（英：computer program）とは、コンピュータに対する命令（処理）を記述したものである。
Wikipediaからプログラムの説明を引用してきました。プログラムは仕事の手順を示した静的なデータです。
https://cookpad.com/recipe/2477629 これは生チョコのレシピの一部です。プログラムはこのような料理のレシピと同じように「最初にこれをやる、次にこれをやる……」ということが書かれたデータです。
料理をするときには材料が必要となり、その材料をもとに食べ物を作ります。プログラムも同じく、あるデータを使って決まった仕事を行い、得られたデータを出力します。つまり、プログラムは入力、処理、出力で構成されています。（このうちのどれかが欠けることはあります）関数について考えてみても、この構成要素がわかります。関数は引数が入力され、中である決まった処理をして、戻り値を出力します。関数はそれ自体が一つのプログラムになります。
入力の段階で処理しやすいデータになっていると関数などで中に書くコードが少なくなるのでプログラムが単純になります。料理でいうところの下ごしらえです。3分クッキングでは下ごしらえを完璧にすましてあるので実際の処理内容（レシピ）がとても分かりやすくなっています。関数の中でデータを動的に取得して（現在時刻の取得など）から、そのデータと引数を使って処理をしたいことがあると思いますが、やってはいけません。これは処理の部分でデータを用意していることになります。また、ある引数を入れたときに常に同じ戻り値が返ってこないことになります。これは、入力と出力を見てプログラムが正しく動いているかどうか判断することができなくなるのでやってはいけません。現在時刻なども外で取得してから関数の引数などに渡しましょう。
プログラムの依存関係 プログラムはプログラムの中で使うことができます。関数の場合関数の呼び出しと言ったりします。依存関係は使うものと使われるものの関係です。使うものは使われるものに依存しているといいます。車で考えてみましょう。車はタイヤを使います。タイヤは車に使われます。車がなくてもタイヤの機能は成り立ちますが、タイヤがないと車の機能は成り立ちません。つまり、タイヤは車に依存しておらず、車はタイヤに依存していることがわかります。AプログラムがBプログラムを使っているとすると、BプログラムがないとAプログラムを使うことができませんが、AプログラムがなくてもBプログラムを使うことができます。なので、AプログラムはBプログラムに依存していることとなります。
さて、車はタイヤに依存していると話しましたが一般的に物が製品を使う、つまり製品が部品に依存するという関係が成り立っています。しかし、プログラムの中では部品と製品との違いがあいまいなことがよくあります。ではどのようにプログラムの依存関係を考えるかというと、より根本的かつ汎用的なプログラムのほうに依存します。製品と部品では部品のほうが汎用的です。汎用的な部品は一つの製品だけでなく、様々なところで使うことができます。タイヤはネジに依存していますが、ネジを使っている製品はとてもたくさんあります。また、AプログラムがBプログラムに依存しているとBプログラムの仕様が変わったときにAプログラムの仕様を変えなければならない可能性があります。しかし、その逆はありません。ネジの太さが変わってしまうとそのネジを使っているタイヤは使えなくなってしまいますが、タイヤのネジ穴が太くなってもネジが使えなくなることはありません。
アプリケーション アプリケーションはプログラムその物ではありません。入力、処理、出力では説明できないからです。ただ、アプリケーションの仕様を分解するとそれぞれを入力、処理、出力で説明できるようになります。ここからアプリケーションは複数のプログラムが集まって出来ていることがわかります。
アプリケーションのユーザはパソコンやスマホなどのデバイスを操作して画面に何かが表示されたり音が鳴ったりすることを期待します。ユーザの操作がプログラムの手順を始めるトリガーとなり、処理に必要なデータを作ることがあります。
ユーザの操作から得られるデータ以外にアプリケーションやサーバ上にあるデータが必要となるときがあります。これらのデータを得るためのデータアクセサが必要になります。ユーザの操作によって得られるデータや、データベース、ファイルなどのデータはそのままでは処理に向いていないことがよくあります。よって、処理に必要なデータを処理しやすいデータに直すプログラムが必要になります。
ロジックに必要なデータは様々なところから持ってくるので、それらを一括にまとめてロジックに渡せると便利です。様々なデータとプログラムを繋ぐことからこのプログラムをロジックと名付けます。
出力されるデータもただのデータでしかないので、出力されたデータを解釈して画面に表示したり音を鳴らしたりなどのユーザの体験を提供するプログラムが必要です。
これらを踏まえてアプリケーションの中のプログラムの基本的な構造を考えてみます。
ユーザの操作で処理がスタートします ユーザの操作で得た入力データを処理しやすいデータに変換し、「ジョイント」に入力します。 「ジョイント」で「データアクセサ」からファイルやデータベースのデータを持ってきて「ロジック」に入力します 「ロジック」で入力されたデータに対してある決まった処理を行い、得たデータを「ジョイント」に返します 「ジョイント」で帰ってきたデータを複数の「出力」に渡します。 「出力」で渡されたデータを解釈して画面に表示したり、音を鳴らしたりと様々なことをします これら一つ一つのプログラムも入力、処理、出力で出来ていることがわかります。
では、依存関係の話をアプリケーションのプログラムに応用してみましょう。アプリケーションのプログラムは基本的に入力、ロジック、出力、データアクセサ、ジョイントでできています。アプリケーションにとって根本的なのはロジックです。ロジックには仕様その物が書かれています。また、ロジックは同じ仕様の別アプリケーションでも使うことができます。
一方、入力、出力はアプリケーションごとにUIが異なり、UIが変わってもアプリケーションが成り立つ（パズドラは何回かUIが変わっています）ことから根本的ではないことがわかります。また、データアクセサもファイルの拡張子やデータベースの種類などによってアプリケーションの根本的な仕様は変わらないので根本的ではありません。
そして、ジョイントは入力、出力、データアクセサとロジックの間を取り持つので根本度も中間になります。よって、ジョイントがロジックに依存して入力、出力、データアクセサがジョイントに依存することになります。しかし、ジョイントはデータアクセサや出力を参照する必要があるのでこれらの依存関係を守ることは難しくなってしまいます。
アプリケーション構造_手続き オブジェクト指向 これまで話した構造がBasicやC++などの手続き型言語で出来る構造です。この構造をC#やJavaなどのオブジェクト指向言語を使うことでさらに強化していきます。（PythonやC++などのオブジェクト指向言語では対応していない機能がありますが、代替手段があります。多分）ただ、その前にオブジェクト指向の機能はどんなものがあるか確認していきましょう。
クラス クラスは型と呼ばれることもあります。型、つまり物を作るときに元となるものです。クラス自体は使うことができません。クラスを使って物を作るのですが、その物をインスタンスと呼びます。クラスには主にフィールドと呼ばれるデータ（変数）とメソッドと呼ばれるフィールドを使ったプログラムを定義することができます。クラスには二つの使い道があり、一つ目はインスタンスを生成することで、二つ目はインスタンスを入れる変数にすることです。
インスタンス インスタンスの中にはクラスで定義されたデータとプログラムが入っています。このデータやプログラムは公開するか非公開にするかクラスで決めることができます。公開するとインスタンスの外で使うことができて、非公開にするとインスタンスの内側でしか使うことができません。
インスタンスには二種類の使い方があります。データのまとまりと共通のデータに対するプログラム群です。これは二種類の使い方どちらでも使えるわけではなく、どちらか一つの使い方に絞る必要があります。データのまとまりとして使うインスタンスをデータ構造、共通のデータに対するプログラム群として使うインスタンスをオブジェクトといいます。データ構造もオブジェクトもデータが主となっていることがわかります。よって、クラスはデータのまとまりとして名前を付けるべきです。
データ構造はデータのまとまりです。それ以上でもそれ以下でもありません。プログラムにデータを渡したりデータを出力したりするときに使います。データ構造はただのデータなのでクラス内には公開フィールドしか定義してはいけません。
プログラムは入力、処理、出力で出来ていると話しました。当然メソッドもそれに従わなければなりません。メソッドの入力は引数のほかにフィールドがあります。（メソッドにフィールドを入力しない場合、そのプログラムはメソッドではなく関数で実装した方がよいことになります）引数はメソッド内の処理を実行するときに入力するデータなのに対し、フィールドはあらかじめ決めておくデータになります。メソッドを使うときには引数しか設定しないのでフィールドをころころ変えてしまうとある引数に対して常に同じ戻り値が返ってこないことになります。よって、オブジェクトのフィールドは外からも（できれば中からも）変更できないようにするのが好ましいです。ここでフィールドを非公開にする必要が出てきます。オブジェクト内のデータが欲しいときには公開したいデータだけをまとめた専用のデータ構造のクラスを作り、そのインスタンスを返すメソッド（またはプロパティ）を返します。
インターフェース インターフェースは各プログラムのつなぎ目です。インターフェースには実装されていないメソッド（またはプロパティ）を定義することができ、それらをクラスに実装させることで間接的にクラスのメソッド（またはプロパティ）を使うことができます。インターフェースは複数のクラスを「同じ機能を持つもの」として同じように扱えます。インターフェースを変数にすることによってその変数にはインターフェースが実装されているクラスだったらなんでも入れることができます。
また、インターフェースを介してクラスをつなぐことによって依存関係を逆転することができます。例えば、根本的なロジックを持つクラスAが詳細的なロジックを持つクラスBを参照したいとします。
依存関係逆転の問題 しかし、これだと根本的なクラスが詳細的なクラスに依存していることになってしまいます。そこでクラスA専用のインターフェースBを用意してクラスBがそれを実装します。
依存関係逆転の解決 インターフェースBはクラスA専用なのでクラスAが欲しい機能だけが定義されています。クラスAの仕様が変わりインターフェースBに対して必要な機能が変わるとインターフェースBは中身の処理を定義していないので簡単に機能を変えることができます。インターフェースBの機能を変えるとクラスBを変更するかインターフェースBの機能を持った新しいクラスを作る必要があります。これで詳細的なクラスBが根本的なクラスAに実質依存することができます。
抽象クラス 抽象クラスはインスタンスを生成することができず、型として使います。その代わり抽象クラスを基に派生クラスをつくることができ、派生クラスは抽象クラスとして扱うこともできます。派生クラスはその名の通り抽象クラスから派生したものです。よって派生クラスは抽象クラスとして扱える必要があります。イメージとしては抽象クラスが種類、派生クラスが物となります。抽象クラスは厄介な機能なのであまり使う頻度は高くありません。というか安易に使ってはいけません。機能をまとめたいだけならインターフェースを使いましょう。
オブジェクト指向を使ったプログラムの構造 オブジェクト指向の主な機能を確認したところでこれをアプリケーションのプログラムに適用してみましょう。オブジェクト指向は再利用のしやすさに特化しています。
ソフトウェアのプログラムは入力、出力、ロジック、ジョイント、データアクセサで出来ていること、そして入力と出力がジョイントに依存していてジョイントがロジックに依存しているべきだということをプログラムの章で話しました。関数だけではこの依存関係にすることが難しいですが、オブジェクト指向の機能であるインターフェースによって依存関係を逆転させることで可能になります。
インスタンスを使うことによってデータとプログラムが一体となり、処理プログラムを再利用できるようになりました。そこで、様々なデータに対する処理をそれぞれクラスで定義し、それらを使って一つの大きな処理をこなすプログラムを作ります。このような小さなロジックを複数フィールドに持ち、それらをつかって大きな処理をするメソッドを持つオブジェクトを制御フロー(またはトランザクション)と名付けます。
ジョイントがデータアクセサのインターフェースに依存することでファイルの拡張子やデータベースのツールが変わったときもジョイント部分を一切変更せずにデータアクセサを付け替えるだけでよくなります。</description></item><item><title>ゼロから始めるコイルガン製作</title><link>https://asanobuturi.github.io/document/2022/coilgun/</link><pubDate>Thu, 01 Jan 1970 00:00:04 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/coilgun/</guid><description>初めに 初めまして、高二の電工班長のM.Yです。今回の部誌では、今年製作し、展示しようと思っている、コイルガンの製作過程についてちょっと解説を加えながら語っていこうと思います。 (ガッツリ解説については去年のものとほぼ同じになると思うので)
コイルガンとは コイルガンは、超強い電磁石のコイルを用いて金属製の弾を発射するものです。コイルの巻く数やコイルの動力となる電圧の違いによって色々弾の速度が変わっていきます。勿論電圧を大きくしたり、コイルの巻数を増やしたりすれば、弾の発射速度も上昇していきます。
製作過程 昇圧チョッパ・充電回路 昇圧チョッパとは、コイルガン製作において最も肝になる部分です。使いやすいコイルガンの製作にはここの改良が必須です。 今回製作する昇圧チョッパの回路図はこのような感じ。
実は去年、コイルガンを展示するためこの昇圧チョッパの製作をしていました。 が、遅々として進まず、去年の文化祭前に出来たものがこれ
なんだこれ… 正直今見ても愕然とするレベルの汚い配線です。 裏側はこんな感じ。本当に汚い
とまぁ去年はこんな感じで見栄えも悪く、さらにこんなに導線がギャンギャン伸びててどこかでショートしそうで怖いので新しい物を作ろうとしました。 が、技術不足等で遅々として進まず。 電工班長のくせして電工の知識がほとんど皆無なのです(電工班長のくせに)。前部長に聞きながらかなり日数を要しましたがなんとか完成にこぎつけました。
{height=200}
まぁ去年よりはマシ…かな？ 裏側はこんな感じ
{height=200}
そこからせっせとコンデンサの充電回路の製作に励んでいました が、またしても問題発生。 導線の直径の定格電圧を完全無視してました。今回400Vの電圧を流す予定なのですが、案の定、定格電圧をオーバー。(定格電圧とは、定格として定められてる上限の電圧です。導線の太さによって変わってきます。これを超えると安全の保証がなくなります。多分大抵の場合焼き切れます。)急いで付け替えてなんとか完成。
電源 コンデンサの充電に絶対必要な部分です。これが無いと回路を全部作ったとしても一生動きません。今回昇圧チョッパに使用するNE555という部品の耐圧が16Vが限界なので、15V前後のものを電源に使おうと思います。
安全回路 コンデンサに充電したけど射撃回路が動かなくてコンデンサから放電したい…。そんな時1番手っ取り早いのはショートさせることですが、何せ高電圧の電流です。ショートさせれば閃光と大きな音が出ます。(この大きな音に驚いた後輩の悲鳴が部内ではミームになってたり…)また、やり方が悪いと感電する可能性があります。いちいちショートさせるのは怖いので、メタルクラッド抵抗という抵抗を回路上に入れ、ダイオードから放電する際、安全に放電できるようにしました。 メタルクラッド抵抗とは、熱の拡散がしやすい、環境変化に優れた機器です。
電圧計 回路に流している電圧が分からないと最悪充電対象のコンデンサが爆発するかもしれないので電圧計が必要です。しかし、今回使う電圧は400V。500Vの電圧計が必要になります。500Vの電圧計は9/13現在、Amazonで¥1,620。少し高いです。ということで、50Vの電圧計の中に入っている抵抗の値を10倍にして500Vの電圧計にします。元々中に入っている抵抗は51kΩなので510kΩに取り替えれば良いわけですね。
スイッチ コイルの電源のONとOFFを切り替える重要な部分です。今回はトライアックを使用します。 部誌を書いている現在(9/13)未だに製作に至っていません。はよしろ
コイルと弾 これが無いとコイルガンじゃありません。 コイルは倉庫にあったものから、弾は部品箱に入っていたものを使っています。コイルは改良するかもしれません。
まとめ ここまで書いたことを全部回路図にするとこうなります。
昇圧チョッパ以外右側のトライアックの部分を除けば結構スッキリしてますね。 (抵抗の値など細かい部分は省いています。)
終わりに いかがでしたでしょうか。 今年コイルガンを作ってみた感想ですが まずめっちゃ大変でした。ド素人の技術からどうにかしてデータシートを読めるようにし、あまりなれていないユニバーサル基盤に部品をはんだ付けをし…という作業にとにかく時間がかかる。本当はもっと改良を加えたい点も沢山ありましたが、時間に追われ、出来ず終いです。反省点も多々あります。基盤をもうちょっと大きくすればよかった等…(書いていくとキリがない)。しかし、大変でしたが、とてもやりがいがある、というか楽しいものでした。 また今度、コイルガンを作る機会があれば、もっと電工について学び、筐体をつくったり、指定の電圧で充電が停止できるような回路を作ったりしたいものです。(Re:ゼロから始めるコイルガン製作) 最後に、ここまで技術を提供して頂いた前部長、部誌の校閲・発行等をして頂いた顧問の先生方、編集担当の方々、このPositronを読んでいる皆様に感謝申し上げます。 それでは皆様、物理部展#2022をお楽しみください。</description></item><item><title>深層強化学習によるリバーシAI</title><link>https://asanobuturi.github.io/document/2021/ai/</link><pubDate>Thu, 01 Jan 1970 00:00:04 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/ai/</guid><description>1.はじめに いわゆるAI（人工知能、artificial intelligence） というものは実はかなり定義があいまいです。比較的しっかりした説明をしそうなWikipediaでさえ、「～ともされる」「～もこう呼ばれることがある」と、なんとも歯切れの悪い説明をしています。要約して説明するなら、「『コンピューターで人間の知能を再現してみよう』という分野（またはそれの研究対象）のこと」といったところでしょうか。 『AIがこれからの社会で～』『我々の仕事はAIが～』といった言葉はよく聞きますが、多くの人はぼんやりとしたイメージしか持っていないと思います。注目されていると言われている「AI」とはどういった仕組みで、何ができて、何ができないのでしょうか。そういった疑問から自分の手で実際に簡易的なものを作ってみて理解を深めたいと思い、この記事を書きました。この記事を読んでそういったことが伝われば幸いです。
この記事は自分で理解を深め、知識を確かめるために書いたものでもあるので、何も知らない状態では理解しづらい文、数式が多く含まれると思われます。また、内容に誤りも含まれるかもしれませんので、ご了承ください。
2. 強化学習とは 2-1 概要 強化学習（reinforcement learning） はAIが学習をして知識を獲得する機械学習（machine learning） の手法の1つです。強化学習の特徴はその学習方法にあります。別の機械学習の手法であり、画像認識などで用いられる教師あり学習（supervised learning） と比べてみましょう。 教師あり学習では、前もって用意された問題（入力）とそれに対する解答（出力）をセットにした教師データを使って学習を進めます。人間が何かを学ぶ時のように、自分の出した答えと解答を見比べて、誤差を修正して学習するわけです。しかし実際の場合には、学習すべき問題が多すぎる、もとになるデータベースがない、そもそもこれといった圧倒的な正解がない、といった理由で十分に教師データを用意できない場合があります。 このような場合に対応しやすいのが先ほどの強化学習という手法です。強化学習では教師データをまったく必要としません。代わりに学習をする対象である環境（environment） に対してランダムな行動を繰り返すなどして試行錯誤を重ねます。すると環境から良い行動には報酬（reward） が、悪い行動にはマイナスの報酬である罰（punishment） が与えられて、それをもとに教師データの代わりとなる知識を自ら作り出すことができます。なので、なにかのスコアといった数値的な報酬に変換しやすい要素を最大化させるなどの行動を学習したいときに有効であると言えます。また、ランダムに試した行動がうまくいったかを学習するため、人間が思ってもみなかった答えを編み出すこともあります。 今回はその強化学習の手法のうち問題解決のためにどういった行動パターンをとればよいか学習をするQ学習（Q-learning） というものについて考えてみます。
2-2 Q学習の仕組み Q学習ではある状態（situation） における行動（action） の評価値となるQ値（Q-Value）（統計学の用語）というものを学習します。学習を通して、ある状態でのある行動が良いかどうかを正確に判断できるようになれば、すなわち評価値であるQ値を適当に出力できるようになれば学習成功ということになります。良い行動かどうかというのは、環境から与えられる報酬（マイナス値の報酬である罰を含む）のみによって判断できるので状態\(s\)における行動\(a\)のQ値を\(Q(s,a)\)と表すと、環境から与えられる報酬\(r\)を用いて以下のように\(Q(s,a)\)を更新すればよさそうです。 \[Q(s,a)=Q(s,a)+r\] しかし実際にすべての行動に報酬や罰を与えられることは少ないです（もし与えられるなら教師あり学習のほうが良いかもしれません）。サッカーやバスケットボールなどの球技を環境の例として考えてみましょう。これらのスポーツでは「シュートを成功させる」という行為には点（＝報酬）が与えられます。しかし、「ゴールの近くでパスを受け取る」という行動はそれ自体に対して点は与えられません。ですが、一連の流れで見ると「ゴールの近くでパスを受け取る」という行為は点に強く結びつく行動であり、高い評価を与えられるべき行動だと考えられます。なのでこういった行動を「ほぼ点が入ったようなもの」とみなして時刻\(t\)におけるQ値を次のように更新してみることにします。 \[ Q(s_{t},a)=Q(s_{t},a)+(r+maxQ(s_{t+1},a')-Q(s_{t},a)) \] なにやらごちゃごちゃと式が増えましたが、やっていることはそこまで複雑ではありません。\(maxQ(s_{t+1},a')\)というのは時刻\(t\)に状態\(s\)で行動\(a\)をとった後に、時刻\(t+1\)においてとれる行動のQ値の最大値を表します。つまりこれまでの報酬に加えて、「高いQ値のある状態に移行すること」そのものを報酬として与えるようにしています。しかしそういった状態に移行しても必ずしもその高いQ値の行動をとれるとは限りませんし、何よりたくさん更新を繰り返していくとQ値が発散してしまうので、割引率\(\gamma (0環境によって報酬や罰が与えられる場合はその行動のQ値がそのまま決まる そうでない場合は移行先の最高Q値を割り引いた値を、その行動のQ値にする 学習開始時はすべてのQ値はランダムに初期化され、だんだんと修正をして学習をする 3. 深層学習とは 3-1 概要 昨今のAIブームは第三次と言われていますが、その火種となったのが深層学習（ディープラーニング、deep learning） という技術です。これは主にもともとあったニューラルネットワーク（神経網、neural network） のパーセプトロン（Perceptron） という手法を発展させたものを指します。ニューラルネットワークは人間の脳にある神経細胞のネットワークをコンピューター上で数学的に再現を試みる、というものです。ニューラルネットワークは特定の入力に対して特定の出力をするという条件を複数同時に満たすことのできる関数を作成できたりします。なのでニューラルネットワークは知能が関数で表現できることを前提にした上で、その知能を神経細胞を模した関数の集合によって再現してみるという試みとも考えられると思います。もし実在する複雑な問題に対しても関数化が完全に可能になれば、いろいろなことができるようになると考えられます。 最近になってから注目を浴びているような印象がありますが、実はニューラルネットワークの歴史自体はとても長く、人工知能研究の歴史の中でも比較的初期段階から研究されていた手法です。しかし近年のコンピューター技術の発展によりニューロン（神経細胞、neuron） の数を容易に増やすことができるようになり、より複雑なネットワークを形成することができるようになったため、ニューラルネットワークの発展的な分野である深層学習等の研究が加速したといえるでしょう。ニューロンの数を増やすだけでなく、そのネットワークの形を工夫する畳み込みニューラルネット（convolutional neural network） などの研究も進んでおり、その最たる例であるGoogleなどの画像認識等の技術には目を見張ります。
3-2 ニューラルネットワークの構造 ニューラルネットワークはニューロンが集合して形成するものなので、まずはニューロンとは何かというところから説明します。 ニューロンはそれぞれの入力に対応する重み（weight） という係数と、しきい値（threshold） という係数をもち、複数の入力に対して計算をした結果を伝達関数（活性化関数、transfer function） に代入して主に単一の出力をします。これを数学的に表すと、 $$o=f(\sum_{i}x_{i}w_{i}-v)$$ $$（o:出力　x:入力　w:重み　v:しきい値　f:伝達関数）$$ となります。すこし分かりにくいですが強化学習の式よりもやっていることは単純です。それぞれの入力の値がどれほど出力に影響されるべきかを決定する重みと入力を掛け合わせたものが\(xw\)です。なので\(\sum_{i}x_{i}w_{i}\)というのは入力に重みをかけたものをすべて足し合わせるということなので、入力から取得できる情報を、何が重要か判断して取捨選択するという側面があります。 その合計値からしきい値を引き、伝達関数に代入したものが出力となります。しきい値には誤差などの比較的小さな情報を無視するようにする効果があります。伝達関数にはいろいろな関数が使用され、それぞれで効果は違いますが、極端に小さな値や極端に大きな値の影響を小さくするといった効果のものがあります。また、誤差逆伝播法（後述）に、この伝達関数の微分が深く関わっているため学習の精度や速度に直結する部分であると言えます。一般的には $$y= \frac {1}{1+e^{-x}}（シグモイド関数）$$ $$y=\left\{\begin{array}{ll}x &amp;amp; (0 \lt x) \\0 &amp;amp; (x \leq 0)\end{array}\right.</description></item><item><title>ゲームのBGMについて</title><link>https://asanobuturi.github.io/document/2021/bgm/</link><pubDate>Thu, 01 Jan 1970 00:00:03 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/bgm/</guid><description>1.はじめに 皆さんこんにちは、中学3年生の{明松 | かがり}です。今年初めてポジトロンの記事を書かせていただくことになりました!!!中2のときにこの記事を書いたのですが、新型コロナウイルスによる文化祭の規模縮小により物理部が部誌を出しませんでした。
さて、本題へ移っていきましょう!僕はゲームをするとき、BGMを気にしてしまうような人です。また、僕が作るゲームのBGMは基本自分で作ります。そんな僕が思ったことをまとめます。
ゲームのBGMを作ってみたい!と思われている方はこの記事を参考にして、僕なんかよりもっとBGMを作られている方やこれを職業とされている方は、へえ、こんなかわいい考え方があるんだなと思いながら読んでください。くれぐれも「あいつ幼稚な考え方だな」と思ったりするのはおやめください。傷つきます。
2.それぞれの種類の音符はどのようなところに使われるか まずはそもそも音符にはどういう種類があるの?という方のために、種類の説明をします。こちらをご覧ください。音符の名前とその記号の対応表です。
音符の種類 全音符 2分音符 4分音符 8分音符 図 その他にも譜点付きや16分音符、32分音符などがありますがそれでは細かい話になってしまうので省きます。気になるという方は調べてみてください。
さて、それぞれの音符についての説明をします。 まず、全音符とは、4拍分音を鳴らしてしまう音符です。あまり主旋律で使われることはありませんが、使われるとしたらどのような場面で使われるのでしょうか？
2分音符とは、2拍分音を鳴らす音符です。こちらもあまり主旋律で使われることはありません。こちらの使いみちも気になりますよね？
4分音符とは、1拍分音を鳴らす音符です。これはよく使われます。しかしBGMのジャンルによっても使われる頻度が異なります。
全音符、2分音符、4分音符だけではのんびりしたBGMしか作れません。そこで活躍するのは8分音符です。8分音符とは、2分の1拍分音を鳴らす音符です。この音符があることでBGMも大きく変わっていきます。
さて、ここまで音符の種類について解説していきました。では、それぞれの種類の音符はどのような種類のBGMを作るのか、見ていきましょう。
まず、全音符が主旋律に使われる場合としては、悲しい曲の偶数小説目や、神秘的な曲の冒頭などがあります。また、低音に使われる場合としては…とはいっても 僕の場合は 低音の部分を作っているときに全音符は乱発するのでまあ「たまに出てくるだろう」と思っとけばよいでしょう…（個人の意見です）
しかし、全音符そのものが使われることは少ないのです。次の図のように、付点2分音符で3拍分演奏しつつ、後ろに1拍分のメロディーを入れる、というもののほうが多いと思いますね。
次に、2分音符が主旋律に使われる場合では、先ほど挙げたように、付点をつけて3拍分演奏されることがあります。 2拍分演奏させる場合としては、悲しい曲や、神秘的な曲の冒頭などがあります。 うん。2分音符はほぼ全音符と同じ役割を果たすのではないでしょうか？ いえ、多くのジャンルの曲の最後や8の倍数小説目の部分に使われることも多くあります。低音のパートにおいては、もうスターと言ってしまえるくらいたくさん出てきます。
また、一番よく使われるであろう4分音符が主旋律に使われる場合としては、かっこいい系のBGMが挙げられます。また、3拍子のものの場合にも使われます。しかしながら4分音符だけで使われる場合は少なく、8分音符と組み合わせて使われることが多いです。4分音符は本当に8分音符との組み合わせが良いのです！例えば、4分音符→8分音符→4分音符→8分音符→…や、8分音符→4分音符→8分音符→4分音符→…などという組み合わせがあります。また、4分音符に付点をつけて1.5拍分音を鳴らす場合もあります。低音に使われる場合では、4分音符がそのまま4拍分並べて使われたり、ほかの音符に交じって出てきたりします。
8分音符が主旋律に使われる場合では、4分音符や16分音符などと並べられて使われることが多いです。あるいは付点のある音符の前や後ろに入ったりしています。8分音符は、低音においても隠れたスターとして大活躍します。8分音符だけで並べられたり、他の音符に混じって使われたり…まあとにかくたくさん使われます。
ここまで僕はめちゃめちゃな説明をしてきたのですが、いかがでしたか？言いたいことは、音符の並べ方としては、単独で使われるときとほかの種類の音符と並べて使われるときとがあるということですね。さて、それでは次の章へ行きましょう。
3.テンポの違いはBGMにどのような影響をもたらすのか さて、テンポの違いとBGMの関係についてみていきましょう。一つだけ皆さんにこの章では覚えていただきたい言葉があります。「BPM」です。これは&amp;quot;Beats Per Minute&amp;quot;の略です。つまり何かというと、1分間に4分音符を休まずにいくつ演奏することができるのか、ということです。例えば、皆さんは楽譜の最初に「♩=83」みたいなものは見たことがありますか？これは、1分間に4分音符を休まずに83回演奏できる、ということなのです。この単位は心拍数にも使われています。
では、テンポ数の具体例を挙げていきましょう。ざっと説明していくと、まず、80BPM前後では「遅い」テンポであり、ゆっくりしているので、落ち着いたような曲、神秘的な曲、悲しい曲などの例が挙げられます。
100BPMは、いわゆる「とても遅くはないが速いとか普通のテンポではない」といった中途半端なリズムであるため、緊迫した場面や、何かを考えさせるような場面のBGMで使うことができます。
120BPM前後の曲の用途はいろいろあります。例えば、かっこいい系の曲、少し落ち着いた曲、少し元気な曲、少し緊迫感のある曲などがあります。なぜ「少し」という表現をたくさん使用したかというと、あまり強い表現ができないからです。120BPM以外のテンポで強い表現をすることができます。でも一番使い道が多いのはこの120BPMなんですけどね。
そして150BPM前後は「速い」リズムであるため、とても激しい音楽に使われます。ここに低音などをたくさん入れると工夫次第では120BPMくらい、またはそれよりもかっこいい音楽を作ることができます。
また170BPMは「更に速い」ことから、更に激しい雰囲気になります。
使い道は結構少ないですが応用として、ゲームのワンシーン内でも雰囲気の起伏が激しいときには、テンポを途中で変えるものもあります。これを見て「ボス戦のBGMとかのことじゃない？」などと思った方もいらっしゃると思います。確かにボス戦が「雰囲気の起伏が激しい」の典型的な例と言えるでしょう。
このように、テンポの違いもBGMの雰囲気を変え、様々な使い方ができるのです。
むしろ、ゲームの雰囲気に合わせたBGMを作る際、まずはそのシーンにあったテンポとは何かを考えることが重要となってくると僕は考えます。
4.BGMに声は入れるべきなのか さて、ここからはレベルを少し上げます。基本的な音楽の構成要素について見ていったのですが、ここでBGMに歌詞は要るのかということを考察します。本来BGMには歌詞がないのが普通なのですが、歌詞を入れるか否かでだいぶ奥が深くなります。
声の入れ方にはどのようなパターンがあるのか見ていきます。
よくある普通の歌みたいに歌詞のようなものを入れる 「アー」「オー」などの単母音の声を入れる 意味不明な(文字起こし不可能な)歌詞を入れる 1単語や短い文章など、1つのフレーズをある場所に入れる サビだけに歌詞を入れる サビにだけ歌詞を入れない ほとんど声だけ などいろいろあります。パターンを挙げたらきりがありませんね。このように、歌詞に声を入れるというのは奥が深いものなのです。</description></item><item><title>プラレールの改造について</title><link>https://asanobuturi.github.io/document/2022/plarail/</link><pubDate>Thu, 01 Jan 1970 00:00:03 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/plarail/</guid><description>はじめに 物理部の中3の電工班です。今回が初めての部誌となっています。今回は、文化祭で展示する作品の説明的なものを書かせていただきます。
始めたきっかけ 部活の先輩から譲り受け、引き継ぎました。その時はラズパイ内蔵でライトが光り、モーターが回っていましたが、レールの上は走っていませんでした。 先代ではラズベリーパイを使用していましたが大きすぎて、配線の都合で何故か起動もしなくなったのでArduinoというマイコンを使用しました。 しかし、ArduinoにはWi-Fi機能がないため基本外部との通信ができませんでした。そのため、下に書いた通り、赤外線信号を使用することにしました。
全体像 この改造では、PC、ArduinoMega、ArduinoUnoとその他諸々の部品を使いました。使用部品のすべては下に書いてあります。この3台の通信の関係は以下のようになります。
赤外線通信や、シリアル通信については後ほど説明します。
今回の改造での使用部品 今回使用した部品です
プラレール Arduino Nano 1台 トランジスタ 2SC2120-Y 1台 LED4本と抵抗器4つ(前と後ろのLED) 9V型電池1つ 配線用の線と基盤 必要数 信号装置側 Arduino mega1台とそこに取り付ける自作シールド 信号装置ユニット(LED3つと照度センサー) 4組 専用線路(信号装置ユニットを取り付け、CdSセル各1つ) 4台 液晶モジュール 1602A 1台 ブレッドボード ジャンパピン 必要なだけ その他配線用導線 必要なだけ そもそもArduinoとは Arduinoとは、マイコンの一種であり、デジタル入出力、アナログ入力、アナログ出力(PWM(パルス幅変調)を使ったデジタル出力)、USBを使ったシリアル通信などに対応しています。下の画像はArduinoの中でも一番有名なArduino Unoです。(Arduinoの画像3つはArduino公式ストアからです。)
しかし、これではプラレール本体に積み込むのには大きすぎます。そのため、今回プラレールの中に入れたのは下のArduinoNanoです。
こちらはUnoよりも小さいのですが、機能はほとんど変わらないので、便利です。しかし、部活には、Nanoの正規品がなかったので、ほぼ仕様が変わらない互換品を使用しました。 また、信号装置側では、信号ユニット4台、液晶モジュール1台、赤外線送信線1本、その他諸々をつなぎたいのですが、UnoやNanoにはデジタルピンが13本(正確には、アナログピンもデジタルピン扱いできるので、実質、18本ですが、ここでは面倒ですので割愛します。)しかないので、足りなくなりました。そのため、ピン数が、53本(デジタルピンのみでは)ある、ArduinoMegaを使いました。
赤外線通信とは 今回は、信号装置からプラレールへの送信のために使用しました。赤外線通信とは目には見えない赤外線を高速で点滅させることにより、データを送信することです。それをArduinoでやろうとすると、高速に赤外線LEDを点滅させる必要があるうえ、他のプログラムとの同時実行を行う必要があり難易度が高いため、専用ライブラリを使用しました。それが、IRremoteという赤外線通信用のライブラリです。これを使用することで赤外線信号を簡単に入出力できます。IRremoteは参考にしたサイトに合わせてバージョン2.8.1を使用しています。このライブラリでは、赤外線の受信、送信が可能で赤外線信号を16進数32ビットで管理していて容易に通信を行えます。
シリアル通信について この改造ではPCとArduinoMegaとの接続に使用しました。厳密にいうと、シリアル通信をUSBに変換していますが、シリアル通信と同様に使用できます。ArduinoMegaでは、パソコンから送られてきた速度情報を赤外線信号にして、ArduinoUnoに渡す役割と、パソコンに自作した線路上のセンサーを使って取得した車両の位置を送信しています。シリアル通信については詳しくはこちら
を参考にしてほしいのですが、簡単に言うと、一本の信号線で電圧の強弱をもとにデータを送る方法です。
https://qiita.com/hsgucci/items/eee5894e3651d0a8cb75から引用。パラレル通信については後ほど解説
ここでシリアル通信でArduinoMegaと接続しているPC側の説明をします。こちらは、Arduinoで使用しているC++(厳密にはArduinoではC++の拡張言語を使用)とは全然違うHTML+CSS+JavaScriptで操作しています。理由は、単純にJavaScriptのほうが環境構築が楽だったからです。webブラウザでも、chrome89から使用可能になったWebSerial APIを使うことでシリアル通信ができるので(詳しくは長くなるので説明しませんが、こちらを参考してください)これを使用してシリアル通信を行っています。
液晶モジュールについて 今回使用した液晶モジュールは1602Aという型番のものです。 これをArduinoで制御するにはパラレル通信か、シリアル通信での接続が必要ですが、シリアル通信に必要な専用の変換基板がなかったのでパラレル通信にしました。シリアル通信は前述したとおりですが、パラレル通信は、複数の線で制御するしくみです。
パラレル通信によって液晶モジュールにたくさんArduinoのピンが取られてしまいましたが、ArduinoMegaにしたので問題はありませんでした。 液晶モジュールをArduinoで制御するには信号線4本(か8本)を制御する必要がありますが、難しいので、ここで配布されている専用のライブラリを使用しました。 このライブラリは最初に設定(ライブラリを読み込み後、LiquidCrystal(rs, rw, enable, d0, d1, d2, d3, d4, d5, d6, d7);)をすれば、あとは対応する文字をそのまま関数の引数に書く(必要ならカーソル移動後に lcd.</description></item><item><title>Stable Diffusionをインストールしてお絵かきする</title><link>https://asanobuturi.github.io/document/2022/oekaki/</link><pubDate>Thu, 01 Jan 1970 00:00:02 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/oekaki/</guid><description>はじめに 物理部中２のPC班員です。中３から部誌を書こうと思っていましたが、ちょうどいいネタが転がり込んできたので書くことにしました。
使うライブラリのインストール 今回使うStable Diffusionは最近オープンソース化され、商用利用も可能という素晴らしいライブラリです。 PCの推奨スペックはVRAM10G以上のnvidiaのGPUで、今回はRTX3060というGPUを使っていきます。
リポジトリにアクセスするためのトークンを作る まずここにアクセスして右上のSign Upからアカウントを作成し、次にここにアクセスしてAccess repositoryをクリックした後、サイト右上のアカウントアイコンをクリックしてSettingsから左のAccess Tokensからトークンを作成する。このトークンが後で必要になるのでメモしておく。
必要なソフトとライブラリ Python まずは今回のコードを書くためにプログラミング言語のPythonをインストールする。 Python公式サイトからpythonのインストーラーをダウンロードしてインストールする。インストール時にPythonをパスに追加するオプションを選択するのを忘れずに。
{width=400}
ドライバ {width=400}
今回はAIの演算にCUDAというnvidia製のグラフィックボードについているものを使うので、ここからドライバを手に入れてインストールする。
CUDA Toolkit ここからダウンロードしてインストールする。 そしてコマンドプロンプトでnvcc -Vを実行して正常にインストールされているかを確認する。 このときreleaseの後にある数字をメモしておく。
cuDNN ここからダウンロードして解凍したbinフォルダにパスを通す。 この時、ダウンロードにnvidiaデベロッパーアカウントが必要なので作成する。
PyTorch ここからPyTorchをインストールするためのコマンドを生成する。
PyTorch Build: Stable Your OS:使用しているコンピュータのOSを選択 Package:Pip Language:Python Compute Platform:先ほどメモしたReleaseの数字に合うものを選択 その後、生成されたコマンド(Run this Commandにある文字列)を実行してPyTorchをインストールする。 インストール後、以下のコマンドでPyTorchからGPUが使用可能かを試す。Trueになれば使用可能。 PS C:\Users\hoge&amp;gt; python Python 3.10.6 (tags/v3.10.6:9c7b4bd, Aug 1 2022, 21:53:49) [MSC v.1932 64 bit (AMD64)] on win32 Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information.</description></item><item><title>バーゼル級数を用いた円周率の計算</title><link>https://asanobuturi.github.io/document/2021/basel/</link><pubDate>Thu, 01 Jan 1970 00:00:02 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/basel/</guid><description>バーゼル級数とは
\[\sum_{k=1}^{\infty}\frac{1}{k^2}=1+\frac{1}{4}+\frac{1}{9}+\cdots=\frac{\pi^2}{6}\]
これがバーゼル級数です。今回はこの級数を利用して円周率を計算していこうと思います。また、プログラミングに疎い人でも楽しめるように表現を曖昧にしていたり多少ずれていることがあります。
Pythonでの計算
今回はプログラミング言語にPythonという言語を選択しました。
Pythonは文法が比較的簡単でわかりやすく、優れたツールの豊富さが魅力の言語です(もちろん文法が比較的に簡単といえどもしっかり理解しようと思うととても時間がかかります)。
デメリットとしては、仕様上比較的実行に時間が掛かり、用途によっては向かないことなどが挙げられます。
Pythonの実行環境
Python 3.8.2 64bit
ソースコード
方法としては左辺を計算しそれを6倍して√を取るのですが、\(\frac{1}{k^2}\)を\(k = 1\)から無限に足し続けることは不可能なので、今回は\(k = 100, 000, 000\)まで足し続けたいと思います。
from math import *
#桁の多い小数を正確に扱うためのツールを利用する
from decimal import *
if __name__ == "__main__":
#変数sumを定義
sum=Decimal(0)
#k=1からk=100000000まで
for i in range(100000000):
#1/k^2を計算してsumに加える
sum += Decimal(1)/((Decimal(i)+Decimal(1))**2)
#級数の左辺の結果を6倍し√をとる
pi = Decimal(sum*6).sqrt()
#結果を表示
print(pi)
実行結果
3.141592644040496686182218894
これだけではどれだけ正確に計算できているのか分かりづらいので、合っている桁に色を付けてみたいと思います。
from math import *
#桁の多い小数を正確に扱うためのツールを利用する
from decimal import *
if __name__=="</description></item><item><title>部長挨拶</title><link>https://asanobuturi.github.io/document/2021/intro/</link><pubDate>Thu, 01 Jan 1970 00:00:01 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/intro/</guid><description>「ついにこの文章を書く年になってしまいました。」
二年前に部活を卒業した先輩が遺した言葉です。この頃はこんな言葉とも無縁で、今まで通りの日常、そして部活動がずっと続くとばかり思っていました。
ですがどうでしょう。この有様です。これで部活動が今まで通りにできるわけでもなく、特に夏休みの活動は活動時間も、活動日も半分以下になってしまいました。一年を通しても大きな比重を占める夏休みの時間が削られるわけですから、文化祭の準備もおろそかに…いや、それでも最善は尽くせたと考えましょう。今ある時間でできることを着実にやるしかありません。普段何かと理由を付けて作業をしない後輩にも聞かせてやりたいぐらいです。
さて、今年の文化祭ですが、いくつか変えてみたところがあります。一番目に付くのは部屋の配置でしょう。今まではPC班と電工班で一部屋ずつ分けて展示をしていたのですが、今年はあえてPC班と電工班を混ぜて展示してみました。というのも、電工班での滞在時間がPC班と比べ短いので、そこを平均化してより多くの展示に触れて欲しいのもありますし、電工班員があまりに少なく一部屋に展示できるだけの作品を用意できないというのもあります。後者が大きいのでしょうか、電工班をずっと引っ張ってきた身としては悲しい話です。
また、数年前から始まった壁新聞も今年は大判プリンターで印刷することになりました。今までは模造紙に油性ペンで手書きしていて、これがかなり時間を喰うのです。そこで去年は家庭用のプリンターで、A4の紙に分割して印刷することにしてみました。とはいえこれでもA4の紙を繋ぎ合わせる手間が掛かります。そこで実行委員から大判プリンターが使えるという話を聞いたのです。これはもうやるしかないでしょう。
あとは参加団体名ですかね。「物理部展 # 2021」ではなく「物理部展 丼 」です。丼 です。きっかけは2018年の「物理部展#2018」でした。当時の部長がふざけて（本人は大真面目だったのかも？）&amp;quot;#&amp;ldquo;の真ん中に点を打って丼にしてしまったのです。しかしその時は文化祭の実行委員に気づかれずそのまま&amp;rdquo;#&amp;ldquo;になったのですが、以降&amp;rdquo;#&amp;ldquo;の真ん中に点を打って#か丼か紛らわしいようにして、その年の実行委員を試すということをずっとやっていたのです。
そうしたら今年、なんと実行委員が初めてこれを丼とみなしてしまって、晴れて今年の展示名が「物理部展丼2021」となったのです。こんなことってあるんですね、という感想しかありませんが。
そして部長としての二年間を振り返ってみて、思えば先輩からの「続投は部活が崩壊するからやめとけ」という制止も振り切って二年目も部長のポストに居座ったわけですが、やはり自分の裁量で物事を進められるのは気が楽です。何をやるにも報告、連絡、相談なのは面倒で仕方がありません。そういう性格なんです。（後輩がそうしないのは困りますけど）
ただ学校側に提出する書類などは全部管理しないといけませんし、そういう面倒さはあったのでしょうか。ただ面倒なら後輩に任せればいいので、特に気になりませんでしたね。
あとは後輩はまだしも、一部は先生や友達からも「部長」と呼ばれるようになりました。部長に就任したての頃はある種の高揚感すら感じたのですが、今は何とも思わなくなってしまいました。文化祭が終わって部活を引退したらどうなるんでしょうか。「元部長」なんでしょうか。そろそろ名前で呼んで欲しいんですけど…。
関係ないことまで色々書いてしまいましたが、最後に挨拶だけ。物理部展丼2021にお越しいただきありがとうございました。今年は（今年も？）準備期間も短くお見苦しい点もあるかもしれませんが、そこは後輩に期待しましょう。ぜひ来年もお越しください。</description></item><item><title>部長挨拶</title><link>https://asanobuturi.github.io/document/2022/intro/</link><pubDate>Thu, 01 Jan 1970 00:00:01 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/intro/</guid><description>今回はご多用の中物理部の展示にお越しくださいましてありがとうございました。 ここ数年の間で今年がはじめてまともに文化祭を開催できる年になったのではと思います。2019年度は打越祭2日前に京急線でのトラック衝突事故が発生。2020年度はコロナウイルスの影響で校内関係者のみ、2021年度は生徒による招待者のみの来場となりました。また2021年度は上記に加え2日目にJRの変電所火災により京浜東北線が運転見合わせとなるということもありました。最高学年である私たちの学年にとって(語弊があるかもしれませんが）まともに文化祭が開催されたのは2018年度、中学1年生だった時のみです。これが何を意味するのか。それは物理部の大半は「通常の」文化祭を運営側として経験したことがないのです。 そのため手探りでなにかと不手際があるかもしれませんが、温かい目で見ていただけたのであれば幸いです。</description></item><item><title>部長挨拶</title><link>https://asanobuturi.github.io/document/2019/intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/intro/</guid><description/></item></channel></rss>