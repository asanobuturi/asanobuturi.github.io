<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2018年度・部誌 on 浅野学園物理部</title><link>https://asanobuturi.github.io/document/2018/</link><description>Recent content in 2018年度・部誌 on 浅野学園物理部</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Thu, 01 Jan 1970 00:33:38 +0000</lastBuildDate><atom:link href="https://asanobuturi.github.io/document/2018/index.xml" rel="self" type="application/rss+xml"/><item><title>編集部後記</title><link>https://asanobuturi.github.io/document/2018/edit/</link><pubDate>Thu, 01 Jan 1970 00:00:16 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/edit/</guid><description/></item><item><title>電子工作や、物理のお話など総集編</title><link>https://asanobuturi.github.io/document/2018/physics/</link><pubDate>Thu, 01 Jan 1970 00:00:15 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/physics/</guid><description>工事中...</description></item><item><title>素数の探し方</title><link>https://asanobuturi.github.io/document/2018/prime/</link><pubDate>Thu, 01 Jan 1970 00:00:14 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/prime/</guid><description>はじめに 素数と聞いて、「2,3,5,7,11…のことだよね」と分かった人も多いと思いますが、では、現在までに見つかっている最も大きな素数はご存知ですか？じつは、その素数は2千万桁以上にもなります。どうやってその数が素数であることがわかったのか、考えてみるとふしぎではありませんか？2千万桁の数を2からひとつずつ割っていくわけにもいかないし。ということで、ここでは素数の判定方法などをまとめてみました。なお、この文章での「現在」とは2018年7月14日のことです。
素数とは \(2,3,5,7,11,13,17,19,23,29,31\cdots\)というような数のことです。 素数の定義は色々ありますが、簡単に言うと「その個数のおはじきを長方形に並べることができない数。ただし1列に並べるのは除く」と言えると思います。
素数の記録 2017年12月26日、現在までに見つかっている素数の中で一番大きな素数の\(2^{77232917}-1\)が発見されました。これは23249425桁の素数で、１ページびっしりに印刷しても719ページの本になります。（実際にAmazonで売られていたり…） このような素数の記録は「The Prime Pages」(http://primes.utm.edu/)で管理されています。
素数の種類 素数と言っても、ただのランダムな素数や、きれいな数式で表される素数、ある数列の中に出てくる素数など様々な種類があります。といっても整数の種類はたくさんあるのでここで紹介するのはほんの一部です。 メルセンヌ素数 (Mersenne Prime) \(2^n-1\) 先ほどの\(2^{77232917}-1\)がその例です。現在50個のメルセンヌ素数が発見されています。また、現在発見されている素数の大きい方から10個のうち、9個がメルセンヌ素数です。n=2,3,5,7,13,17,19,31,61,89の時などがメルセンヌ素数です。 フェルマー素数 (Fermat Prime) \(2^{2^n}+1\) nが少し大きくなるだけで\(2^{2^n}+1\) は大きくなってしまうので、探すのが大変な素数の一つです。 nが32のとき（1292913986桁）までは素数かどうかが分かっていて、そのうちnが0,1,2,3,4のときのみが素数です。nが4よりも大きいとき素数になるかどうかはわかっていないのですが、初めの5個だけ素数で、そのあとには素数がまだ見つかっていないっていうのはちょっと不思議な感じがします。 プロス素数 (Proth Prime) \(k\cdot2^n+1(2^n&amp;gt;k)\) メルセンヌ素数のところで、現在発見されている素数の大きい方から10個のうち9個がメルセンヌ素数だと書きましたが、その残りの1個がこのプロス素数の \(10223\cdot 2^{31172165}+1\)です。 双子素数 (Twin Primes) 隣り合っている2つの奇数（pとp+2）の両方が素数である数です。 現在見つかっている中で最大の双子素数は、2016年9月に発見された \(2996863034895\cdot 21290000 \pm 1\)（388342桁）です。 階乗素数 (Factorial Primes) \(n!+1,n!-1\) 一瞬、この数はnまでは割れないので、全てが素数なように見えますが実は少なく、 \(n!-1\) は27個、 \(n!+1\) は22個しか見つかっていません。現在見つかっている最大の階乗素数は、2016年7月に発見された\(208003!-1\)（1015843桁）です。 2018/7/14現在 \(n=250823\) まで探索が終了しています。 (http://prpnet.primegrid.com:12002/server_stats.html) 素数階乗素数 (Primorial Primes) \(n\#+1,n\#-1\) 2から順にnまでの素数をすべてかけた数を \(n\#\) と表します。 この数も、見た目よりはるかに素数になりにくく、 \(n\#-1\) は20個、 \(n!+1\) は22個しか見つかっていません。現在見つかっている最大の素数階乗素数は、2012年3月に発見された \(1098133\#-1\) （476311桁）です。 2018/7/14現在 \(n=2550167\) まで探索が終了しています。 (http://prpnet.</description></item><item><title>「AMD反撃！シェアを犯されるIntel」</title><link>https://asanobuturi.github.io/document/2018/cpu/</link><pubDate>Thu, 01 Jan 1970 00:00:13 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/cpu/</guid><description>どうも、二回目ですが中二の鈴木です。それだけですが...
ここ最近CPU市場はCoffee lakeやZen+に沸いていますね。今後もIntelの8コアや7nm Zenが楽しみですね。ここでは、以前のIntelのSandy Bridgeベースのプロセッサや、AMDのBulldozerベースのプロセッサとは違うZenベースコアの仕組みについて解説します。
Zenアーキテクチャは何が違うのか そもそもZenとは、AMDがCore iでIntelにシェアを奪われる中2012年に開発が始まったアーキテクチャだ。Zenの開発にはかの有名な天才開発者、ジム・ケラーが関わっており、AMDにとってはBulldozer以来のアーキテクチャの更新となった。ZenベースのCPUは競合するCore i系のプロセッサより多コア、低価格なことが一般的に言われている。まずもってそれはどうしてなのか、という話である。
回路構成の効率化 ZenアーキテクチャはIntelの競合する価格帯の製品よりダイサイズが小さい。半導体を製造する上でダイサイズは非常に重要で、歩留まりにも大きく関わってくるのだから小さければ小さいほど良いのだ。
「ロードマップでわかる！当世プロセッサー事情」では、「そもそも昨今では、14nmプロセスと言いつつも、実際には14nmの寸法になっている部分は1つもない。その代わりにFin Pitch(プレナー型トランジスタの場合はTransistor Pitchなどとも呼ぶ)とCPPを使ってプロセスの大きさを判断することが普通だ。
これに関しては以下の経験則(ASML Formula：ASML の法則)がある。
\[ ノードサイズ = 0.14 × ({CPHP} × {MMHP})^{0.67} \]
CPHPはCPPの半分、MMHPはFinPitchの半分をそれぞれ示す値で、上の数字を使うとRyzen(GlobalFoundriesの14LPP)は13.70nm、Skylake(インテルの 14nm)は11.66nm相当になる。^1」と分析している。 プロセスの微細化という面ではIntelの方が攻めた構成を採用しており、AMDの方が微細化のみで見ればIntelよりダイサイズが大きくなるはずである。理由はどういうことか、それは、アーキテクチャの更新で不要な回路を設計段階で省き（Intelのメインストリーム用途プロセッサではハイエンドデスクトップ用途やサーバー用途のCPUで必要な回路を無効化して居る場合が多い）、同じ回路でもダイサイズを小さくすることを成功させているのだ。こうした効率化で低価格化を実現しているのだと推測する。Zenアーキテクチャの欠点として、コア間レイテンシが挙げられるが、実測値でそこまで処理速度に悪影響を与えているのではないとされている。また、シングルコア性能の低さも挙げられるがそれは今後のアーキテクチャの改良によって改善されていくことだろう。実際、Ryzen1000シリーズより2000シリーズでは微増とはいえシングルコア性能が改善している。Zen2にも期待だ。個人的にはこのBulldozerの失敗を生かしコンピューターでの開発に頼ることなく、人の手で設計したのも大きいと感じている。実際、Bulldozerはアーキテクチャとしての出来上がりは微妙な物だった。また、近年のアーキテクチャの微細化、効率化でダイサイズは組み込み用途で利用されるアーキテクチャの大きさに近づいている。微細化で製造コストが上がったのも一つ理由だが、わざわざ開発リソースを割き組み込み用とのアーキテクチャを開発するより、メインストリーム用途のアーキテクチャをそのまま組み込み用途にも利用できた方が得策と判断したのだろう。Zenアーキテクチャの消費電力を考えれば十分可能な話だ。
Zen発表を受けてからのIntelの対応 一方で、Ryzenで反撃されたIntelも黙ってみているわけではない。元々Ryzen 1000シリーズ(Summit Ridgeと呼ばれる)が出るまではハイエンドデスクトップ用途は Core i7 68xx,69xx(Broadwell-Eと呼ばれる)で対応していたのが、Ryzen 7 1800Xは Core i7 6900Kレベルと宣伝されてしまったが為にいくらかシェアをAMDに奪われてしまった。実際、IntelはAMDがRyzenの販売前に製品のレベルが低いと自作でも、メーカーでも採用する例が減ってしまったが為にIntelのシェアが増え、Intelの独占状態が続きIntelも価格をつり上げていた状態があり、AMD はうまいことその点を突いたのだ。筆者も自作機を組む予定で最初はCore i7 6850Kを使う予定で居たのがRyzen発表でRyzen 7 1800Xで組むことにしたのだ。1年半経った今ではCoffee lakeやPinnacle Ridgeといったより優れた製品が市場に送り出されているが、当時としたらたいそう驚いた物であったことを記憶している。並列処理については依然強いので例えばゲーム 2 つ、ブラウザ、動画再生なんてことも楽々出来ている。Intelは対抗製品としてSky lake-XやKaby lake-Xを発表し、それがIntel特有の高い消費電力と、何しろ今まで消費者を舐めきっていたのかと思わせるほどのプライスダウンだった。結果。Intelと AMDの価格競争構図が生まれRyzenを買わないユーザーでも恩恵を受けたのは大きいと感じている。今後もこの競争には注目できる。
今後のプロセス微細化の展望 話が変わるが、今度はプロセスルールの微細化の話だ。現在半導体メーカー各社はプロセスの微細化を続けており、現在は16nm(NVIDIA)、14nm(Intel)、12nm(AMD)程度まで微細化が進んでいる。この微細化競争の背景にあるのは「ムーアの法則」と呼ばれる経験則が根底にある。（よくムーアの法則は物理法則と誤解されることがあるが、ムーアの法則は集積回路上の部品辺りのコストが最小になるような回路の複雑さを定義した経験則に基づいた将来予測であり、誤解してはならない）しかし今日「ムーアの法則は終わった」と言われることがあるが、それはどういうことなのだろうか。
これまでのIntelの微細化 Intelは元々ムーアの法則に基づき、Broadwellで22nmから14nmへ微細化させ、Sky lakeでそれを最適化した回路を構成し、Cannon lakeで10nmに微細化し、Ice lakeで最適化、Tiger lakeで...俗に言うIntel Tick-Tockである。
10nmで製造された製品は果たして発表されるのか Sky lakeまでは何とかIntel Tick-Tockを維持させてきた（厳密に言えばBroadwellもかなりずれ込んで一回Haswell-Refreshを挟んでいる）が、Sky lakeの先、Cannon lake、もとい10nmの開発が遅れたことや 14nm の設備投資の回収が進んでいないことから 2016(2017)年の新製品はKaby lakeで 14nm+として出荷されることになった。おまたせ。と Intel が出してきた次期プロセッサは.</description></item><item><title>「コイルの用法！コイルガンの逆襲」</title><link>https://asanobuturi.github.io/document/2018/coilgun/</link><pubDate>Thu, 01 Jan 1970 00:00:12 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/coilgun/</guid><description>こんにちは。中二の鈴木です。今回の物理部展ではコイルガンを出展しましたが、それと関連しコイルの原理を物理的な観点から説明し、その応用としてコイルガンの解説をします。難解な語句も頻出しますが、そこは注訳を参考にして読み進めて頂けると幸いです。
コイルとは何か そもそもコイルとは何か？コイルとは紐状の物を渦巻き状、らせん状に巻いた物をそう呼ぶ。コイルはバネとして利用する時、圧縮コイルの場合は圧縮すると自己の弾性力で抵抗する力が、引張コイルの場合も引っ張ると自己の弾性力で抵抗する力が生まれる。コイルばねは荷重に比例して弾性力も増加し、なおかつ生産が安価で可能な為幅広い分野で利用されている。一昔前までは乗り物等にも客室の動揺を低減するために利用されていた。（今は空気ばねが主流だが...）
電磁石としての利用 電磁石として利用する場合、導体に電流を流すと僅かな磁力が発生するが、その力をコイルとして巻かれた導体で発生させる。すると纏まった磁力、要は磁性体を近づけると反応したりするような強さの力になる。これは巻き数を増やせば増やすほど増大する（注:これは導線が電気抵抗のない理想的な状態でのことであって、実際には巻き数を増やすと電気抵抗が増大するため電流が減り、実際の磁力が単純に増えていく訳ではない）。
電磁石の利用法としては、主にモーター、リレー（継電器とも呼ぶ）、ソレノイド等が一般的に挙げられる。あまり一般的ではないが、ここでは電磁石の利用法としてコイルガンを解説することにしよう。
コイルガンとは何か コイルガンとはその名の通りコイルの磁力で弾丸を加速させ、対象物に発射するものである。中空状のコイルに磁性体の弾丸を押し込み、同時に電流を流すと、コイルが磁気を帯びるため弾丸は中央方向に吸引される。しかし、そのままでいると弾丸が中央で留まってしまい、弾丸を発射することは出来ない。そこで、弾丸が中央付近まで吸引されたと同時に電流を切り、そのまま惰性で発射してしまうのだ。この仕組みを実現するために主に大容量、高耐電圧のコンデンサーを半導体スイッチで一瞬だけ電流を流す。機械的なスイッチでは損失が大きく、また大電流で接点部分が溶着してしまうことも考えられるためこのような大電流を扱う分野で利用することは少なくなっている。
コイルガンの効率の低さと、その解決法 この単純なコイルガンでの効率は 5%程度しか出せない。理由としては主にコイルの磁力不足、コイルの電気抵抗による損失、コイルと弾丸との距離やデンサーの通電時間とコイルの長さが合わず、弾丸が引き戻されてしまうことが挙げられる。
コイルの巻き数を増やす コイルの磁力不足の場合、コイルの巻き数を増やすと磁力が増し、その分弾丸を吸引する力は増大する。しかし、その場合電気抵抗が増大し損失が増え、また通電時間が長くなりコイルの長さを調整しないと弾丸が中央を越えても通電し続け弾丸が引き戻されてしまう欠点がある。
弾丸を誘導しコイルを巻くパイプを薄いものにする パイプを薄いものにすれば、その分弾丸に働く磁力は増大するが、パイプの強度が下がりコイル巻きの途中や使用中に折れてしまう危険がある。そこで薄く、丈夫なアルミパイプを使うと強度は上がるが渦電流が流れ効率が下がる原因になる。渦電流とは、伝導体を磁場内で動かしたりして生ずる渦状の誘導電流である。これが物体の運動を妨げる力として働いてしまい、コイルガンにとってはやっかいなものだ。極端な話モーターの鉄芯と同様にケイ素鋼板を積層させたものを使う等の対策をすれば良いのだが、それを個人レベルでやるのはほぼ無理であるため、大抵はアクリル等のプラスチック製パイプを利用する。アクリルだからと言って、弾丸の動きは速すぎて見ることも出来ないことは断っておこう。
コイルの抵抗を減らして通電時間を短くする コイルの電気抵抗を減らすとそもそもの電気抵抗による損失が減り、その影響で電流が増大し結果的に通電時間も短くなる。しかし、一般的にコイルに利用されるエナメル線の導体は銅。これ以上電気抵抗を減ずるには金か銀を利用するしかないが、当然高価すぎるので無理な話である。導体断面積を大きくすれば電気抵抗は減るが、巻き数が減るため磁力も減る。超伝導を使うなんて夢のまた夢だ。
コイルをコンデンサーの容量、電圧に合った長さにする コイルの長さを調整すれば、通電時間が長すぎてコイルが引き戻されることは避けられる。それが一番確実である。
コイルとコンデンサーの回路を増やし多段式とする また、多段式とすると一つ一つのコンデンサーを小容量化しても威力を確保することが可能になり、総じて制作価格を低減させられる。さながら一つのコイルガンで加速した弾丸を次のコイルガンで加速しているようである。しかし、二段目以降のコイルは電流を流すタイミングが重要になり、タイミングを誤ればかえって効率を低下させる原因にもなりかねない。対策としては、タイマー回路やマイコン制御で通電間隔を調整する、或いは赤外線ダイオードとフォトトランジスタで弾丸を検出することが考えられる。しかし前者は調整がとても面倒で、後者は赤外線の扱いの難しさがある。
コンデンサーを効率良く利用するための工夫 コンデンサーの容量は静電容量×電圧²で、電圧が高い方がより多くのエネルギーをためることが出来る。その高電圧を得るため大抵のコイルガンでは昇圧回路を挟み、250~400V程度に昇圧してからコンデンサーに電力をためる。昇圧回路には昇圧チョッパ回路が利用される昇圧チョッパ回路は直流電源とインダクタ、またインダクタ～GND方面と負荷の方面で切り替えられるスイッチで構成される。実際はそのような機械的なスイッチは損失が大きいため片方で半導体スイッチによりOn/Offを制御し、もう片方はダイオードで逆流を防ぐ。スイッチがOnの時、電源～インダクタ～GND が導通しインダクタに電流が蓄えられる。スイッチをOffにすると電源～インダクタ～負荷～GNDが導通するが、インダクタに蓄えられた電流はすぐに無くなることがないので、ダイオードを介して高圧側に注入される。これで昇圧回路が成立する。
このように、一通りコイルガンの仕組みについて解説してみた。まだ経験の浅いこともあり違和感のある説明になってしまったかもしれないが...
参考にさせていただいたサイト EML 制作記録(仮)『コイルガンの作り方というか考察』 http://emllaboratory.blog.fc2.com/blog-entry-9.html 多段式コイルガン『多段式コイルガンの仕組み』 http://yorozulab.web.fc2.com/msc/mscoil.html Energy Chord『昇圧チョッパ回路の原理イメージ』 http://energychord.com/children/energy/pe/dcdc/contents/dcdc_boost_intro.html</description></item><item><title>電気学の発展</title><link>https://asanobuturi.github.io/document/2018/electronics/</link><pubDate>Thu, 01 Jan 1970 00:00:11 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/electronics/</guid><description>突然ですが皆さん、勉強などの、作業の間の息抜き、きちんとできていますか?この部誌では他の人が物理のことについて真面目に述べているので、この記事はその息抜き的な記事にしようと思って書いています。ということで僕たち、電子工作班員達の活動の基礎の基礎となっている、電気学の発展の概観を見ていきたいと思う。
〜静電気蓄電池 ライデン瓶～ 1746年、オランダのピーテルがライデン大学で静電気を貯める「ライデン瓶」を発明した。ライデン瓶はガラス瓶(絶縁の要素)の内側と外側を金属(主に鉛)でコーティングし、内側のコーティングは金属製の鎖を通して終端が金属球となっているロッドに接続されているつくりになっており、瓶の上の球に電圧加えることによってガラスによって絶縁された導体の表面に電気が溜められるのである。溜まった電気は静電気であるが、このライデン瓶の発明によって、人々が静電気を蓄えられるようになったのである。
〜電池の発明 ガルバーニとボルタ〜 1799年にイタリアの物理学者、ボルタが電池を発明した。そして、そのきっかけは1791年のガルバーニが発表した動物電気の研究に遡る。ガルバーニは解剖されたカエルを使って実験物の両端がカエルに当たったところカエルが痙攣を起こしたかのように動き足したのである。これを発見したガルバーニはこれを動物から生み出された「動物電気」と言って論文にし、発表した。しかし実はこの動物電気、動物から生み出された電気ではなかったのである。二種類の金属が湿った物に触れた際に生じた電圧の差が原因であったのだ。そしてカエルの痙攣はただの検電の動きにしか過ぎなかったのである。
そこで、ボルタは銅と亜鉛を用いて電池を発明した。この発明は強い電流を安定して長時間供給することができるようにし、今まで未開拓な領域に留まっていた電気の研究を急速に発展させていくことになる。
〜センスの塊 マイケル・ファラデー〜 ここで、電磁気学の礎を築いた人たちの内の一人である、イギリスの科学者、マイケル・ファラデーである。少しファラデーの生い立ちと、前半生を見てみよう。ファラデーが生まれた家庭は、あまり裕福な家庭ではなく、高等な教育を受けておらず、数学の知識を身に着けていなかった14歳の時から、製本業に就いていた。ファラデーが製本業に就いたのはとても偶然なことであったが、この偶然がファラデーの人生と、科学の歴史を大きく変えることになるのである。
ファラデーは仕事の合間を縫って製本を依頼された本を読んだのである。特に電気と化学の分野に興味を持った。そして、このこともまた、一つの偶然であった。なぜなら、電気と化学の分野はそのころまだ発展途上であって、力学のように、理論で完全に一般化された分野とは違い、未開拓の分野であり、高等教育を受けていなく数学がまったくと言ってもいいほどできないが、実験のセンスに優れているファラデーが活躍できる余地が少なくなかったのだ。ファラデーの勉強の意欲に火がつき、なんとかして実験ができる環境に身を置きたいと考え、1812年に20歳になったファラデーは、電気分解を駆使して多くの元素を発見したデービーの講演を熱心に聴講し、デービーの行った実験をスケッチをまじえてノートに書き留め、デービー宛ての手紙と製本職人が製本したデービーの講義のノートを同封して、デービーに送ったのである。これが功を奏し、1813年3月からデービーのもとで働けるようになり、自由に実験を行えるようになり、数々の功績を残していくことになる。
その後、ファラデーは様々なことを発見していったが、中でも有名なのは、1831年の磁力線の着想と、同年の電磁誘導の法則の発見だろう(厳密に言うと、少し先にジョセフ・ヘンリーが発見している)。電磁誘導というのは、磁界が変化している環境にある導体に電圧が生じる現象(簡単に言うと”発電”)であり、この現象は発電機や、変圧器などの多くの電気機器の動作原理となっている。もちろん、この電磁誘導の法則も高等な数学は一切使われていなかった。
〜理論家 マクスウェル〜 その年6月、後にファラデーの行った実験を理論にする、マクスウェルが生まれた。マクスウェルは大地主跡取りに生まれ、ケンブリッジ大学を卒業した、典型的なエリートだった。彼は数学に長けていてそれを駆使して理論を築き上げるのである。貧困層に生まれ、あまり学歴のないファラデーとは実に対照的な人物である。
マクスウェルは若いころから才能を発揮している。1856年、マクスウェルは25歳で「土星の環の構造と安定性」について取り組み論文を提出し、翌年にアダムズ賞を受賞している。また、マクスウェルは1855年から1856年にかけて、「ファラデーの力線について」と題した研究をし、論文にまとめると、真っ先にそれを力線の提唱者ファラデーに送った。これを機に、後にファラデーとの交流が生まれていく。
さらに、マクスウェルは理論的に電磁波の存在を予想し、そして、マクスウェルは1864年に、ファラデーの電磁誘導の法則、アンペール=マクスウェルの法則、電場に関するガウスの法則、磁場に関するガウスの法則の4つの法則を結合し、今日、”マクスウェル方程式”と呼ばれる電磁気学の基礎方程式が確立したのである。この方程式は、アインシュタインが、特殊相対性理論の基本原理となった、光速度不変の原理を提唱する際にも役立っており、電磁気学の非常に重要なものとなっている。
ちなみに、それからマクスウェルはエーテルという、光が伝播する際に媒質となる、仮想媒質があるのを前提として波動方程式を求めたわけなのだが、このエーテル、今ではエーテルは存在しないと証明されたのである。しかし、この方程式そのものは正しいものである、という面白い展開になっている。このようなことも歴史を学ぶ上での面白さである。
このように、興味のある分野の歴史、あるいはそれに関わったたくさんの偉人達の生涯(特に、幼い頃は自部が後世に名を残すことなんて思ってもいなかった人がほとんどであるため、素の人間が見えて、より面白い)や考え方を知ることは、僕たちにいろんなことを考えさせてくれる、また、考える時の参考にもなるのである。そして何より、学校の歴史の勉強とは一味違う面白さで、調べていて楽しい!皆さんも、息抜き程度に調べてみるのはいかがですか?最後まで読んで下さりありがとうございました。
参考文献 『光と電磁気 ファラデーとマクスウェルが考えたこと 電場とは何か? 磁場とは何か?』小山慶太 著 発行所 株式会社講談社 電磁波- Wikipedia マクスウェルの方程式 - Wikipedia 電磁気現象とマクスウェル方程式｜通信の発展 - WebArchive 相対性理論 - Wikipedia エーテル_(物理) - Wikipedia ジェームズ・クラーク・マクスウェル - Wikipedia ハンフリー・デービー - Wikipedia 電気分解 - Wikipedia マイケル・ファラデー - Wikipedia ライデン瓶 - Wikipedia ボルタ電池 - Wikipedia</description></item><item><title>ライフゲームをC++で実装してみた話</title><link>https://asanobuturi.github.io/document/2018/life_game/</link><pubDate>Thu, 01 Jan 1970 00:00:10 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/life_game/</guid><description>はじめに 実は「実装してみた」要素の少ない紹介記事であるがお許しを(盛大なタイトル詐欺)。
Life Game(ライフゲーム)とは？ ライフゲーム(Conway's Game of Life)は1970年にイギリスの数学者ジョン・ホートン・コンウェイ(John Horton Conway)が考案した生命の誕生、進化、淘汰などのプロセスを簡易的なモデルで再現したシミュレーションゲームである。単純なルールでその模様の変化を楽しめるため、パズルの要素を持っている。
Wikipedia より というもの、と言ってもわからないと思うので、ひとまずルールを書いておく。説明が簡潔で理解しやすかったため、これもまた Wikipediaから。 (一部視認性のために改変済み)最後に完成形のスクリーンショットを貼っておくので、イメージとしてはそれを参照して欲しい。
ライフゲームでは初期状態のみでその後の状態が決定される。碁盤のような格子があり、一つの格子はセル（細胞）と呼ばれる。各セルには8つの近傍のセルがある (ムーア近傍) 。各セルには「生」と「死」の2つの状態があり、あるセルの次のステップ（世代）の状態は周囲の8つのセルの今の世代における状態により決定される。
セルの生死は次のルールに従う。
また、中央のセルにおける次のステップでの生死の例を示す。生きているセルは■、死んでいるセルは□で表す。
誕生 死んでいるセルに隣接する生きたセルがちょうど3つあれば、次の世代が誕生する。
生存 生きているセルに隣接する生きたセルが2つか3つならば、次の世代でも生存する。
過疎 生きているセルに隣接する生きたセルが1つ以下ならば、過疎により死滅する。
過密 生きているセルに隣接する生きたセルが4つ以上ならば、過密により死滅する。
取り敢えずやりたいこと さて、ライフゲームを作るに当たって、画面の確保、描画などはDXライブラリに丸投げする予定なので、処理機構を考える。
やりたいこととしては、
すべてのセルを見る
→周りにある、生きているセルのカウント
→基準のセルが生きているか確認
→カウントに基づいて生死を決定する
こんな感じ。
セルは2次元配列を用意すれば良いが、取り敢えずvectorでいいだろう。ここで、セルのカウント後セルの状態を変更するのだが、変更後の状態をそのまま適応すると次のセルについて確認するときに影響してしまうので、コピーを用意してそちらに書き込むことにする。
つまり、セルの状態を保存するモノを2つ用意して、1つ目を見て生きたセルのカウントをし、その結果を2つ目に書き込んで最後に反映する。
vector&amp;lt;vector&amp;lt;bool&amp;gt; &amp;gt; map(ARRAY_SIZE, vector&amp;lt;bool&amp;gt;(ARRAY_SIZE, false)); vector&amp;lt;vector&amp;lt;bool&amp;gt; &amp;gt; map2(ARRAY_SIZE, vector&amp;lt;bool&amp;gt;(ARRAY_SIZE, false)); 書いてみよう とりあえず周辺の8つをチェックしたいが、取り敢えず自分を含めた9個をforで走査し自分自身を除くことにする。
配列外参照チェックの処理を書くのが面倒なので、配列外参照をしたときに例外を投げてくれるatメンバ関数で若干楽をしてみる。
下に挙げるのはライフゲームの核となる部分。
for (int y = 0; y &amp;lt; ARRAY_SIZE; y++)//ARRAY_SIZE:これの自乗個の for (int x = 0; x &amp;lt; ARRAY_SIZE; x++) {//マス上で動かす。 int count = 0; for (int y2 = -1; y2 &amp;lt; 2; y2++) { for (int x2 = -1; x2 &amp;lt; 2; x2++) { try { if (map.</description></item><item><title>３を√５進数で表すと？</title><link>https://asanobuturi.github.io/document/2018/root5/</link><pubDate>Thu, 01 Jan 1970 00:00:09 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/root5/</guid><description>まずは0.1を2進数で表してみる。 整数をn進数で表す方法は学校で習った通りなのですが（知らない人はごめんなさい）、小数をn進数で表すのはなぜか習わないので、その方法を考えてみました。
2進数と10進数を分けて考えます。10進数で2倍にすることは、2進数で10倍にすることに相当しま2未満なら整数部分だけ比べるなら同じなので、図1のように計算でき、このように計算した結果が下です。
\[ 0.1 = 0.000110011001100110 \cdots \] \[ 0.2 = 0.001100110011001100 \cdots \] \[ 0.3 = 0.010011001100110011 \cdots \] \[ 0.4 = 0.011001100110011001 \cdots \] \[ 0.5 = 0.1 \cdots \] \[ 0.6 = 0.100110011001100110 \cdots \] \[ 0.7 = 0.101100110011001100 \cdots \] \[ 0.8 = 0.110011001100110011 \cdots \] \[ 0.9 = 0.111001100110011001 \cdots \]
では、3を(\sqrt{5})進数で表すと？ さっきのように、まずは整数部分を\(\sqrt{5}\)進数に直してから、小数部分だけ取り出して、それを\(\sqrt{5}\)倍し、その整数部分を書いて、小数部分だけ取り出して、...ということを繰り返すことで\(\sqrt{5}\)進数が計算できます。このように計算した結果が下です。
\[ 1 = 1 \cdots \] \[ 2 = 2 \cdots \] \[ 3 = 10.</description></item><item><title>いったいどのくらい大きな声を出せばブラジルの人に声が届くのか</title><link>https://asanobuturi.github.io/document/2018/brazil/</link><pubDate>Thu, 01 Jan 1970 00:00:08 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/brazil/</guid><description>はじめに 皆さんは、「ブラジルの人、聞こえますかー！？」というネタをご存知でしょうか？
サバンナというお笑いコンビの八木(高橋じゃないほう)のギャグで、地面に向かって叫び、上記のセリフを言うというもので、数年前に流行って(？)いました。そして、そのギャグを見た時誰もが思ったであろうことの一つとして、「いったいどのくらいの声を出したらブラジルの人に声が届くのだろう」というのが有ると思います。なので今回は、実際にどのくらいの声を出せばいいのか、計算し導いていきたいと思います。
計算過程 実際にどのような計算をするかが、以下になります。
距離減衰を求める まず、距離減衰について簡単な説明をすると、「音の大きさが遠くに伝わっていく間にどんどん小さくなること」、これが距離減衰です。また、減衰は音の発生源(音源)によって違うので、まずはその数値を出します。ここでは、ブラジルが地球上において日本のちょうど反対に位置するとし、地球の半径を \( (6371→)6400km \) とすると、\( 距離減衰量(A) = 20 × log_{10}(r ÷ r0) \)となります。
※\( r \) は距離、\( r0 \) は、音源からの基準となる距離なのでこの場合、\( r0=1 \) とすると\( A = 20 ×log_{10}((12800000 × 3.14 ÷ 2) ÷ 1) = 146.06 ... \) →\(約 146dB \) と求められ、これがこの場合の距離減衰となります。
出す必要があるdBの量を求める 前項で減衰量を求めたので、右の図より、日常的な会話 \( 60dB \) を聞こえさせるとすると、\(60+146=206dB\) となり、これがブラジルの人に声を届けるのに必要な声の大きさということです。ちなみに、どのくらいの大きさかを比べるのに飛行機付近の音と比べると、飛行機のエンジンから \( 30m \) 離れた場所での音の大きさが \( 120dB \) なので、差が約 \( 86dB \) であり、\( dB=20×log_{10}(音の倍率) \) なので \( 86(dB)=20×log_{10}(音の倍率) \) であるため、音の倍率は約 20100 倍となります。</description></item><item><title>ゲームプログラミングと数学が出会う時</title><link>https://asanobuturi.github.io/document/2018/math/</link><pubDate>Thu, 01 Jan 1970 00:00:07 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/math/</guid><description>シューティングゲームばかり作っている中２の中野です。今回はいろいろな物理・数学に関することをここに記したいと思います（内容は至って真面目です。期待しないでください）。
微分の基礎 第一章では微分の基本中の基本について説明します。まず、微分とは読んで字の如く“微小部分で考える”ということです。たとえば正比例などのグラフの場合は直線なので、傾きが一定です（傾きの求め方：\( \frac{𝛥𝑦}{𝛥𝑥} \)（ここの𝛥というのは変化量という意味です））。しかし直線じゃない線を考えた場合に、\(𝛥𝑥\)の範囲を変えると\(𝛥𝑦\)が変わってしまいます。では例として \( 𝑦 = 4.9𝑥2 \) を考えてみましょう。
x=2 から x=3 の変化を考える場合 \[ \frac{𝛥𝑦}{𝛥𝑥} = \frac{(4.9 × 3 × 3) - (4.9 × 2 × 2)}{3 - 2} = 44.1 - 19.6 = 24.5 \] x=2 から x=4 の範囲を考える場合 \[ \frac{𝛥𝑦}{𝛥𝑥} = \frac{(4.9 × 4 × 4) - (4.9 × 2 × 2)}{4 - 2} = 29.4 \] 上記より𝛥𝑥の範囲によって傾きが違うことがわかります。では、いよいよ本題に入りましょう。上記の変数を使って考えてみましょう。\(𝑥 = 2\)から\(𝑥 = 2 + ℎ\)の範囲まで考えることにしましょう。</description></item><item><title>投擲について</title><link>https://asanobuturi.github.io/document/2018/throwing/</link><pubDate>Thu, 01 Jan 1970 00:00:06 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/throwing/</guid><description>はじめに 何故投擲について書こうとしたのかというと、歴史で世界大戦について学習しており、過去の戦いについて大きな役割を果たした投擲武器について興味が湧いた故、書いていきたいと思う。
扱いや特徴 まず投擲の道具（投擲具）と言われて何を思い浮かべるであろうか。円盤、槍のようなものはたまた石を思い浮かべる人もいるかもしれない。実はこれらすべてが投擲具であるのはもちろんの事、手裏剣や催涙弾、漁網までもが投擲具なのである。
そもそも投擲具は人類の発展によって狩猟用にうみだされたものである。
はじめこそ石を投げるような単純かつ威力の低いものではあったのだが、長い年月を重ねた末に投げナイフ、カタパルトといった殺傷能力のある凶器へと姿を変えていった。
それは間接的にいさかいを生み、後々に手を付けられなくなるのではあるが一先ず先に行くとしよう。
投擲道具のすばらしさ ここでは投擲道具の代表例としてオリンピックで扱われている砲丸投げですばらしさを伝えていきたいと思う。
ここで唐突に物理の話に入るとしよう。
ここでは男子の砲丸の重さ（8kg）で計算する。（空気抵抗や風を考えないものとする。）世界記録は約20m飛ばしているから、水平距離20m、角度θ、時間t、初速度νとすると、\[ tan \theta = \frac{ν}{\sqrt{ν^2+4g}} \]となる。
世界記録を出したバーンズ選手は身長194cmと大きく、体重も140kgそしてとても「手が大きい」ので、約35度で投げたものと思われる。
大抵の選手は首下のあたりから投げるので、 \[ 10 tan \theta = x \]よって約7mである。
よってこれは首下までの高さが1.5mであるから、8.5mからの垂直落下に等しい。
よって地面に与える力は\[ 8.5 × 9.8 × 8.0 = 666.4 \]。そしてこれは軽自動車一台分に相当し、かなりの重さになると分かっていただけたであろう。
投擲の扱われ方 前章によって投擲のすばらしさはわかってもらえたと信じている。
一方、投擲の発明によって人を殺めることが容易になってしまったともいえるであろう。
例えば、カタパルトである。カタパルトと恰好良くいっても投石機の事である。石を投擲して、敵の城や敵自身を攻撃するため攻城兵器と呼ばれていた。その頃はまだよかったのであるが、第一次世界大戦から、科学技術の発展により、フランスは手榴弾を投擲するようになってしまったのである。これによってドイツ軍に大量の死者が出て、白熱させ戦争をこじらせてしまったのは言うまでもないであろう。
まとめ それからというもの投擲はオリンピック競技での平和の象徴として、一種の競技としてだけでなく、紛争地での手榴弾投げ込みのため、または、デモ鎮圧のための催涙弾の投げ込みのための技術として使われるようになってきている。
我々は、現代の技術が戦争を通じてきたものであり、何のために使うべきなのかしっかりと考えていくべきである。</description></item><item><title>コラム 動的計画法</title><link>https://asanobuturi.github.io/document/2018/column/</link><pubDate>Thu, 01 Jan 1970 00:00:05 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/column/</guid><description>例えば、探し物が家の中にあるはずなのに見つからないとしましょう。そのときに、まず家を部屋ごとに分けます。そして、その各部屋を、また細かく分けます。例えば部屋を50m 四方くらいに分けていくとします。すると、その50cm四方の中に探し物があるかどうかは簡単に分かると思います。それを繰り返していくと、その部屋に探し物があるかがわかるはずです。
というように、いきなり答えを出すのが難しい問題（家に探し物があるか？）を解くときに、その問題を小さな問題（50cm四方の中に探し物があるか？）に分け、その小さな問題をすべて解くことで最終的な問題の答えを出す方法を、分割統治法といいます。
この分割統治法は、数学の問題を解くのにも使えます。中学受験をしようとしている、または経験した人なら、次のような問題を解いたことがあると思います。
問. 図のような道があったとします。このとき、左下から右上まで遠回りしないで行く道順は何通りありますか。（上の図） この問題は、交点それぞれに、その交点まで行く道順の数を書き込んでいくことで答えが出せます。（下の図）例えば、図の点Aでは、点Aの左から来るのは6通り、下から来るのが4通りなので、点Aに行く道順は 6+4=10通りです。これを繰り返すと、右上まで行く道順は225通りと出ます。
この場合は、「全部で何通りあるか」という問題を、「ある交点まで行く方法は、それぞれ何通りか」という問題に分割しています。また、このように小さな問題を解くときに、他の結果を再利用（左と下の道順の数を利用して次の道順の数を求める）するような分割統治法のことを動的計画法といいます。
では、動的計画法を使って、１つ問題を解いてみましょう。
問. Aくんは、（1から6までのサイコロだと問題が複雑になって、ただでさえ狭いこのページの余白で計算できなくなってしまうので）1から3の数字が書いてあるサイコロとすごろくを用意し、Aくんの駒をスタートに置きました。Aくんの駒は、1から3の数字が書いてあるサイコロを振って、1が出たら1つすすみ、2が出たら2つすすみ、3が出たら1つもどります。ただし、スタートより前には戻れないので、そのときはスタートにとどまります。
このとき、サイコロを5回投げたら、スタートから3つ進んだところにAくんの駒があるようなサイコロの目の出方は何通りあるでしょう。必要なら下の図を使ってください。</description></item><item><title>生体認証について</title><link>https://asanobuturi.github.io/document/2018/bio_auth/</link><pubDate>Thu, 01 Jan 1970 00:00:04 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/bio_auth/</guid><description>生体認証とは？ 生体認証とは自分の指紋や虹彩、静脈などの情報をデジタル情報化して端末のロック解除、サインイン、さらには決済までできてしまうというすごいものなんだ！
一言に生体とは言っても指紋、虹彩、顔、静脈...と沢山あるので今回はパソコンやスマートフォン、ATMなどで使われる身近なものに絞ってまとめたいと思います
浅野では先生のほとんどが学校から支給されるSurfaceという顔認証付きタブレットPCをつかっていますが、物理部ではいったい何人の人がそれらの機器を所有しているのでしょうか。物理部でどれぐらいの人が持っているのかというのが次のグラフ(図1)です。(正式に調査したものではなくあくまでも把握している分です。)
指紋と顔で約半数の人がいずれかの機能を使えるということです。
図1 意外と多いのではないでしょうか。大きな要因はiPhoneが指紋認証(Touch ID)を搭載しているからでしょう。
2018年、実に10億台もの指紋認証付きスマートフォンが出荷される予定で約70%の端末に搭載される見通しとなっています。物理部で使っている人はいないと思われますが、電子マネーの普及が結果的に指紋認証付きスマートフォンの普及につながったのでしょう。
仕組みについて この様に身近な生体認証ですがどんな仕組みなのでしょうか
指紋認証 指紋認証は生体認証の中では歴史が古いものです。そのため一言に“指紋認証”とは言っても沢山の種類があります。
画像を読み取るタイプ これは比較的古いものでスライド式のセンサーで指紋の画像を取り込み特徴点と呼ばれる指紋のスタート地点、切れ目、分岐点などで認識します。特徴点が多ければ多いほど精度は向上します。(20～40個程度で比較は可能)
画像を読み取るタイプ 電極が埋め込まれているタイプのセンサー（静電容量方式） これはスマホでも使われるもので、スライドしなくてもよいというメリットがあります。平らな認証部分の下には何万個も電極が埋め込まれていて指紋の凹凸部分を読み取るというものです。これは指がかすかに汗をかいているので凸部分の方がセンサーの電荷がたまりやすいという特性を利用したものです。そのあとはスライド方式と同じように特徴点を読み取り認証します。
尚、シリコン製が一般的ですが、JDI(株式会社ジャパンディスプレイ)がガラス基板を採用して透明にするだけでなく曲面やディスプレイへの埋め込みも可能にしました。(2018年1月発表)
写真はスマートフォンSH-M05の指紋認証センサー ↑横に長くかなり小さい 汗孔(汗が出る小さな穴)を第三次特徴として使えるもの これはまだ開発されたばかりの仕組みで生体認証システムの DDS と東京大学が開発しました。
特徴点を第一次特徴の「指の凹凸によって模様になった渦状紋」、第二次特徴の「分岐点や線の始まり」の他に「汗が出る小さな穴」を第三次特徴とすることで認証の精度を約10倍に高めました。
静電容量方式では汗孔を(十分な解像度がなく)読み取ることができません。
コスト面が課題ですがスマホメーカーや自動車や家の鍵にも採用を目指すそうです。この他にもQualcommの超音波センサーを使ったものなどがあります。
### 虹彩認証 虹彩認証は精度も高く、2015年に富士通のスマホARROWS NXにスマートフォンとして世界で初めて搭載されて話題になりました。虹彩は一卵性双生児でも区別できます。(DNAの塩基配列によって決まらないため。)その特徴は高い認証精度です。網膜と比べて眼球の表面にあるのため撮影も容易で、虹彩パターンの濃淡値のヒストグラムを用います。さらに指紋とは違い直接触れることがないので抵抗も少ないです。
問題点は、目に赤外線を当てて認証するのですが、赤外線のLEDを悪意のある人がそれを取り換えると目に障害が残るということです。
静脈認証 虹彩に次いで精度が高い方式で、ATMなどに採用され利用件数も増えています。近赤外線を当てて認証するので虹彩と同じく機械に触れる必要はありません。近年はセンサーの小型化も進みタブレット PC でも採用されています。
写真はLIFE BOOK S937/S(FMworld法人より) 顔認証 この中では認証精度は低く、簡易的なものに用いられます。
赤外線カメラを用いたものと普通のカメラを用いたものがあり、前者が主流です。双子を見分けることが難しく眼鏡や明るさ、顔の表情、加齢などによっても精度は下がります。
ちなみに物理部で顔認証は一人でしたがそれは私です。家族共用のパソコンなのですが父のアカウントに入ることはもちろんできませんし５歳下の弟は私のアカウントに入ることはできません。簡易的とはいってもある程度の精度はあり眼鏡をかけていても読み取ってくれます。
ロック画面の様子 声 これは声紋を利用したものがよく知られています。これも簡易的なものでその日の声の調子によっては正しく認証しないことがあります。例えばAndroidのスマートフォンの機能としてSmart Lockというものがありますが、それは「OK Google」と発音してロックを解除できます。
まとめ この様に生体認証は沢山あって便利なものですが欺瞞の方法も数多く編み出されています。例えば指紋認証だとピースサインが映った写真から指紋を特定される危険性があります。(浅野の教頭先生は記念撮影の時指を曲げて見えなくしていました(笑))生体認証だけに頼らず複雑なパスワ－ドと組み合わせるのが良いでしょう。
参考文献 生体認証 - Wikipedia 虹彩認識 - Wikipedia 指紋認証の精度10倍、決め手は「汗の穴」:日本経済新聞 来年は2300億円に!</description></item><item><title>ゲームを作るうえで大切なこと</title><link>https://asanobuturi.github.io/document/2018/lang/</link><pubDate>Thu, 01 Jan 1970 00:00:03 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/lang/</guid><description>こんにちは、中学二年の永田と申します。ここでは、最近「プログラミング教育」が注目される中で、入門に適したプログラミング言語は何なのかを私の考えで綴っていこうと思っています。(※プログラミング言語=コンピュータをプログラムするときに使う専用の言語。人間にもわかりやすく、コンピュータにも分かりやすいように設計されている。)
プログラミングの目的 今、世界中で私達のようなこどもにプログラミングをさせる動きが広まっています。日本ではおおよそ文部科学省の新学習指導要領2020への改訂で、小学校でのプログラミングが必修化されたことからプログラミング教育が注目されるようになったと言われています。今回必修 化される予定なのはあくまで小学校で、中学校技術科の学習指導要領を見ると、既に「プログラム」の文字があります。では何のために文部省はそんなことをしたのでしょうか。文部省はその目的として以下のようにまとめています。詳細は文部省のWEBサイト(編集者注:リンク切れしていたのでWebBackMachine)を参照してください。
プログラミング言語を覚えたり、プログラミングの技能を習得したりといったことではない。 論理的思考力を育むとともに、プログラムの働きやよさ、情報社会がコンピュータをはじめとする情報技術によって支えられていることなどに気付き、身近な問題の解決に主体的に取り組む態度やコンピュータ等を上手に活用してよりよい社会を築いていこうとする態度などを育むこと。 教科等で学ぶ知識及び技能等をより確実に身に付けさせること。 どうやら、「論理的思考を育み、情報社会がコンピュータによってささえられていることを理解する手段」としてプログラミングが選ばれたようです。
これ以外にも、アメリカのオバマ元大統領が在任中(2014年末)に、プログラミング教育の重要性について全国民に訴えた動画が公開されたことも、世界での動きを加速させる原因になったといわれています。
これとは別に、単純にIT企業のプログラマーになりたいだとか、ゲームクリエイターになりたいだとか、そういった理由でプログラミングを学ぶ人もいます。先に挙げた場合と、この場合では、学ぶべきことが全く違ってくると私は考えています。次頁からの文では、それについて私の考えを書いていこうと思います。
「論理的思考」を身につけるためのプログラミング 先に挙げた資料で、文部省は小学校におけるプログラミング教育の目的を「論理的思考力を育む」などと言っていました。論理的思考、というのは何でしょうか。論理的な、考え方ということなので、それぞれの意味を Wiktionary(Wikipedia の系列プロジェクト・辞書)で調べてみます。論理は「議論や思考を進めていく筋道」、思考は「論理に従い考えること」とあります。思考そのものが実は論理でした。
文部省は、プログラミングを使って「ものごとを行う際に筋道を立てて考える力」を育てたいということなんだと思います。この場合、プログラミングはどういう形で効果を発揮するのでしょうか。実は、プログラムでコンピュータに何かをさせるときには、先に書いた「筋道・論理」が必須になります。プログラミングで「筋道・論理」が必要だということは、NHKの番組「10min.ボックス テイクテック」内のコーナー、「プログラムテック」を見ると分かりやすいです。NHKのウェブサイト、NHK for Schoolで視聴することができます。
第一回放送「流れを操る」のプログラムテックから、自由に指令をできるロボットを使って二分以内にトムさんのところへジュースを運ぶミッションをもとに論理を組み立ててみます。(リンク)
番組では、まずジュースを持つところまではできました。それを持ち上げて歩いていけばよいのですが、「持ち上げて」と指令を出すと、頭の上まで腕を大きく振り上げてしまい、ジュースがこぼれるという展開になりました。ロボット(=コンピュータ)は人間のように「察する」事ができません。人間なら「持ち上げて」と言われたら普通胸の高さまでだと理解できるでしょう。ロボットをプログラミングするなら、もっと明確に、筋道を立てて司令を出していかないといけないのです。この例なら「ジュースを、胸の高さまで、持ち上げて」とします。これが、文部省が小学生に求める論理的思考力だと思います。
このとき、学習に最適なプログラミング言語は何でしょうか。小学生(または中学生も)へのプログラミング教育に盛んに取り入れられている言語として、MIT(マサチューセッツ工科大学メディアラボ)製の「Scratch」というものがあります。この言語の最大の特徴は、ほとんど文字を書かなくて良いことです。Scratchは、「ブロック」という、それぞれに指令としての意味が含まれたものをくっつけていくことでプログラムを作ります。さらに、ブロックの表示は日本語にすることができるのでSF映画などでありがちな小難しいアルファベットの羅列を書く必要がありません。文字を打つことが必要になるのは、キャラクターにセリフを言わせたり、~~度回転させたりするときだけです。
ただし、Scratchと言えど中身はコンピュータです。(実際ロボットをScratchで動かすのはいろいろと面倒なのですが)ロボットに「ジュースを運べ」と言うだけでジュースを運んでくれるほど簡単ではありません。Scratch でも、「ジュースを持て」、「持ち上げて」、「体を回転させて」、「トムさんの前まで歩いて」と順に指令を出す必要があります。つまり、日本語を使って論理を組み立てることができるのです。これはほとんど日本語しかわからない小学生(+中学生)に論理的思考をさせるのに非常に都合が良いです。
ちなみに、最近はScratchのようにブロックを使ったプログラミング学習環境が増えてきていて、文部省がScratchをもとに自分で作った「プログラミン」や、Life is Tech!とディズニーがコラボした「テクノロジア魔法学校」などです。また、マイコン(手に乗るような小さなコンピュータ)用に作られたものでは、モータやLEDをつないでちょっとした機械を作ることができるものもあります。英放送局BBCのマイコン「micro:bit」に向けて作られた「micro:bit JavaScript ブロックエディター」や、有名な教育用マイコンRaspberry Pi向けの「Scratch GPIO」などです。モータやLEDなどの現実世界との接続ができるのなら、情報技術学習よりもさらに広げることができそうです。
プログラマーを目指す人のためのプログラミング プログラマーを目指すなら話は別です。目的がそもそも違います。小学校で取り組むプログラミングの目的は「論理的思考力を身につける」ことなどですが、プログラマーを目指すならそれだけでは足りません。プログラマーが行っているのは実務作業ですから。筋道を立てた思考、論理的思考力はもちろん必須でしょうし、実際にプログラムを書く力が求められます。それに、技術的な知識もたくさん覚えなければいけません。この辺りはしばらく真面目に勉強していれば覚えていけると思いますが、学習に適した言語は何でしょう。
Scratchを考えてみます。Scratchはなかなか有能です。基本的な考え方はほぼ学ぶことができますし、オンラインコミュニティのおかげでわからないことはすぐに質問することができます。ただし忘れてはいけないのが Scratchはあくまで教育用であるということ。例えばScratchは単体のアプリにできません。Scratchのソフトの中でしか動かないのです(外部ツールを使えばできないこともないです)。また、ゲーム向けに作られているのでそれ以外のプログラムを作るのは苦手です。このように、Scratchは実用的な言語ではありません。現にScratchで制作されて、世の中で販売されているソフトは見たことがありません。
世の中ではブロック型の言語はまだ主流ではなく、SF映画でよく見るような文字を書くタイプのものが多いです。有名所ではC(C++&amp;C#),Java,Pythonなどです。プログラマーを目指すなら、このような広く使われている言語を一つくらいは使えないと駄目だと思います。入門用としてどの言語を使うかは自由でしょう。はじめから実用的なCなどの言語をやるのも手ですが、もし小学生がプログラマーを目指すなら、はじめはScratchなどで考え方を身に着けてから本格的なプログラミングをするのが良いと私は思っています。Scratchのよいところは、機械音痴でも少しのパソコンの基礎(マウス操作や、キーボードのタイピングくらい)を覚えてしまえば簡単にプログラムが作れるというところです。はじめに難しい言語を使って、自分には向いていないと挫折するより、プログラムの根本の部分は難しくないということを理解したほうが続けやすいと思います。
以上のことから、プログラマーを目指すならScratchにとどまらず、少し基礎を理解したら積極的にC,Java,Pythonなどの汎用的なプログラミング言語を学ぶのが良いというのが私の考えです。
実は私も前までScratchをやっていましたが、3年以上Scratchにどっぷり浸かっていたせいでなかなか新しい技術を取り入れられずにいます。ですが、Scratchで得た感覚は今も役立っています。
まとめ 最後まで読んでいただいてありがとうございました。近頃テレビやネットでやたらとプログラミングプログラミング言われているので、プログラミングと一概に言ってもそれをするための手段(言語)はたくさんあるよな、と思い私の考えを文章にしました。 2つ目で書いたScratchは、実際多くのプログラミング教室などで採用されているようです。小学校で必修化されるのは2020年からなので、すでに取り組み始めた学校もありますがまだどうなるかは分かりません。
3つ目で書いたC,Java,Pythonについてちょっと余談です。私はPythonが好きなのでPythonの宣伝をします。最近流行りの人工知能なんかはPythonで作られることが多いです。Pythonは文法が書きやすい設計なので、初心者の入門におすすめです。
画像はScratchBlocksとTwemojiを使った自作のものです。
入り切らなかったので参考にしたウェブサイトはそれぞれ文中に散りばめられたURLを辿っていただければと思います。</description></item><item><title>世界一小さな物語</title><link>https://asanobuturi.github.io/document/2018/world/</link><pubDate>Thu, 01 Jan 1970 00:00:02 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/world/</guid><description>注意:このレポートは筆者の力量不足で非常に読みづらい上、中身も一般的に難解とされています。クオリティとしてはこれを読んでもせいぜい内容が分かった気になれるくらいのものです。それでもかまわない方はこのまま読み進めてください。
序章 今手元にコップか何かに入った水があるとしよう。その水は \( \ce{H2O} \) 分子の集まりである。さらに各分子は酸素原子と水素原子二つに分けられる。また、その原子も陽子と(水素原子の大半以外は）中性子からなる核と電子に分割できる。物理的な意味で、物質は我々の手でここまで分解できるのである。だが、実際のところ陽子と中性子はさらに細かい部品からなっていることが分かっている。もっとも、この部品レベルに陽子と中性子を分解することは不可能ではあるが。要するに下図のとおりである原子の中心は陽子と中性子8つだが、描くのが面倒なので略されている。
こういうサイズになると、物質は直観では想像できないような振る舞いをする。たとえば、何かの拍子に壁をすり抜けられたり、実際に粒子がどこにあるのかは知ることができなかったりとかするわけだ。こういうのを見ると寒気がするタイプの人も多いと思うが、もちろん私は一目ぼれである。だからこそ知ったかぶり然とした内容でもこれを書きたくなってしまうのである。というわけで、これから私は小さな「別世界の」話をしようと思う。
原子、そしてその欠片 原子の存在に行き着く経緯については、「ブラウン運動」とか、「ティッシュに撃ち込んだ弾丸が跳ね返ってきた」とか、語りたいことが腐るほどあるが、残念ながらそんな余白など与えられそうにないので割と大事なその二つについて軽く語ってあとは検索してもらう、という方法をとることとした。
ブラウン運動は水の入ったビーカーに微粒子を入れると「無作為に」運動する現象だが、それを説明したのは実はアインシュタインだったりする。実はこれ、水分子が微粒子に衝突して起こっているというのである。実際に原子を見せるなんて真似ができなかったことから、実はアインシュタインによりこれが説明されるまでは原子説は実証されていない、というわけで20世紀までは原子説は今ほど広まっていなかったのだ。彼はこの論文を出した年に他にもいくつか論文を出している。特殊相対性理論とか$\ce{E=mc^2}$とか光量子仮説とか、とにかくすごい論文の数々については、また「余白」の都合でカットである。申し訳ない。
電子は元々真空中に電気を通していたところ何か負の電荷をもった粒子が中を通っているということで発見され、その電荷を帯電した油滴の電荷の最大公約数を計算して求めたりもされている。後にこれが原子由来のものと判明するわけである。
「ティッシュに撃ち込んだ弾丸が跳ね返ってきた」とは、ラザフォードが自身の行った実験に対して述べた感想である。実験は金箔(めっちゃ薄い)にアルファ粒子(ヘリウムの原子核)をたくさん撃ち込むというもので、原子は均等に正電荷を持ち、中に電子が埋まっている(すでに電子の存在は実証されている)、という仮説のもとアルファ粒子は少しずつズレると予想したラザフォードだが、この予想は大いに裏切られたのだ。実は中にあるのは原子核という非常に小さな正電荷の塊で、あとは何もない。おびただしい数の粒子の一つまみだけが反対側に返ってきたのだ。そんなスカスカな原子の構造に対する驚きを込めた一言がまさに「ティッシュ(以下略)」なのである。
ほかにも色々と原子やほかの諸々については土台となる研究があった。私が紙を節約せざるを得ないため、申し訳ないが、詳しくはグーグル先生にでも尋ねてほしい。
素粒子 電子は実は素粒子である。
質量が存在するとかで近年話題になったニュートリノも素粒子である。
ただし、陽子や中性子はさらに「アップクォーク」と「ダウンクォーク」に分けられるので、素粒子ではない。
他の素粒子は不安定ですぐ他のものに変化するので自然界で圧倒的に多いのはこの「アップクォーク」と「ダウンクォーク」、電子、ニュートリノ3種類くらいであろう。ものによっては存在を仮定しないと自然界の事柄と合致しないという理由で存在することにされたものもあるが、のちに加速器を用いた実験で実在すると証明されているものも多い。昨年言及した力を伝える粒子のうち重力子は存在こそ予言されているが観測されておらず、そういう未観測粒子も数多くある。
実はもっと細かい粒子があったり、どの粒子もある滅茶苦茶小さなひもの一形態だったり、より細かい構造が存在するという説もあるが、正直私にもよくわからないので割愛する。
奇妙な世界 ここまで小さな粒子の話ともなると、我々の常識は通用しない。この常識はずれな世界を取り扱う学問が量子力学である。例えば常識の範囲内では物は常にある場所にしっかりと「存在」する。例えば、先述のコップはどこか、と訊かれたとして机の上、と断言できるようなものだ。しかし、量子力学では、あの粒子はどこか、と訊かれても断言できないのである。「ここかもしれないし、あそこかもしれない。でも、こっちにある確率の方が高い。」くらいにしか断言できないし、知りようがないのである。そのため、観測はある程度ぼんやりしていた「ここかもしれないゾーン」を狭めるくらいしかできないのだ。だが、観測をやめるとすぐに「ここかもしれないゾーン」は元に戻る。
さらに言うと、粒子がどれくらいの速さで動いているかさえもはっきり分からないのである。これは場所を知るのに必要な観測という動作特有のものでもある。たとえばりんごを見るとき、私たちはりんごで反射した光を見ていることとなる。ただし、物が小さいと光によって運動が乱されたり、場所を知るにはエネルギーが足りなかったりするのである。だからどっちかは分からなくなるのだ。
「測定において位置の誤差と運動量(速度×質量で表される値)の積は一定以上になる」という原理が存在する。現在は反例が示されているが、大まかな方向性は合っているようである。これだけではかなり分かり辛いだろうが、かいつまんで言うとこうなる。
「実際に観測するまで粒子の位置が分からないうえに、観測しても誤差からは逃れられない。運動量についても同様。次頁の図のとおり。」
一例 こうなるとだいぶ厄介なことが起こる。「ここかもしれないゾーン」は時に壁(十分薄い)を超えるのである。その場合、何回か観測するうちに粒子が壁抜けするのである。これはトンネル効果と呼ばれるが、これは量子力学を代表する奇妙な結論の 1 つといえよう。上に例を示す。
世界一美しい実験 この「ここかもしれないゾーン」だが、場合によりこんなことも引き起こす。
二つの隙間が開いた壁に電子を打ち込んだと仮定しよう。このとき、電子はいずれかの壁を通ることとなる。しかし、観測するまでは二つの隙間のどちらを通った確率も存在する。その場合、この電子は二つの隙間を同時に通過したことと同義に解釈できるのである。粒子の検出確率は波のようなグラフを描くので、この状態を「波の状態」と呼ぶこともあるのだが、この「検出率の波」は干渉しあうこともあるのだ。
それにより、電子自身の検出率の波同士が干渉することで何度も電子を打ち出した際に独特のパターンができる。つまり、自分自身により電子の検出率が変わるわけである。「で、電子はどっちを通ったんだ？」と思う方も多いだろうが、実際にそれを観測すると、電子の飛び方は直線的なものに戻るのである。つまり、同時に通ったからこそこんなパターンになるのだ。
私の能力上細かい計算はできないが、要するに右図のとおりである。下のグラフの色のついた部分と上の同心円は対応するので、同じ色の部分の重なった箇所は検出率が上がり、色の違う部分の重なった箇所からは粒子が全く検出されない。何度も電子を打ち出した際のパターンが右側に示されている。
こんな常識はずれな結論を示した実験だが、ちゃんと名前もある。「電子の二重スリット実験」だ。ある科学誌で行われた「世界一美しい実験は何か」という人気投票では我々の物質観を見事に、明白な方法で打ち砕いたという点を評価され堂々の一位を取っている。
補記および何が言いたかったのか ここまで論じたことは確かに本当だが、そのスケールは非常に小さいものなので、我々の世界ではこういう効果を気にする必要性はほとんどない。しかし、天文学的確率とはいえ、なんともなしに寄りかかった壁を誰かがすり抜ける可能性は一応存在するのである。
我々の世界とは一見無関係に見えるこの学問だが、実はコンピューターが量子力学の賜物だったりするなど、我々の生活とどんどんと密接になっている。実際のところ他にいい例が思いつかないが、これからの時代、ここで述べたような結論が生活上の様々なことに役立つことだろう。
そういったものを支えている実に奇妙な法則を知ることも、もしかすると読者の生活を充実したものにする一助になるかもしれない。
出典 https://ja.wikipedia.org/wiki/不確定性原理 アクセス日2018/07/14 数々の本を読んだときの記憶(2014 年以降)</description></item><item><title>ゲームを作るうえで大切なこと</title><link>https://asanobuturi.github.io/document/2018/game/</link><pubDate>Thu, 01 Jan 1970 00:00:01 +0000</pubDate><guid>https://asanobuturi.github.io/document/2018/game/</guid><description>物理部中 2PC 班の吉田(行人)デス。我々PC 班はプログラミングをして、ゲームやソフトを 作っている訳ですが、僕たちがゲームを制作していく中で大事なことが幾つかあります。 ここでは、その大事なことを幾つか紹介したいと思います。
ユーザーに分かりやすい画面 いわゆる UI(User Interface)ですネ。この UI がしっかりしていないとユーザーはゲームやソフトの画面を理解できません(理解しにくいです)。この UI をしっかりするための職業もあるぐらいです。昔は CUI ソフト(コマンドプロンプトを使ったソフト)がほとんどでしたが今ではほとんどのソフトが GUI ソフト(ユーザーに分かりやすいように画像などを使ったコンピュータの操作を容易にしたソフト)になっています。
これは今ではたくさんの人が PC を使うようになったのでユーザーに対して分かりやすいソフトの需要が急激に増えたことによると思われます。
なので我々物理部員も、この風に乗って画面をできるだけ見やすいようにゲームを作っています(気にしない人間もいますが)。
UI をしっかりするために日常生活で実践できることがあります。それは――お母さんからよく言われるようなことですが――自分の伝えたいことを他人にしっかり理解してもらえるように生活する事です。
これを普段から行えば、UI はしっかりとしたゲームとなります。
皆さんも、もっとユーザーがあっと驚く作品をいつか作りたいのであれば、上記のことを試してみては如何でしょうか?
ゲームが、人をゲームに夢中にできる理由 前置きしておくと、ここでいう「ゲーム」とは堂々巡りですが「人を夢中にできるゲーム」の事です。ここでは、なぜ「人を夢中にできるゲーム」が人を夢中にできるのか、という事についてお話します。
少し難しい話になりますが、人がゲームに夢中になる時、モチベーションの問題が大きく関わってきます。モチベーションについての研究で(僕が知っている範囲で)最も有名なのは、恐らく「マクレランドの欲求理論」だと思います。
マクレランドは、人が抱えている欲求を次のように分類しました。
達成欲求:一定の目標に対して、達成し成功しようと努力する欲求 権力欲求:他者に対して影響力を与え、コントロールしたいという欲求 親和欲求:友好的で親密な対人関係を結びたいという欲求 回避欲求:失敗や困難な状況を回避したいという欲求 この欲求を満たせば、基本的には人はゲームに夢中になれると言われています。
例えば、達成欲求だったら、ゲームをクリアするために主人公を強化する要素をゲーム内に入れたり、権力欲求だったら、主人公をプレイヤーによって不自由なくコントロールできるようにしたり、親和欲求だったら、ユーザーとユーザーが共にプレイできる要素を加えたりとか、回避欲求だったら、どんな技も回避出来たりカウンターできたりするようにする、等があげられます。
一つのゲームに夢中になっている人なら、上の 4 つの欲求をそのゲームが満たしていることが分かると思います。少し考えてみてくださいネ。
この事について、日常生活で気を付けなければならないことは特にないと思います。
強いて言うのであれば、周りの人の人間観察をすることです。これをすれば「あっ、あの人今達成欲求が強くなっているな」みたいなことです。
※周りの人の迷惑にならないようにやりましょう(あと、普通の人から見たら変人に見えてしまうので度を越えないようにしましょう)。
日常生活の1つ1つのモーション 最後の 3 つ目です。私たち人間は脳から電気信号を送り、それを元に体を動かしています。
この事は、それなりに有名なので知っている人もいると思います。人間が行っているモーションは全てプログラムで表せると言っても過言ではありません。要するに、私たちは四六時中プログラムを実行していると言っても(厳密には少し違いますが)過言ではないということです!
日頃の自分の腕の動きを想像してみてください、あるいは、今そこで自分の腕を動かしてみてください。
例えば腕を 90°曲げるには、自分の肘を中心として、三角関数を使い座標の値を色々いじってたりして、ようやく曲げることが出来ます(三角関数などについては理解していなくてもいいです。ここでは腕の動きをプログラムで表せることを分かってくれればいいです)。
少し難しいですが、体の動きのほとんどは(何度も言う通り)プログラムで表せます。ただ、日常生活でいちいちそんな事を考えていたら埒が明きません。
そこであげられる物が一つ。物事を論理的に考えてみましょう。
熱いコーヒーを飲むことは、
「息で冷ます→カップを手に取る→カップを自分の口辺りに近づける→カップを傾け自分の口にコーヒーが入るようにする(→香りと味を嗜む)→飲み込む(→息をつく)→カップを元の場所或いは自分の近くに置く」
という一連の動作によって成り立ちます。これでご理解いたただけたでしょうか?このように、一つの動作を論理的に表すことによって、ゲームプログラミングがある程度やりやすくなります。皆さんも、日常生活で慣れれば楽にできることなので、試してみては如何でしょうか?
終わりに この3つの事を実践することで(2つ目はやってもやらなくてもいいですが)かなりゲームプログラミングがやりやすくなり、またプログラミングをこれからやるという方もタメになると思いますので、この文章を読んだその日から、是非実行してみてください!</description></item></channel></rss>