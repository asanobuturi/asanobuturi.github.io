<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2022年度・部誌 on 浅野学園物理部</title><link>https://asanobuturi.github.io/document/2022/</link><description>Recent content in 2022年度・部誌 on 浅野学園物理部</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Thu, 01 Jan 1970 00:33:42 +0000</lastBuildDate><atom:link href="https://asanobuturi.github.io/document/2022/index.xml" rel="self" type="application/rss+xml"/><item><title>n進法のおはなし</title><link>https://asanobuturi.github.io/document/2022/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/8/</guid><description>初めに この文章を読むにはn進数の基礎知識が必要です。 内容の転載・改変・再配布を禁止します。 内容に関しての質問や、誤字脱字の報告はs2019188@asano.ed.jpまでお願いします。 筆者は淡泊なので文章が味気ないですが、それでもよろしければお楽しみ下さい。
負のn進数 私の知る限り、一般に基数は自然数であるとされています。 しかし基数が自然数でなくても大丈夫です。 というわけで今回は-2進数を紹介します。
四則演算 四則演算は、繰り上がりなどの演算法則が分かればOKです。 足し算&amp;hellip;1+1=110で、1つ上の位に1があったら打ち消す。 $$ (-2)^n+(-2)^n=(-2)^{n+1}*(-1)=(-2)^{n+1}(-2+1)=(-2)^{n+2}+(-2)^{n+1} $$ 引き算&amp;hellip;0-1=11が分かれば他の計算もできると思います。 $$ 0-(-2)^{n}=(-2)^{n}(-2+1)=(-2)^{n+1}+(-2)^{n} $$ -1をかけて足す、というのも可能です。(面倒ですが) 掛け算&amp;hellip; 途中まで2進数と同じように計算して、足すときだけ上記の手法を使う。 割り算&amp;hellip; まだ理解できてないので、説明できません。 宿題ということにします。
2進数を-2進数にする けっこう面白そうですよね。 10進数に直してから-2進数にするのはつまらないので、直に変換します。 人によって考え方が違うと思いますが、私のやり方を書きます。 2進数のある桁は、-2進数に変換出来ます。 偶数乗の桁はそのままです。 奇数乗はその位と1つ上の位に足せばいいです。(上の引き算と同じ) あとは足し算するだけです。 これならプログラムにもできますね。 (プログラムではこんな無駄で複雑なことしませんが)
10進数を変換する 生きていると、10進数を他の記数法にすることがよくあります。 整数なら簡単ですが、小数だと同様には計算できません。 そんな時はこんな風に計算をします。 例:1.2を2進数にする $$ (\frac{1}{4})^{n}の位の数をa_nとする(n:非負整数,0 \leq a_n &amp;lt;4,a_n \in Z)$$ $$ 1.2=a_0+a_1*(\frac{1}{4})^{1}+a_2*(\frac{1}{4})^{2}&amp;hellip; $$ $$ a_1以降の和は0以上1未満だからa_0=1$$ $$ 両辺からa_0=1を引き、2をかけて$$ $$ 0.4=a_1+a_2*(\frac{1}{4})^{1}&amp;hellip;$$ $$ a_1=0$$ $$ &amp;hellip;&amp;hellip; $$ 循環するため、1.2=1.\dot001\dot1 $$
で、ここまでならある程度数学を学んでいる方は知ってると思うんですけど-2進数で同じことをやろうとすると出来ないんですね。
例:0.8を-2進数にする $$ (\frac{1}{-2})^{n}の位の数をa_nとする(n:非負整数,0 \leq a_n &amp;lt;|-2|,a_n \in Z)$$ $$ 0.</description></item><item><title>PC98という古いPCで曲をビープ音で演奏してみた</title><link>https://asanobuturi.github.io/document/2022/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/9/</guid><description>はじめに 皆さんこんにちは高2のN.Kです。今回はPC98で曲を演奏するという内容なのですがこの記事を書こうと思った理由の中に後輩へ技術を継承するということがあります。というのもPC98を扱える部員が私の4個上の代で途絶えており、私がこの企画をやるのに苦労したからです。もしかしたら後輩がPC98を扱うかもしれないのでしっかりと文章で書いておこうと思います。(いつまで部にあるPC98がもつのかわかりませんが&amp;hellip;)
PC98とは 物理部の文化祭に来てくださるのは小学生が多いので一応軽くPC98の説明をしておきます。 PC98とはNECが1982年から2003年まで製造・販売を行っていたパソコンのシリーズである「PC-9800」の略称です。 今回使っていくのは1995年発売のPC9821Xa10という機種で本体標準価格税別268000円だそうです。当時のPCの高価さがうかがえます。
PC98でのプログラミング 今回はC言語というプログラミング言語を、統合開発環境はTurboC++4.0を使っていきます。 統合開発環境とはテキストエディタやプログラミング言語を機械語に変換するコンパイラなどの機能を含むソフトウェア開発のための統合的なプログラミング環境のことでTurboC++は1987年にボーランド社から発売されたTurboCの後継である統合開発環境で今回使うver4.0は1995年に発売されました。
PC98での操作 PC98のOSはMicrosoftが開発したMS-DOSとなっており、基本的にはCUIと呼ばれる文字列でコンピュータに指示を与えてディスプレイに文字を表示して応答するUIとなっています。 基本操作はWindowsのコマンドプロンプトと変わらないのでそこまで難しくないです。 物理部のPC98にはFILMTNというフリーのファイルマネージャが入っているので案外コマンドを入力しなくても何とかなります。
日本語入力 日本語入力にはATOKというIMEを使います。入力中にXFER+CTRLを押すことで日本語入力になります。F7でカタカナなど後の操作は基本的に今と変わりません。
実際にコードを書く IDEを起動してコードを書いていきます。ここから先はソースコードの一部を公開して、解説していこうと思います。 ビープ音の高さは周波数で指定するので周波数と音階を対応させています。 長さはミリ秒で指定するので同様にミリ秒と音符の長さを対応させています。
//音階 const int A = 440; const int AF = 415; const int AS = BF; const int B = 494; const int BF = 466; const int C = 262; const int CS = DF; const int D = 294; const int DF = 277; const int DS = EF; const int E = 330; const int EF = 311; const int F = 349; const int FS = GF; const int G = 392; const int GF = 370; const int GS = AF; //音符 const int eight = sixteen*2; const int four = eight*2; const int one = two*2; const int sixteen = 125; const int two = four*2; その次は音声再生用の関数を作ります。playmsg(音符,歌詞,音階,音程)で歌詞つきで音符を再生します。play()はそれの歌詞なし版です。</description></item><item><title>PWMについて</title><link>https://asanobuturi.github.io/document/2022/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/5/</guid><description>この記事はコロナ感染中に執筆しているため、もしかしたらおかしな所があるかもしれません。大目に見てください。
PWMとは PWMは Pulse Width Modulation の略で、直訳するとパルス幅変調となります。アナログ信号をデジタル信号に変調する方式の一つで、ONとOFFの比率を変化させることで擬似的にその間の値を表現するものです。
用語説明 周期：繰り返しの現象が一周りしてまた戻ってくるまでの時間。 周波数：繰り返しの現象が1秒間に行われている回数。 $$ \frac{1}{\text{周期}} $$ パルス幅：一周期のうち、ONになっている時間。 デューティ比：一周期の中でのONの時間の割合。 $$ \frac{\text{パルス幅}}{\text{周期}} $$で計算できる。 平均電圧：名前の通り、電圧の平均。 $$ \text{デューティ比}\times\text{ONのときの電圧} $$ 実行電圧：周期的に変化する電圧の大きさを表すのに使う値。PWMの場合、$$ \text{ONのときの電圧} \times \sqrt{\text{デューティ比}} $$ で計算できる。 {height=300}
上の画像はPWMの電圧のグラフですが、電流、電力も同じ形になります。
PWM信号の基本的な作り方 PWMの信号を生成するには、２つの入力が必要になります。１つ目は変換したいアナログ信号(当たり前)、もう一つは変調に使うためのノコギリ波(三角波でも可)です。 変換したい信号とノコギリ波の大小を比較し、変換したい信号の値がノコギリ波より大きいときはON、小さいときはOFFを出力することでPWM信号を生成することができます。言葉で説明するより実際に下のグラフをいじってみたほうがわかりやすいでしょう。赤い線がアナログ信号、オレンジの波がノコギリ波、紫の線がPWM信号、青い線がPWM信号の実効値を表しています。半透明の点はドラッグで動かせます。(若干重いです)
上のグラフを見て分かる通り、変調に使ったノコギリ波の周期と生成したPWM信号の周期は一致し、変調したいアナログ信号の最大値、最小値はノコギリ波の最大値、最小値のなかに収まっていないといけません。 また、連続的に変化する信号を変換することもできます。
変調するアナログ信号の振幅を大きくし、ノコギリ波の範囲を超えると、音割れのような状態になってしまうのがわかるかと思います。
Arduino Uno上での実行 先ほど紹介した方法をArduino Uno上で実行します。 Arduino Unoには タイマー０、タイマー１、タイマー２の３種類のタイマーがあり、役割や特徴が少しずつ違います。この３つの違い等については割愛します。 Arduino Unoではタイマーが16Mhzで(1秒間に16,000,000回)カウンタを一ずつ増やしていき、0~255まで数え、255になったらリセットするというのを繰り返しています(自分で設定すれば変えられます)。これをPWMの変調に使うノコギリ波の代わりにします。
#include &amp;lt;avr/io.h&amp;gt; //タイマーを設定するのに必要なライブラリを読み込む int duty = 50; //指定したいデューティ比(%) void setup() { pinMode(11, OUTPUT); //11番のピンを出力に設定 } void loop() { // タイマーのモードを指定 TCCR2A = 0b10100001; TCCR2B = 0b00000100; // Dutyの比指定 OCR2A = 255*duty/100; } 上のプログラムを実行すると周波数：982Hz、デューティ比：約50％のPWMがArduino Unoの11番のピンから出てくるはずです。これでも十分短いプログラムですが、単にArduinoでPWMを使いたいだけだったら下の一文で使うことができます。</description></item><item><title>Stable Diffusionをインストールしてお絵かきする</title><link>https://asanobuturi.github.io/document/2022/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/2/</guid><description>はじめに 物理部中２のPC班員です。中３から部誌を書こうと思っていましたが、ちょうどいいネタが転がり込んできたので書くことにしました。
使うライブラリのインストール 今回使うStable Diffusionは最近オープンソース化され、商用利用も可能という素晴らしいライブラリです。 PCの推奨スペックはVRAM10G以上のnvidiaのGPUで、今回はRTX3060というGPUを使っていきます。
リポジトリにアクセスするためのトークンを作る まずここにアクセスして右上のSign Upからアカウントを作成し、次にここにアクセスしてAccess repositoryをクリックした後、サイト右上のアカウントアイコンをクリックしてSettingsから左のAccess Tokensからトークンを作成する。このトークンが後で必要になるのでメモしておく。
必要なソフトとライブラリ Python まずは今回のコードを書くためにプログラミング言語のPythonをインストールする。 Python公式サイトからpythonのインストーラーをダウンロードしてインストールする。インストール時にPythonをパスに追加するオプションを選択するのを忘れずに。
{width=400}
ドライバ {width=400}
今回はAIの演算にCUDAというnvidia製のグラフィックボードについているものを使うので、ここからドライバを手に入れてインストールする。
CUDA Toolkit ここからダウンロードしてインストールする。 そしてコマンドプロンプトでnvcc -Vを実行して正常にインストールされているかを確認する。 このときreleaseの後にある数字をメモしておく。
cuDNN ここからダウンロードして解凍したbinフォルダにパスを通す。 この時、ダウンロードにnvidiaデベロッパーアカウントが必要なので作成する。
PyTorch ここからPyTorchをインストールするためのコマンドを生成する。
PyTorch Build: Stable Your OS:使用しているコンピュータのOSを選択 Package:Pip Language:Python Compute Platform:先ほどメモしたReleaseの数字に合うものを選択 その後、生成されたコマンド(Run this Commandにある文字列)を実行してPyTorchをインストールする。 インストール後、以下のコマンドでPyTorchからGPUが使用可能かを試す。Trueになれば使用可能。 PS C:\Users\hoge&amp;gt; python Python 3.10.6 (tags/v3.10.6:9c7b4bd, Aug 1 2022, 21:53:49) [MSC v.1932 64 bit (AMD64)] on win32 Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information.</description></item><item><title>ゼロから始めるコイルガン製作</title><link>https://asanobuturi.github.io/document/2022/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/4/</guid><description>初めに 初めまして、高二の電工班長のM.Yです。今回の部誌では、今年製作し、展示しようと思っている、コイルガンの製作過程についてちょっと解説を加えながら語っていこうと思います。 (ガッツリ解説については去年のものとほぼ同じになると思うので)
コイルガンとは コイルガンは、超強い電磁石のコイルを用いて金属製の弾を発射するものです。コイルの巻く数やコイルの動力となる電圧の違いによって色々弾の速度が変わっていきます。勿論電圧を大きくしたり、コイルの巻数を増やしたりすれば、弾の発射速度も上昇していきます。
製作過程 昇圧チョッパ・充電回路 昇圧チョッパとは、コイルガン製作において最も肝になる部分です。使いやすいコイルガンの製作にはここの改良が必須です。 今回製作する昇圧チョッパの回路図はこのような感じ。
実は去年、コイルガンを展示するためこの昇圧チョッパの製作をしていました。 が、遅々として進まず、去年の文化祭前に出来たものがこれ
なんだこれ… 正直今見ても愕然とするレベルの汚い配線です。 裏側はこんな感じ。本当に汚い
とまぁ去年はこんな感じで見栄えも悪く、さらにこんなに導線がギャンギャン伸びててどこかでショートしそうで怖いので新しい物を作ろうとしました。 が、技術不足等で遅々として進まず。 電工班長のくせして電工の知識がほとんど皆無なのです(電工班長のくせに)。前部長に聞きながらかなり日数を要しましたがなんとか完成にこぎつけました。
{height=200}
まぁ去年よりはマシ…かな？ 裏側はこんな感じ
{height=200}
そこからせっせとコンデンサの充電回路の製作に励んでいました が、またしても問題発生。 導線の直径の定格電圧を完全無視してました。今回400Vの電圧を流す予定なのですが、案の定、定格電圧をオーバー。(定格電圧とは、定格として定められてる上限の電圧です。導線の太さによって変わってきます。これを超えると安全の保証がなくなります。多分大抵の場合焼き切れます。)急いで付け替えてなんとか完成。
電源 コンデンサの充電に絶対必要な部分です。これが無いと回路を全部作ったとしても一生動きません。今回昇圧チョッパに使用するNE555という部品の耐圧が16Vが限界なので、15V前後のものを電源に使おうと思います。
安全回路 コンデンサに充電したけど射撃回路が動かなくてコンデンサから放電したい…。そんな時1番手っ取り早いのはショートさせることですが、何せ高電圧の電流です。ショートさせれば閃光と大きな音が出ます。(この大きな音に驚いた後輩の悲鳴が部内ではミームになってたり…)また、やり方が悪いと感電する可能性があります。いちいちショートさせるのは怖いので、メタルクラッド抵抗という抵抗を回路上に入れ、ダイオードから放電する際、安全に放電できるようにしました。 メタルクラッド抵抗とは、熱の拡散がしやすい、環境変化に優れた機器です。
電圧計 回路に流している電圧が分からないと最悪充電対象のコンデンサが爆発するかもしれないので電圧計が必要です。しかし、今回使う電圧は400V。500Vの電圧計が必要になります。500Vの電圧計は9/13現在、Amazonで¥1,620。少し高いです。ということで、50Vの電圧計の中に入っている抵抗の値を10倍にして500Vの電圧計にします。元々中に入っている抵抗は51kΩなので510kΩに取り替えれば良いわけですね。
スイッチ コイルの電源のONとOFFを切り替える重要な部分です。今回はトライアックを使用します。 部誌を書いている現在(9/13)未だに製作に至っていません。はよしろ
コイルと弾 これが無いとコイルガンじゃありません。 コイルは倉庫にあったものから、弾は部品箱に入っていたものを使っています。コイルは改良するかもしれません。
まとめ ここまで書いたことを全部回路図にするとこうなります。 昇圧チョッパ以外右側のトライアックの部分を除けば結構スッキリしてますね。 (抵抗の値など細かい部分は省いています。)
終わりに いかがでしたでしょうか。 今年コイルガンを作ってみた感想ですが まずめっちゃ大変でした。ド素人の技術からどうにかしてデータシートを読めるようにし、あまりなれていないユニバーサル基盤に部品をはんだ付けをし…という作業にとにかく時間がかかる。本当はもっと改良を加えたい点も沢山ありましたが、時間に追われ、出来ず終いです。反省点も多々あります。基盤をもうちょっと大きくすればよかった等…(書いていくとキリがない)。しかし、大変でしたが、とてもやりがいがある、というか楽しいものでした。 また今度、コイルガンを作る機会があれば、もっと電工について学び、筐体をつくったり、指定の電圧で充電が停止できるような回路を作ったりしたいものです。(Re:ゼロから始めるコイルガン製作) 最後に、ここまで技術を提供して頂いた前部長、部誌の校閲・発行等をして頂いた顧問の先生方、編集担当の方々、このPositronを読んでいる皆様に感謝申し上げます。 それでは皆様、物理部展#2022をお楽しみください。</description></item><item><title>プラレールの改造について</title><link>https://asanobuturi.github.io/document/2022/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/3/</guid><description>はじめに 物理部の中3の電工班です。今回が初めての部誌となっています。今回は、文化祭で展示する作品の説明的なものを書かせていただきます。
始めたきっかけ 部活の先輩から譲り受け、引き継ぎました。その時はラズパイ内蔵でライトが光り、モーターが回っていましたが、レールの上は走っていませんでした。 先代ではラズベリーパイを使用していましたが大きすぎて、配線の都合で何故か起動もしなくなったのでArduinoというマイコンを使用しました。 しかし、ArduinoにはWi-Fi機能がないため基本外部との通信ができませんでした。そのため、下に書いた通り、赤外線信号を使用することにしました。
全体像 この改造では、PC、ArduinoMega、ArduinoUnoとその他諸々の部品を使いました。使用部品のすべては下に書いてあります。この3台の通信の関係は以下のようになります。
赤外線通信や、シリアル通信については後ほど説明します。
今回の改造での使用部品 今回使用した部品です
プラレール Arduino Nano 1台 トランジスタ 2SC2120-Y 1台 LED4本と抵抗器4つ(前と後ろのLED) 9V型電池1つ 配線用の線と基盤 必要数 信号装置側 Arduino mega1台とそこに取り付ける自作シールド 信号装置ユニット(LED3つと照度センサー) 4組 専用線路(信号装置ユニットを取り付け、CdSセル各1つ) 4台 液晶モジュール 1602A 1台 ブレッドボード ジャンパピン 必要なだけ その他配線用導線 必要なだけ そもそもArduinoとは Arduinoとは、マイコンの一種であり、デジタル入出力、アナログ入力、アナログ出力(PWM(パルス幅変調)を使ったデジタル出力)、USBを使ったシリアル通信などに対応しています。下の画像はArduinoの中でも一番有名なArduino Unoです。(Arduinoの画像3つはArduino公式ストアからです。)
しかし、これではプラレール本体に積み込むのには大きすぎます。そのため、今回プラレールの中に入れたのは下のArduinoNanoです。 こちらはUnoよりも小さいのですが、機能はほとんど変わらないので、便利です。しかし、部活には、Nanoの正規品がなかったので、ほぼ仕様が変わらない互換品を使用しました。 また、信号装置側では、信号ユニット4台、液晶モジュール1台、赤外線送信線1本、その他諸々をつなぎたいのですが、UnoやNanoにはデジタルピンが13本(正確には、アナログピンもデジタルピン扱いできるので、実質、18本ですが、ここでは面倒ですので割愛します。)しかないので、足りなくなりました。そのため、ピン数が、53本(デジタルピンのみでは)ある、ArduinoMegaを使いました。
赤外線通信とは 今回は、信号装置からプラレールへの送信のために使用しました。赤外線通信とは目には見えない赤外線を高速で点滅させることにより、データを送信することです。それをArduinoでやろうとすると、高速に赤外線LEDを点滅させる必要があるうえ、他のプログラムとの同時実行を行う必要があり難易度が高いため、専用ライブラリを使用しました。それが、IRremoteという赤外線通信用のライブラリです。これを使用することで赤外線信号を簡単に入出力できます。IRremoteは参考にしたサイトに合わせてバージョン2.8.1を使用しています。このライブラリでは、赤外線の受信、送信が可能で赤外線信号を16進数32ビットで管理していて容易に通信を行えます。
シリアル通信について この改造ではPCとArduinoMegaとの接続に使用しました。厳密にいうと、シリアル通信をUSBに変換していますが、シリアル通信と同様に使用できます。ArduinoMegaでは、パソコンから送られてきた速度情報を赤外線信号にして、ArduinoUnoに渡す役割と、パソコンに自作した線路上のセンサーを使って取得した車両の位置を送信しています。シリアル通信については詳しくはこちら を参考にしてほしいのですが、簡単に言うと、一本の信号線で電圧の強弱をもとにデータを送る方法です。
https://qiita.com/hsgucci/items/eee5894e3651d0a8cb75から引用。パラレル通信については後ほど解説
ここでシリアル通信でArduinoMegaと接続しているPC側の説明をします。こちらは、Arduinoで使用しているC++(厳密にはArduinoではC++の拡張言語を使用)とは全然違うHTML+CSS+JavaScriptで操作しています。理由は、単純にJavaScriptのほうが環境構築が楽だったからです。webブラウザでも、chrome89から使用可能になったWebSerial APIを使うことでシリアル通信ができるので(詳しくは長くなるので説明しませんが、こちらを参考してください)これを使用してシリアル通信を行っています。
液晶モジュールについて 今回使用した液晶モジュールは1602Aという型番のものです。 これをArduinoで制御するにはパラレル通信か、シリアル通信での接続が必要ですが、シリアル通信に必要な専用の変換基板がなかったのでパラレル通信にしました。シリアル通信は前述したとおりですが、パラレル通信は、複数の線で制御するしくみです。
パラレル通信によって液晶モジュールにたくさんArduinoのピンが取られてしまいましたが、ArduinoMegaにしたので問題はありませんでした。 液晶モジュールをArduinoで制御するには信号線4本(か8本)を制御する必要がありますが、難しいので、ここで配布されている専用のライブラリを使用しました。 このライブラリは最初に設定(ライブラリを読み込み後、LiquidCrystal(rs, rw, enable, d0, d1, d2, d3, d4, d5, d6, d7);)をすれば、あとは対応する文字をそのまま関数の引数に書く(必要ならカーソル移動後に lcd.</description></item><item><title>ヴィトゲンシュタインのカブト虫</title><link>https://asanobuturi.github.io/document/2022/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/7/</guid><description>「シュレディンガーの猫」を考える 「シュレディンガーの猫」は有名だろう。（細かい説明は割愛するが）かの有名な物理学者シュレディンガーが
猫と任意の放射性物質を箱に密閉する。 放射性物質が崩壊する確率を一時間あたり50%とする。 崩壊した原子が出す放射線を検知すると毒ガスが放出される。
といった条件下で、観測者が箱の中身を確認するまで「猫が生きている確率」と「猫が死んでいる確率」がそれぞれ50%ずつである、 つまり猫は「生きているし死んでいる」という、今までのマクロな世界における解釈と矛盾した奇妙な状態におかれることになるとした。 彼はこの思考実験をもってミクロの世界における確率の解釈に対して問題提起をしたのだ。
なぜ「シュレディンガーの猫」がここまで有名になったのだろうか。物理（量子力学）と関係ない文脈においても、「奇妙な思考実験」や「結果として導かれるパラドックス」 の代名詞のようにこの名前はしばしば登場する。 これはおそらく「＜人名＞の＜一般名詞＞」という言葉の組み合わせの覚えやすさ、そして「シュレディンガー」「猫」という言葉を組み合わせた時の 語呂の良さに起因するのではないか。今回はもう一つ、この人名/一般名詞の思考実験を紹介しよう。「ヴィトゲンシュタインのカブト虫」だ。
ヴィトゲンシュタイン？ ゆっくり解説レベルの雑な導入ではあるが、まずは今回触れる「ヴィトゲンシュタインのカブト虫」の前提知識から紹介していこう。 ルートヴィヒ・ヴィトゲンシュタインはオーストリア出身の哲学者だ。第一次世界大戦の直後に出版した『論理哲学論考』、 そして遺稿をもとに出版された『哲学探求』で有名で、特に『論考』は文庫本にもなっているほか、
語りえぬことについて、人は沈黙せねばならない。
という一節においてよく知られている。 （そして非常に難解なことも）
では『探求』はどうか？ 『探求』は一言で言うなら自己批判だ。『論考』で示された
言語に含まれる言葉一つ一つはそれそのものを表す像（実体）と対応していて、全ての言葉には決まった意味がある。目の前のものを指さして、それに対応する名前を呼ぶのに近い。
といった、ヴィトゲンシュタイン以前の哲学者と同じ潮流にある古典的な言語観に代わる新たな言語観の提示など、後期ヴィトゲンシュタインの思考を辿る上で欠かせない著作だが、 こちらは『論考』の影に隠れあまり語られることはない。
例えばある人の思い出を記録したアルバムのように、通し番号が付され独立した節（アルバムにおける写真）を最小単位として、 あるものは独立して、またあるものは他の節と共に一つの記述に対する一連の考察を構成する「アルバム形式」や ダッシュ（――）を挟み一方では現在（執筆時）のヴィトゲンシュタインが、 もう一方では『論考』以前の言語観をもつある哲学者（過去の彼を念頭に）が語る「疑似対話」などの独特な論述や分量の多さ、 そしてそもそも文庫本になっていないなど読破する上でハードルが高いのが原因だろうか。
今回は、『哲学探究』でヴィトゲンシュタインが示した考え方に少しでも触れてもらうため、彼が無意識下に想定しているであろう前提なども明らかにしながら、 『探求』で行われた「カブト虫」に関する思考実験をなるべくわかりやすい形で「追試」してみよう。
追試 「カブト虫」の思考実験は§243から行われる私的言語、とりわけ「痛み」に代表される感覚語についての哲学的考察の一環だ。まずは「カブト虫」の思考実験の前提知識を以下に示す。
ヴィトゲンシュタインは先に触れた『論考』的言語解釈を疑問視している。（「対称と名」モデル） 代わりに、言葉の意味は実際に「言語ゲーム（独：Sprachspiel）」でどう扱われているかで解釈すべきと考えている。 ニュアンスは「ことば遊び」が近い。言葉を用いたやり取りなどを「ゲーム」にたとえ、言葉の意味をゲームにおける機能に注目してとらえる。
この「論考」的な「対象と名」モデルを前提にして以下の思考実験を行うとわかりやすいはずだ。
あるグループの人たちがそれぞれ箱を持っていて、その中に「カブト虫」と呼ばれる何かが入っている。 他の人が持つ箱の中身は見えない。 「カブト虫」が何を表すかは自分の「カブト虫」を見ることによってわかる。
という条件で、「カブト虫」という言葉と「カブト虫そのもの」の関係について考えてみよう。 お互いの箱の中身が見えるなら、「カブト虫」が何を指すかは明確だ。 しかしここでは他人の箱の中身が見えない。もしそうであれば、箱の中身が何であっても「カブト虫」という名が指す「何か」は 実は何であってもよいのではないか。自分にとって、他人の箱の中にある「カブト虫」はおおよそカブト虫とは呼べないような代物であっても、 はたまた常に変化し続けるような何かであっても、 本人がそれを「カブト虫」と呼んでいるなら「カブト虫」という言葉を用いる言語ゲームにおいて 何か齟齬が生じるわけでもないし、そもそもそれを判別する手立てもない。 ヴィトゲンシュタインはそう考えたのだ。
それでもこの人々の『カブト虫』という言葉が使用されているとしたら？（§293）
その場合、箱の中にある「カブト虫と呼ばれるもの」 （注：カブト虫という名前のことではない。本人は「カブト虫」と呼ぶが他の人が見たら「クワガタ」と呼ぶようなものでもあってよい、ということ。） 自体はこの言語ゲームにおいて「あるもの」としてすら意味を成さず、そもそも言語ゲームに属していないといえるのだ。 そもそも、これは箱の中に何も入っていなくとも成立するのだから。
ヴィトゲンシュタインはこの思考実験を通して 「痛み」に限らず感覚を表す文法を「対象と名」――ここでは痛みと痛みそのもの（痛みの像？）――というモデルに即して解釈しても、 上記の理由でこのとき想定した「痛みそのもの」は意味を成さず、これを想像することはナンセンスであることを示している。 （そして我々がそう解釈したくなる誘惑に駆られることも） つまり痛みの対象、痛みそのものが「存在する」か「存在しない」かではなく、それを想定すること自体がナンセンスということだ。</description></item><item><title>知れば知るほど知りたくなるLEDの世界</title><link>https://asanobuturi.github.io/document/2022/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/6/</guid><description>はじめに こんにちは。去年の部誌も読んでくださった方は1年ぶりです。高校一年生のK.R(去年の部誌ではR.Kとして紹介)です。 この記事を書き始めたときにはもう文化祭まで2週間を切っており、急いで執筆することを強いられています。そのうえ、まだ僕は物理部で製作途中の作品がありそれも完成からは程遠く、残り2つの兼部先でも多くの作業を抱えており、本当にこの記事を書き終わって作品を作り終わり他の部活のタスクも終わらせることができるかが心配です。もし僕が文化祭の日に死体が如く部室に横たわっていたら、作品が完成しなくて落ち込んでいるか数々の作業で疲労しているかのどちらかが理由であると思います。部員の皆さん、僕の死体を発見した時にはジュースでも奢って下さい。 字数稼ぎができました。では、本題に入りましょう。 この記事では、僕が電子工作班の作品制作でよく使用している、LEDについて自分なりに解説します。 僕はPC班員として物理部に入部し、中2までは気まぐれでプログラミングをしていましたが、中2の後半になって電子工作に興味を持ち始め、中3の後半になってようやく本格的に電子工作を始めました。遅咲きですね。 そのときに先輩が途中まで制作した、LEDを使った作品を引き継ぐことになり、自分でどうやって動かすかを調べて最後まで配線しました。入部してからPC班である程度構築されていたプログラミングのスキルを利用して、そのLEDをプログラミングで制御することもできました。 それをきっかけに主にLEDを使った作品制作を本格的に始めるようになりました。 ということでこの記事では、僕がLEDの作品を1年作り続け、暇があれば電子部品のサイトを徘徊していたその経験に基づいて、LEDの種類とその制作例、作品の大まかな仕組みを説明します。 タイトルの「知れば知るほど知りたくなる」というのは1分でなんとなく思いついたタイトルですし、本当に知りたくなるほど奥深い世界を描写できているかは分かりません。それでもこの記事をきっかけに少しでもLEDに興味を持ってくれる人がいることを願っています。 拙い文章ではありますが、どうぞお楽しみ下さい。
そもそもLEDとは まずはLEDの基本的な内容・特徴について説明します。LEDとは発光ダイオード(Light-Emitting Diode)の略で、ダイオードの一種です。 ダイオードとは、アノードからカソードの1方向にしか電気を流さない(整流作用をもつ)電子部品です1。その性質を生かし、逆流を防止するために回路に挟まれたり、ACアダプターなどで平滑回路とともに交流を直流に変換する回路の一部(整流回路)に使われたりしています。 下の図は、ダイオードの回路図記号です。 LEDとは、そのダイオードの中でも電気を流して発光するものを表しています。下の図はLEDの回路図記号です。 また、LEDの中で最も一般的なものは、下の写真のような「砲弾型LED」とよばれるものです。 砲弾型LEDは、発光する素子をプラスチックで覆うことで素子を保護し、素子からの光を拡散しています。 LED単体での光の色は、LEDが発する光の電磁波の波長によって決まります。例えば、紫色の波長は380nm〜450nm、青色が450〜485nm、緑色は500〜565nm、赤色は625〜780nmです。波長が紫色から赤色の範囲までの光はヒトの目で見ることができ、その範囲の光線を可視光線といいます。赤色よりも波長が長い光は赤外線とよばれています2。 砲弾型LEDにも白色で光るものはありますし、恐らく殆どの家庭に白色のLED電球や白色のLED蛍光灯はあると思いますが、可視光線の中に白色はありません。今の技術で白色の電磁波を作ることは不可能なのです。 しかし、複数の色を合わせることで、白色などの可視光線では表現できない光の色を作ることが可能になります。読者の多くが「光の三原色」という言葉を聞いたことがあると思います。「光の三原色」の考え方に沿った場合、赤色、緑色、青色の3色のLEDを組み合わせ、それぞれの明るさを調節することで色が混ざって様々な色をつくることができます。例えば、すべてのLEDを点灯すると白色に見え、赤色のLEDと青色のLEDだけを点灯すると紫色に見えます。色のこのような表現法のことを、それぞれの頭文字をとって「RGB」といいます。「R」、「G」、「B」は色の三原色のそれぞれの色を英語にした頭文字(Red、Green、Blue)をとっています。 3
ここまである程度LEDの基本について説明しました。 もっと詳しいことは第4章以降で説明しますが、LEDは部屋などの照明に使われているのは勿論、人々に情報を提供することも、部屋の雰囲気を変えることも、娯楽として利用することもできるのです。このように、LEDは人間の生活においてとても身近であり、大切な役割を果たしているのです。
マイコンとLED ここからはLEDの形態や作品例を説明したいと思うのですが、その前に、LEDを扱ううえで大切な「マイコン」について説明します。「マイコン」とは「マイクロコントローラー」の略で、プログラムを書きこむことで電気の複雑な入力(スイッチやセンサーなどの読み取りなど)や出力(モーターの回転やLEDの点灯など)ができる集積回路です。 4 マイコンを単体で扱うこともできますが、マイコンをさらに扱いやすくした基板であるマイコンボードというものもあります。マイコンボードの代表としては、2005年にイタリアで開発されたArduino(アルドゥイーノ)が挙げられます。下の図は、Arduinoの主要モデルであるArduino UNOの写真です。 Arduinoとは、ピンに導線を挿してセンサーやトランジスタ、LEDやモータードライバーやモーターなどの電子部品を配線して回路をつくり、Arduino IDEという専用のアプリケーションを使用して、C++をもとにしたプログラミング言語でプログラムを記述し、コンパイルして作ったスケッチを書き込むことでプロジェクトが完成します。 下の図は、Arduinoをプログラミングする流れを大まかに描いた図です。 ライブラリも充実しており、後述するたくさんの種類のLEDをすべて制御することができます。 ここまで難しい言葉を羅列してきましたが、やっていることは「配線してプログラムを書き込む」という、たったこれだけなのです。Arduinoは、初心者には本来難しいはずのマイコンの制御を初心者にも簡単にできるようにした、革新的なアイテムなのです。
LEDの種類 ここからは、LEDを光らせる形態としてどのようなものがあるのかを説明していきます。勿論この世にはたくさんの形態があり、部誌の中にすべてを収めるのは難しいです。個人の2年間の電子工作の経験をもとに、「これはよく使われる」と思ったLEDを4個選びました。
砲弾型LED 第2章でも少し書きましたが、最も一般的な種類のLEDです。発光する素子にプラスチックのカバーがついているだけですが、その中にも更に細かい種類があります。 まずは、下の図を御覧ください。 LEDには端子が2つあり、長い方を「アノード」、短い方を「カソード」といいます。例えば電圧が5Vの電源装置を用いた場合、およそ200Ωの抵抗を回路の中に入れることで明るく点灯します。 しかし、このようなLEDは単色にしか光りません。「場面によって光る色を変えたい」「LEDの色を滑らかに変えたい」などと思ったら、下の図のようなLEDを用いるとよいでしょう。 このLEDは、中に光の三原色である赤色、緑色、青色のLEDが入っていて、それぞれのLEDの光の量を調整することで、様々な色の光を作ることができます。このようなLEDを「RGB LED」とよびます。 このLEDは端子が2個ではなく4個になっています。なぜそうなっているのでしょうか。 そもそも端子が4つのRGB LEDには主に「アノードコモン」「カソードコモン」の2つの種類があります。 まず、アノードコモンのRGB LEDには1つの+端子、3つの-端子があります。+端子に電源の+極をつなげ、3つの-極に流れる電流の大きさをそれぞれ制御することで、3つの光の量を調整することができます。 一方、カソードコモンのRGB LEDは、3つの+端子、1つの-端子があります。-端子を電源装置の-極に繋げ、残りの3つの+端子の電流の大きさを制御することで様々な色に発光させることができます。 Arduino等のマイコンボードには、ピンがそのまま+極となるためアノードコモンのRGB LEDよりもカソードコモンのRGB LEDのほうがよく使われます。 その他、「素子の中に抵抗器を内蔵しているLED」「アノードからカソードに電気を流すだけで色がゆっくり変化するLED」「キャンドルのように明るさが変わるLED」「リモコンなどに使われる赤外線LED」など、砲弾型LEDにも様々な種類があります。 このように、LEDの中では一般的な砲弾型LEDであっても、作りたいものに合わせてその種類も豊富なのです。
チップLED 次に説明するのは「チップLED」です。チップLEDとは、プリント基板上などに表面実装する(穴に導線を挿してはんだ付けをするのではなく基板の表面にはんだ付けをすること)ためのLEDです。「表面実装用LED」ともよばれたりします。 そのサイズは、多くの砲弾型LEDの樹脂部分の直径は5mmであるのに対し、上の画像のLEDの場合、長辺が1.6mm、短辺が0.8mmと、素手で扱うことがとても難しいくらいに小さいです。 この小さなLEDですが、その小ささを生かして身近な様々な製品に利用されています。 例えば、部屋の天井にあるLEDの電灯は、1つの電灯で1つのLEDの素子が使われていると思われがちですが、そうではなく実はたくさんのチップLEDを並べて点灯させることで部屋を照らすという仕組みの製品がほとんどなのです。 また、この後説明するLEDマトリクスパネルやLEDテープのLEDの1つ1つもチップLEDです。RGBのチップLEDが使われていることもあります。 さらに、多くの電気製品に搭載されていて、電源が入ると点灯したり色が変わったりする、電源ランプにも多くはチップLEDが使われています。 その他にも説明しきれないくらいにチップLEDには様々な使われ方があります。そのくらいチップLEDとは普段の生活に身近であり、日常生活に欠かせないものなのです。
LEDマトリクスパネル 次に説明するのは、たくさんのチップLEDを一面に並べることで、それぞれのLEDの点灯/消灯で文字や絵を描画することができる、「LEDマトリクスパネル」です。 ArduinoなどのマイコンボードやRaspberry Piなどのシングルボードコンピューターなどを使用してプログラムによって制御したり、専用のコントローラーを使用したりすることで自由自在に制御することができます。 下の写真は、Arduinoを使用してLEDマトリクスパネルに文字をや絵を表示させてサインボードを作っている例です。 おそらく多くの人がこのようなパネルが店などに使われているのを一度は目にしたことがあると思います。また、鉄道の発車標などの電光掲示板にもLEDマトリクスパネルが使われています。 掲示板の形態が多様になりつつある現代においてもLEDマトリクスパネルは大切な役割を果たしています。 たくさんLEDがあることを利用して、他にも様々な作品に応用することが可能です。その応用例は第5章で紹介します。 制御しやすいLEDマトリクスパネルで有名なものには、アメリカのAdafruit Industriesが製造するRGB Matrix Panelがあります。このLEDマトリクスパネルは、Adafruitが提供するライブラリを使用して、簡単にArduinoやRaspberry Piでマトリクスパネルを制御することができます。ちなみにRGB Matrix Panelの使い方についてはこのページが参考になります。 32x16 and 32x32 RGB LED Matrix</description></item><item><title>編集後記</title><link>https://asanobuturi.github.io/document/2022/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/12/</guid><description>この度は2022年度物理部部誌を読んで頂きありがとうございます。Web版の編集後記なので、web版作成について少し話そうかと思います。web版はMarkdownで提出された原稿を先代が作ったpandocによる部のブログ用テンプレートを改造して原稿から簡単にHTMLを出力できるようにして作りました。それがあるならすぐに終わると思うかもしれませんが、実はconfigをいじったりレイアウトがおかしい状態で出力されたりとあるので、そこそこ時間がかかりました。こういうの書くの苦手なのでここらへんで切り上げたいと思います。読んでいただきありがとうございました。</description></item><item><title>自作OSで文字列をPC98に表示する</title><link>https://asanobuturi.github.io/document/2022/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/10/</guid><description>はじめに 二度目の登場の高2のN.Kです。展示用に作ったものの簡単な解説をしようと思います。
実際の展示 まず文化祭で展示する物を紹介しようと思います。 画像の通りPC98でTHANK YOU FOR COMING TO APCと表示させています。
基本的なプログラムの仕組み ざっくり言うとメモリーの中のテキストVRAMに割り当てられている領域にASCII文字コードを書き込んで文字を表示しています。 一定の周期でコンピュータがテキストVRAMの内容を読み込んでモニターへ送るようになっているので、テキストVRAMに文字を書き込むと書き込んだ番地に応じた画面上の位置に文字が表示されます。
実際のコード 今回はアセンブリ言語というプログラミング言語を使用します。 https://github.com/asanobuturi/PC98APCOS で全体のコードを公開しています。 はじめはフロッピーディスクの情報を指定します。 1行目のJMP entryで文字を書くプログラムの場所を示していますJMP命令はC言語でいうところのgoto文と同じです。 2行目はNOP命令でCPUに何もしないで一命令分の実行時間を消費するものだそうです。なぜこれが必要なのかはよくわかりませんがこれが一般的だそうです。 3行目はブートセクタの名前を8byteで指定しています。ブートセクタとは起動に必要なプログラムや情報を記録したものです。 4行目は1セクタの大きさを指定しています。セクタとは円盤型の記憶媒体の最小の記録単位でフロッピーの場合は512byteなので512を指定します。 5行目はクラスタあたりのセクタ数を指定しています。 クラスタとはOSが記録媒体を管理する際の最小単位で2の累乗である必要があり、今回は1クラスタあたり1セクタとしています。 6行目は予約領域のセクタ数を指定しています。 予約領域とはPCの起動に必要なプログラムのことですなわちこのプログラム自身です。ディスクのはじめにこれがあるので1を指定しています。 7行目はFATの個数で2を指定するのが一般的だそうです。 8行目はルートディレクトリでのファイルの情報が格納されているディレクトリエントリの数をいれています。 9行目はディスクのセクタ数です。フロッピーディスクは2880セクタです。 10行目はハードディスクだと0xf8、リムーバブルメディア(電源が入っている状態でも取り付けや取り外しができるるもの ex:USBメモリ,フロッピー)だと0xf0を指定します。 11行目は一個のFAT(ファイルやディレクトリについての情報を記録する特殊なシステム領域)あたりのセクタ数を指定しています。 12行目はトラックという単位が何セクタで構成されているかを指定しています。普通のフロッピーでは18セクタです。 13行目は磁気ヘッドの数を指定します。 表と裏があるので2です。 14行目はこのボリュームの手前に存在するセクタ数で、パーティションを使っていないので0を指定しています。 15行目はドライブの総セクタ数が0x10000を超えるときにドライブの総セクタ数を指定します。 今回は超えていないので0を指定しています。 16行目はBIOSで使われるドライブ番号でフロッピーだと0x00を指定します。 17行目はWINDOWSで使う領域で当然WINDOWSを使わないので0です。 18行目は以下三行の設定が存在している場合0x29を指定します。 19行目はボリュームを識別するための番号で8桁の十六進数で指定します。 20行目はディスクの名前を11byteの文字列で指定します。 21行目はフォーマットのタイプを8byteの文字列で指定します。今回はFAT12です。
JMP entry DB 0x90 DB &amp;#34;HELLOAPC&amp;#34; ; ブートセクタの名前 DW 512 ; 1セクタの大きさ DB 1 ; クラスタの大きさ DW 1 ; FATがどこから始まるか DB 2 ; FATの個数 DW 224 ; ルートディレクトリ領域の大きさ DW 2880 ; このドライブの大きさ DB 0xf0 ; メディアのタイプ DW 9 ; FAT領域の長さ DW 18 ; 1トラックにいくつのセクタがあるか DW 2 ; ヘッドの数 DD 0 ; パーティションを使ってないため0 DD 0 ; 総セクタ数&amp;lt;0x10000より0 DB 0x00 ; フロッピーディスクでは0x00 DB 0 ; WindowsNT予約領域 DB 0x29 ; 下の3つの設定が存在することを示す。 DD 0xffffffff ; ボリュームシリアル番号 DB &amp;#34;APC &amp;#34; ; ディスクの名前（11バイト） DB &amp;#34;FAT12 &amp;#34; ; フォーマットの名前（8バイト） 何行目に何をしているかはわかったけどDBやらDDやらDWは何だと思われたかと思います。DBはファイルに1byte書き込むという命令です。DWは2byte、DDは4byteです。 それじゃあDB &amp;quot;HELLOAPC&amp;quot;などのDBのあとに文字列が来るものは何だ、明らかに1byteではないじゃないかと感じると思いますがDB &amp;quot;文字列&amp;quot;とすると文字列を構成するそれぞれの文字の文字コードをしらべて1byteずつ書き込んでくれるようになっています。 また0xで始まる数字はそれが16進数であることを示しています。0x12は10進数で18です。</description></item><item><title>部内で鯖を飼育する</title><link>https://asanobuturi.github.io/document/2022/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/11/</guid><description>鯖（生き物ではない） 鯖 サーバー(server)コンピューターのこと。コンピューター・ネットワーク上でクライアントから受けたリクエストに対し、様々なサービスを提供するシステム。 &amp;ndash;(株)朝日新聞出版発行「知恵蔵」より
もちろん生き物の鯖ではありません。物理部の劣悪な環境下では魚の鯖はおそらく飼育不可能でしょう。
鯖を飼う理由 物理部ではいままで部員にWindows搭載ノートパソコン等を購入することを部員に推奨してきました。これは物理部の限られた部費で部員全員分のコンピューターを用意するのが困難なためです。実は物理部の部員は100人ほどいます。なお部活出席率は普段から部活にいる20人分のコンピューターを部活動が負担するのは到底不可能です。データをローカルに保存する都合上、毎回の部活で利用するコンピューターが固定されることになります。国税庁が言うにはコンピューターも消耗品、耐用年数は5年とされています。プログラミングや動画編集などを行う都合上ある程度のマシンパワーが必要になってくるため1台当たりの値段はかなり高額になります。 そこで考えたのは「部内にNASを立ててそこにデータを保管する」というものでした。しかし市販のNASを買って設置するだけでは面白みに欠けます。そんなわけで部内にファイルサーバーを建てるという結論に(自分の中で)達しました。
鯖の品種（パーツ）の選定 サーバーたるものやっぱり常時起動は見据えなければなりません。また浅野学園では生徒は学校のネットワークを利用するのを利用することは禁じられているため、部内ネットワークを立てる必要も出てきました。
CPU マザーボード メモリー SSD グラフィックカード 電源 ケース オペレーティングシステム Wi-Fiルーター それぞれ選定品とその理由を説明できればと思います。またCPU～グラフィックボードは実店舗で購入できるかどうかも判断材料に含まれます。
CPU 今回はIntel Corei3 10105を選択しました。理由は簡単。現行のCoreシリーズで一番省電力だから。サーバーなのでやっぱり電力は気になります。市販のNASではCeleronなどが一般的ですが、将来的にサーバーからデスクトップコンピューターに生まれ変わることも見据えて Core i3を選択しました。 マザーボード ツクモでメモリースロットが4本で一番安かったASRockのH570M Pro4を選択しました。無駄に光ります メモリー メモリーはファイルサーバーで割とこだわるべき場所な気はします。無難に8GB2枚組です。 SSD ファイルサーバーでかなり重要な場所です。これを適当に決めてしまうと故障によってファイルの消失もあり得ます。今回はシステムドライブとデータドライブを分けることにしました。システムドライブはADATAのSATA120GB、データドライブは信頼性と速度を重視しKIOXIAのM.2 1TBモデルを選択しました。 グラフィックカード 所詮ファイルサーバーなので高性能なものは必要ありません。当初はCPUは内蔵グラフィックなしの下位モデルを選択し、日本最安グラフィックカードのGT710を使用しようかと思いましたがツクモに行ったところCPUの価格差があまりなかったので内臓グラフィック搭載のCPUを選びました。強いて言うならIntel UHDグラフィック630でしょうか。 電源 これはサーバーで一番おろそかにしてはいけないものじゃないでしょうか。激安の電源ユニットを利用して発火したら洒落になりません。比較的安め、ある程度の信頼はできる玄人志向の450W電源を選びました。 ケース 別にケースは性能に直結しないのでどんなものを選んでもいいのですが、物理部は収納スペースの都合上スチールラックの上に設置することになったので横置きケースを選ばざるを得ませんでした。これで地震が来ても大丈夫(なはず)。 オペレーティングシステム ファイルサーバーとして運用する都合上管理は簡単なほうがいいに決まってます。そのほうが引き継ぎも楽です。詳細は後ほど。 Wi-Fiルーター サーバー設置場所と物理部の普段の活動場所との間には鉄製の扉が2枚あります。そのためアンテナが本体から飛び出しているもの且つWi-Fi6に対応していて、ちょうど購入時にAmazonセールで安かったTPLINK AX4800を購入しました。 鯖のOS オペレーティングシステム、これはかなり迷いました。ubuntuを利用してもよかったのですが、後輩への引き継ぎが困難を極めると予想したため、データ保管サーバー用のOSとしては定番なOpenmediavaultで環境を構築しました。このOSはWeb上で簡単に操作できるのが特徴です。やっぱり操作しやすいのはいいですね。
トラブル OpenMediaVaultをインストールした後にトラブルが発生しました。それは「OpenMediaVaultがIntel I219-Vを認識してくれない」というものでした。Intel I219-VはマザーボードのRJ45(=LANコネクタ)の端子です。調べてみるとOpenMediaVaultを導入する前にUbuntuをインストールし、I219-Vのドライバーを導入しないといけないらしい。いまさら再インストールするのは時間がかがりすぎると感じたので、SSDのみI219-Vを搭載していないPCで起動させ、そこで初期設定のみ進めることにしました。インターネットに繋げられないのですばらしいWeb操作も一切できません。ずっと黒い画面とにらめっこ。精神的にもつらい。
ファイル構成 前述の通りこのサーバーにはデータドライブとして1TBのSSDがあります。そこで今回は以下のように割り振るようにしました。
KIOXIA 1TB SSD ├ goole drive backup -250GB └ data -750GB google drive backupは物理部の共有ドライブの内容をクローンする予定でしたが、時間がないので後輩に頑張ってもらいます。 割り当てさえ決まったらあとはSMBを有効にしてPCからログインするだけです。</description></item><item><title>部長挨拶</title><link>https://asanobuturi.github.io/document/2022/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2022/1/</guid><description>今回はご多用の中物理部の展示にお越しくださいましてありがとうございました。 ここ数年の間で今年がはじめてまともに文化祭を開催できる年になったのではと思います。2019年度は打越祭2日前に京急線でのトラック衝突事故が発生。2020年度はコロナウイルスの影響で校内関係者のみ、2021年度は生徒による招待者のみの来場となりました。また2021年度は上記に加え2日目にJRの変電所火災により京浜東北線が運転見合わせとなるということもありました。最高学年である私たちの学年にとって(語弊があるかもしれませんが）まともに文化祭が開催されたのは2018年度、中学1年生だった時のみです。これが何を意味するのか。それは物理部の大半は「通常の」文化祭を運営側として経験したことがないのです。 そのため手探りでなにかと不手際があるかもしれませんが、温かい目で見ていただけたのであれば幸いです。</description></item></channel></rss>