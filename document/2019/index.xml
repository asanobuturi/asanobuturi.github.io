<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2019年度・部誌 on 浅野学園物理部</title><link>https://asanobuturi.github.io/document/2019/</link><description>Recent content in 2019年度・部誌 on 浅野学園物理部</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Thu, 01 Jan 1970 00:33:39 +0000</lastBuildDate><atom:link href="https://asanobuturi.github.io/document/2019/index.xml" rel="self" type="application/rss+xml"/><item><title>φの累乗とフィボナッチ数列</title><link>https://asanobuturi.github.io/document/2019/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/11/</guid><description>筆者の独特の文体が原因で怪文書となっております。お読みの際は十分お気を付けください。
問題
フィボナッチ数列の各項を\(F_n\)とし、\(F_1=F_2=1\)とする。\(\phi\)が\(\phi^2=\phi+1\)を満たす\(1\)より大きい実数であるとき、\(\lim_{n \to \infty}\frac{F_n+1}{F_n}=\phi\)となることを証明せよ。ただし、\(F_n\)の一般項を求め、利用してはいけない。
答えはこれを読み進めた最後に書いておいた。なんなら途中をすっ飛ばしても構わないが、その途中がまさに私がこれに気づいたきっかけなので、ヒントが欲しければ途中を読むのをお勧めする。
√5進法と聞いて_冬の図書館
私の頭が一番冴えるのは文化祭直後から冬の間である。夏のように湿度が高いと頭が碌に動かないし、それでいて気温が低いと猶更である。そういう理由で私はこのアイデアを昨年の暮れ、図書館でルーズリーフに落書きをしていたあの時からずっと温めていた。
昨年の部誌では前部長（当時も今も私のクラスメイトである）が\(n\)進法の\(n\)を\(1\)以上の実数（厳密には\(1\)でさえなければ任意の正の実数で考えられるが）に拡張し、\(\sqrt{5}\)進法なる画期的なものを思いつき、それについて考察を行っていた。
この\(\sqrt{5}\)を\(\phi\)に置き換え、分数について考察しようと思ったのは私の不調と丁度重なる2018年が終わろうとしていた時だった。その時偶々大和駅の近くにできた図書館の一部屋が「自習室」として開放されていたのでそこで古典の勉強をしていた時、ちょうどそれがひと段落したので余ったルーズリーフに色々書き込みながら\(\phi\)の累乗を\(\phi^2=\phi+1\)を代入し続けて\(\phi\)と整数だけで表そうとしていた。こんな風に。
\(\phi^1=\phi+0\)
\(\phi^2=\phi+1\)(\(\phi\)の定義。以下この式を①とする)
\(\phi^3=2\phi+1\)
\(\phi^4=3\phi+2\)
\(\phi^5=5\phi+3\)
\(\vdots\)
この①を適宜移項し\(1=\phi^2-\phi\)の形にして両辺を\(\phi^n\)で割れば、これは
\(\phi-n=\phi-n+2-\phi-n+1\)（この後もこれが滅茶苦茶出てくるので、②とする）
となる。これを延々と代入すれば上に示した\(\phi\)の累乗シリーズを負に拡張できる。つまり、こういうことである。
\(1=0+1\)
\(\phi^{-1}=\phi-1\)
\(\phi^{-2}=-\phi+2\)
\(\phi^{-3}=2\phi-3\)
\(\phi^{-4}=-3\phi+5\)
\(\vdots\)
先ほどから\(\phi\)の累乗の\(\phi\)の係数と定数の両方にフィボナッチ数列が出ている。これが証明のカギになるが、その解説は後で。
それはさておき、この式と②を適宜使えば、どんな実数でも\(\phi\)進法で表せるというわけだ。以下、\(\phi\)進数は\((\phi)\)と添えて表すこととする。
\(2=(\phi)+(-\phi+2)=\phi+\phi^{-2}_=10.01_{(\phi)}\)
\(3=(\phi+1)+(-\phi+2)=\phi^2-\phi^{-2}_=100.01_{(\phi)}\)
しかし、①を代入すれば、この\(3\)には別の表し方があることが分かるだろう。
\(3=(\phi)+(1)+(-\phi+2)=\phi+1-\phi^{-2}_=11.01_{\phi}\)
\(1\)だってそうだ。①の両辺を\(\phi^2\)で割って
\(1=\phi^{-1}+\phi^{-2}=0.11_{(\phi)}\)
とできるし、同様の代入を繰り返せば
\(1=0.1010101\ldots\_{(\phi)}\)
という循環小数も得られる。こんな具合に、どんな数も複数通り に表される。
ここで舞台が一旦変わるので、章を区切ることとする。
半分こと4等分_木曜放課後の教室
年が明けて\(\phi\)進法というおもちゃを無事数学同好会（昨11/16、同好会昇格に伴い数学研究会から改称）に持ち帰った私は先ほどの
\(1=0.1010101\ldots\_{(\phi)}\)
を睨んでいた。これをもっとシンプルな形にできれば…と思っていたのである。が、気づけば簡単なことだ。これを\(\phi\)倍すれば
\(\phi=1.0101010\ldots_{(\phi)}\)
となる。これを先ほどの式に足すと
\(\phi+1=1.1111111\ldots_{(\phi)}\)
が得られる。諸君なら左辺に見覚えがあるだろう。そう、\(\phi^2\)である。もちろんこれを\(\phi^2\)で割るしかない。
\(1=0.0111111\ldots_{(\phi)}\)
ここで、\(2=(\phi)+(-\phi+2)=\phi+\phi^{-2}_=10.01_{(\phi)}\)を思い出す。
ここまでと同様の変換で\(2=1.</description></item><item><title>「競争」</title><link>https://asanobuturi.github.io/document/2019/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/7/</guid><description>はじめに読もうね！
浅野学園物理部の展示に来てくださり、そして、この記事を読んでくださりありがとうございま す。
部誌っていうのは例年、その一年間部活動において何をしたか、どんなことをしたか、っていうの を書く場という雰囲気がありますが、特に規則があるわけではないし、普段物理部がやっていること は他の方々が十分というほど、紹介してくれているので扱うのは少しにします。
正直、部誌に中途半端に専門的なことを描くことを好みません。
理由は２つありまして…
一つ目に、専門的な知識を持った人から見ると退屈であること。
二つ目に、興味はあるが、あまり知識を持っていないという人が読んだときに何が書いてあるかは っきりとわからないことが多いということ（実体験）。
です。
要するに、自分と同じくらいのレベルの人からしか評価を受けないからです。
なので僕は、物理あるいはプログラミング、電子工作に興味がある人ない人、関係なく読んでもら いたいので、そういった知識が必要になることが少なくなるよう、持論を展開することにしました。 そこで、昨年の文化祭から今までに僕がフラッと考察した「競争」することがどんな影響をもたらす かについてちょっとした考察を紹介させてください。
競争について競争ってイイコト？
そもそも、「競争」とはどういうことでしょうか。「競争」というのは、二つ以上の物や人が互い に優劣を争うこととされています（Wikipedia「競争」を参考）。
つまり、競争とは、必ず競う相手がいて成立するものとなっているので、そこには、団体戦であっ たら「それぞれの団体」だったり、完全に個人戦であったら「個人」というものが、おのずと確立さ れるようになるでしょう。
そして、競争することによってその相手達よりもより良くなろうとして自己の能力の向上を図るこ とができるのです。加えて、競争し終えた後に、その相手との仲が深まることもあり得ます。
というわけで、「競争」がどういった場面にあるかを紹介していきます。
競技プログラミング唯一の物理部関連
「競技プログラミング」とは、出された問題をなるべく早く正確に処理するプログラムをつくる、 という競技のことです（アルゴリズムについての記事がより詳しく説明しています。）。僕らは自宅 で参加可能なコンテストに個人で参加しています。
ここ最近、物理部のPC班員の中で、僕を含めて3～4人くらいの人が競技プログラミングに手をつ けていて、他の部員との勝ち負けや、知らない人を含めた全体の順位で競ったり、ゲーム感覚で新た な分野への技術的発展に努めています。
僕が参加しているコンテストはだいたい週に一回、土曜日もしくは日曜日の夜に開催されていて、 そのコンテストが終わった後は参加した物理部員によって、この問題までできただとか、こういうや り方のほうがいいだとか、どっちのほうが速かったとか、ほとんどわかっていたけどちょっとミスし ていた愚痴などのチャットで溢れかえります。
そして、次の部活動の際にできなかったところを先輩に質問したりすることで、交流が増えてにぎ やかな雰囲気になります。
こうして物理部内では、競争を頻繁に経験することで、お互いに切磋琢磨して、プログラミング技 術向上に向けて日々精進しております。
ライバルの存在物理部ネタ終了
こういったことはもちろん、競技プログラミングに限らず、私生活のあらゆる部分に当てはまりま す。
例えば、勉強面において「こんなやつよりはいい点取りたい」とか、「今回こそはこの友達より良 い順位とってやる」などといった目標や意気込みがあると、勉強もやる気が出てくるはずです。
その他の場面でも「こいつよりはいいことしたい」、「あの人と同じくらいできたら良いな」、 「あの人のためにやってあげよう」のように、やるべき理由を見出すことができれば、やる気も多少 は出てくるでしょう。競技プログラミングでも、今日こそは買ってやるぞ、と思えば、やる気がみな ぎってきます。
いい意味でも悪い意味でも、こういった「ライバル」を見つけると、自然と評価が変わってくるか もしれません。
資本主義いきなり国家レベル
最後に紹介したい競争の例が「資本主義」です。スケールが今までと違いすぎる気はしますが、言 いたいことは同じです。
2024年度上期からの新しい一万円札のデザインになる渋沢栄一*1は日本資本主義の 父と称されるほど、西欧から日本に資本主義の考え方を普及させた人とされています。今では当たり 前になっている資本主義、とは一体どんな考え方なのか説明します。
資本主義というのは国家の経済の体制の一つで、現在多くの国がこの体制を採用しています。特に 東西冷戦の終わったあとには殆どの国が資本主義を採用していました。その中でもアメリカは、冷静 以前から資本主義国として最も有名な国です。
資本主義を構成する主な要素に、
何をどれだけ作って、いくらで売るか会社が自由に決められること(自由主義経済)
商品の売買に国家が介入することなく、市場*2に依存すること。
財産の私有が認められていること。
の三つがあります。このうち一つ目と二つ目が必然的に伴う「あること」によって経済が発展を遂 げることになるのです。</description></item><item><title>いろんなソート</title><link>https://asanobuturi.github.io/document/2019/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/6/</guid><description>ソートとは
タイトルにある「ソート」を聞いたことがあるでしょうか？Excelを触ったことのある人ならご存知かもしれません。
英語の動詞であるソート(sort)は「分類する」「区分する」という意味を持ち、「並び替える」という意味で使われることが多いです。ここではプログラム上でこのソートを実行する方法について述べていきます。
用語確認など
昇順でソートする、降順でソートする、という表現がありますが、昇順は小さい順、降順は大きい順、と読み替えてください。
また、ここでは計算量、というものを使って説明をしていきます。よく用いられるのは「ランダウの記号」や「オーダー記法」と呼ばれる記法で、
\( O\left( N \right) \) や \( O\left( N^2 \right) \)
と表します。
ここで右上についている数字は累乗を表すもので、 \( N^3 = N \times N \times N \)
(\( N \)の\( 3 \)乗 ) 、 \( N^4 = N \times N \times N \)
(\(N\)の\(4\)乗)といったようにその数字の分だけ
\(N\)というなんらかの数字を掛け合わせる、というものです (
冪
(
べき
)
乗の場合もあります)。
また\( \log \)(ログ)という対数関数を用いますが、これは先程の累乗の逆で、 \( \log_{2} N
\) は「\( 2 \)の何乗が\( N \)になるのか」を表し、 \( \log_{2} 8 = 3 \)
(ログ2の8)、 \( \log_{3} 243 = 5
\)(ログ2の243)となります。ざっくりと言うのであれば、桁数だと考えればよいです。 \( \log_{10}
100 = 2 \)、\( \log_{10} 152 = 2.</description></item><item><title>アクションゲームのブロックの当たり判定</title><link>https://asanobuturi.github.io/document/2019/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/8/</guid><description>注意！この私の部誌は日本語がおかしいところが多々ありますのでご注意ください。
ゲームはフレームごとに処理されている
この部誌を読んでいるみなさん、こんにちは！突然ですが皆さんは「ゲームはフレームごとに処理されている」ということを知っていますか?
「フレームってなんぞや?」と思うかもしれませんが、実はビデオゲームというのはパラパラ漫画のように素早く画面が切り替わって、1画面ずつゲームの処理が行われているのです。この一画面をフレームと言い、一秒間にフレームがいくつ切り替わるかの値をFPSという単位で表します。ディスプレイの性能の関係で、大抵のゲームは60FPSか30FPSで動作するように設計しますが、処理が追いつかなくなるとまれに遅れることもあります。
それではこの1フレームの間にどのようなことが起こっているかの具体例をあげましょう。例えば某マ○オの移動です。実際は素早くフレームが切り替わっているのでなめらかに移動しているように見えますが、実は一枚一枚はただの静止画なのです!
どういうことかを理解するために、まずは右の図を見てください。例えば、一枚目のフレームでプレイヤーがAの位置に、二枚目のフレームでプレイヤーがBのいちに居た場合には、画面の前ではプレイヤーが左から右へなめらかに移動しているように見えるのです。
図1
プレイヤーとブロックの当たり判定
ここからが本題です。この章では「プレイヤーとブロックの当たり判定」について説明します。そもそも、当たり判定とはなにかわかりますか?簡単に言えば、ゲームの中にある何かと、また何かとが当たっている(触れている)かどうかの判定です。
この技術を使えば、例えばアイテムとプレイヤーが当たっているかを判定して、当たっていた場合にアイテムが消えてプレイヤーが回復したりなどの動作を実装することができます。
これはただ触れているかどうかだけを調べればいいので簡単です。ですがマ○オとブロックの当たり判定となるとそう簡単にはいきません。なぜかというと、「マ○オがブロックに対してどちらの方向から当たったのか」まで調べなくてはならないからです。
どうしてこのようなことを調べなくてはいけないのでしょうか。それはブロックに当たったときにその当たってきた方向に戻さなくてはならないからです。ここで戻さなければ、マ○オはプレイヤーがその方向の操作をやめるまでずっとブロックにめり込み続けてしまいます。
例えば、図2のように上から当たってきたのなら上に戻し、また左からなら図3のように左に戻します。
図2
図3
ということで、「どの方向からブロックに当たったのか」を調べなければいけないのですが、これが難しいのです。この調べ方は色々ありますが、私は次のような方法で調べています。
図4を見てください。
図4
この図を1ブロックだと思ってください。まずこのようにブロックを分けて考えます。(ブロックの見た目を変えるわけではありません。図の中でわかりやすいように変更しているだけです。)まずブロック全体ではなく灰色の部分だけに重点を置いてあたりを調べます。そして触れていた場合には、プレイヤーが上へ移動している途中なら図5のように下に戻し、
図5
図6のように下に移動しているか、または当たっているのに動きは止まっているという場合には下へ戻します。
図6
内側の灰色には触れておらず、右側の黒色に触れているなら図7のように右へ戻し、左なら図8のように左へ戻します。
図7
図8
と、言う仕組みです。
皆さん、ここまでお読みいただきありがとうございます。よければ僕の作ったアクションゲーム*を遊んでみてください。このゲームもこの当たり判定が使われていますよ!
それではまた!
編集部注:文化祭のみでの展示です。</description></item><item><title>中学生が考える人工知能</title><link>https://asanobuturi.github.io/document/2019/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/2/</guid><description>はじめに
最近、いたるところで「人工知能」や「AI」という言葉を聞きます。しかし実際にはほとんどの人が人工知能とは何かについて詳しくは知らないと思います。そこで今回は少し人工知能について研究してみました。
定義の確認
まずは、人工知能とは何か、というところから始めます。
『計算(computation)』という概念と『コンピュータ(computer)』という道具を用いて『知能』を研究する計算機科学(computer science)の一分野を指す語。
Wikipediaより(2019年9月28日参照)
この定義を見ると、「知能」を「コンピュータ」で再現する、という意味のようです。では「知能」の定義といったい何でしょうか。
知能とは、
論理的に考える、計画を立てる、問題解決する、抽象的に考える、勧化を把握する、言語機能、学習機能など様々な知的活動を含む心の特性のこと。
Wikipediaより(2019年9月28日参照)
これらのことがコンピュータを用いてできれば「人工知能」である、ということみたいですね。
機械学習の種類
現在、人工知能の多くは「知能」のうち、「学習機能」の部分に特化しています。そういった人工知能に学習機能を持たせ、学習させること、またその研究分野を機械学習といいます。機械学習の種類は理論等によって大きく三つに分けられます。
教師あり学習
用意された入力に対して正しい出力のデータを用意して学習をする方法。
例)画像認識、ニューラルネットワーク
教師無し学習
用意された入力に対して正しい出力のデータはなく、人工知能時代に適切な出力結果を作成させるような学習をする方法。
例)データ群の分類
強化学習
環境について調べ、それに対して適切な行動をするように学習する方法。
例)歩行等の学習、進化的アルゴリズム
分類の考え方は複数あります。必ずしも例に挙げているように分類されるとは限りません。
少し用語について説明します。
入力→人工知能に与えられた情報
出力→人工知能が返す情報
環境→「状況」とほぼ同義。環境からは評価が与えられる。
制作
学習内容
では実際に作ってみます。今回制作するのは強化学習に分類されるようなもので、以下のようなゲームを学習させます。
ゲームの概要
画面上のランダムな位置に20個ボールを設置する。
二人のプレイヤーがそのボールを取り合い、多くを取ったほうが勝ち。
プレイヤーは端に触れるとスタート地点に戻される。
このゲームの一方のプレイヤーを人工知能に操作してもらうことにします。今回の人工知能への入力は以下の要素です。
自分とプレイヤーの位置
それぞれのアイテムの有無
スコアの変化
ボールの座標は固定してから学習するので入力には含みません。
また、人工知能にはキーボードの入力と同じようなデータを確率で出力してもらい、それに基づき操作してもらいます。
学習の方法
ボールの座標決定後、以下のような流れで学習をします。</description></item><item><title>基礎からはじめるトランジスタ</title><link>https://asanobuturi.github.io/document/2019/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/10/</guid><description>はじめに
お久しぶりです。中3になった鈴木です。今回は作品の製作記や解説ではなく、バイポーラトランジスタに焦点を当て、バイポーラトランジスタの使い方だけを解説していくことにしました。果たして、需要はあるのでしょうか。
というのも、トランジスタの使い方だけをただ集めた本は中々なく、トランジスタが何者なのかは分かったが、どう使えばいいのか分からない状態、それが長く続いたのです。僕と同じ状態にある人の助けになるかもしれない、また、後輩たちにもこれを見せれば何か分かってくれるかもしれない。そういう思いで執筆しています。
オームの法則やコンデンサ、インダクタなど基礎中の基礎の部分は割愛します。尺の都合というのと、そこの解説はどの入門書にも載っていると思うので。ここに書いてあることについて何が何だか分からない人は、トランジスタの足配置が分かったぐらいの段階でもう一回このページを開いてみてください。もしかしたら何かが分かるかもしれません。
また、トランジスタの品種を記載するときは基本的に”2SC/D****(2SA/B****)”の形とします。それぞれNPNとPNPで特性がほとんど同じであるコンプリメンタリ品です。
最後にここに出てきたトランジスタが現行品か入手可能か、入手困難かをまとめて記載しておきます。入手可能/入手困難かは執筆時点(2019年7月)、秋葉原の部品店で入手出来るかどうかのデータであり、長期的に保証ができるものではないことをご了承ください。
トランジスタのパッケージ、足配置
トランジスタは一部の例外を除きプラスチックモールドに封入されており、内部とパッケージは絶縁されています。またスルーホール実装型と表面実装型の二種類があり、家電など大量生産が可能な分野では後者が一般的ですが（家電を解体すると分かると思います。）、個人が少量を試作する場合は前者もまだまだ使われます。しかし、近年では日本の大手メーカーを中心にスルーホール実装型のトランジスタの生産中止が相次ぎ、個人的にも今後の供給に不安な面があります。ただ、一部有名なトランジスタに関しては台湾や中国などのメーカーでセカンドソース品の生産があるものもあり、必ずしも入手出来ないとは限りません。もし気になる方は秋月などで取り扱いがあるかどうか確認してみてください。
プラスチックモールド
プラスチックモールドのトランジスタは前述の通り基本的に内部とパッケージが絶縁されています。そのため非常に使い勝手がよく、なおかつコストも低いためトランジスタの中では最もメジャーです。
プラスチックモールドのトランジスタには大抵の場合足が3本同じ方向に出ており、それぞれの足がトランジスタのどこに相当するのかは国ごとに大体統一されています。
具体的には、日本やヨーロッパだと文字が印字されている面の左側から見てエミッタ(E)、コレクタ(C)、ベース(B)です。ECBです。アメリカだと同じように見て左からエミッタ(E)、ベース(B)、コレクタ(C)です。EBCです。
この違いは同じ回路内に違うメーカーのトランジスタが混在していたり、トランジスタを交換するときには致命的で、足配置がECBかEBCか確認しておかないと回路が動作しない原因にもなります。
TO-92
スルーホール実装型で小信号用のトランジスタではメジャーなパッケージです。上から見た断面はかまぼこ型になっています。東芝の2SC1815(2SA1015)やNECの2SC945(2SA733)などがこれにあたります。
TO-126
TO-92と同じくプラスチックモールドですが、こちらは平たく、そして大きくなっています。また、中央には放熱器に取り付けるためのネジ穴が開いており、製品も放熱器を取り付けることを前提にした設計になっているため、余程のことがない限り放熱器を取り付けることをお勧めします。用途はオーディオ回路やスイッチングなど。東芝の2SC3422(2SA1359)やTTC004B(TTA004B)などがこれにあたります。
TP-220
こちらもプラスチックモールドですが、文字印字面の反対側に金属がむき出しになっている部分があり、そこの中央には放熱器に取り付けるためのネジ穴が開いています。こちらもまた放熱器を取り付けることが前提の設計となっています。金属部分は内部と絶縁されておらず、そのまま放熱器を取り付けるとショートの原因にもなることがあるので、絶縁性のあるグリスや絶縁シートなどで適切な対策をとってください。日立の2SC1061(2SA671)や東芝の2SD880(2SB834)などがこれにあたります。
TO-3P
プラスチックモールドです。金属部分があり放熱器を取り付けるための穴も開いています。その他気を付けること等もTO-220と同じですが、大きさと金属部分の形が異なります。東芝の2SC5198(2SA1941)やサンケンの2SC3519A(2SC1386A)などがこれにあたります。
また、ここまで大型なものになると表面実装型での代替は困難なため、家電など大量生産が可能なものであってもスルーホール実装で搭載されるほか、大手メーカー製のオリジナル品が現行品として供給され続けている印象です。
TO-247
TO-3Pと特徴はほとんど同じですが、より薄型になっています。IGBTに多くなっています。(バイポーラトランジスタとは異なる点が多いため割愛）
東芝の2SC5200(2SA1943)は個人的にTO-247に見えますが、メーカー側ではTO-3Pとして扱っているようです。
メタルCANパッケージ
メタルCANパッケージのトランジスタは、その名の通り金属製の缶の中にトランジスタが封入されています。かつては信頼性の証でもあり、また放熱性も良好なためオーディオアンプの最終段などに使われていましたが、国内/海外メーカーともに生産終了が相次ぎ市場にはごく少量のみが出回っています。それらのほとんどが台湾製のセカンドソース品です。
TO-3
一見帽子のようにも見える金属製の缶から足が2本出ており、また放熱器に取り付けるための穴が端の方に開いています。トランジスタにもよりますが2本の足にエミッタ、ベースが、金属部分にコレクタが相当する場合が多い印象です。2N3055などがこれにあたります。
信号を増幅する(電圧編)
まずはトランジスタの基本、増幅動作から解説します。増幅とは、入力された信号の振幅を大きくすることです。増幅動作において重要なのは、信号に余計な色を付けないことです。（比喩的表現ですが、要は信号を忠実に増幅するということです。）
増幅回路の一つとして、まずはエミッタ接地増幅回路を紹介します。
エミッタ接地増幅回路(基本)
エミッタ接地増幅回路とは、その名の通りエミッタをGNDに接地し信号を増幅する回路のことです。（ただし、ゲインを調整する場合にはエミッタ－GND間に抵抗を接続することもあります。）
下の回路図を見てください。この回路図のVinに信号を入力するとVout-GND間に増幅された信号電圧が出力されます。
電圧増幅度Avは以下の式で決定されます。
\(Av = \frac{Vin}{Vout} = \frac{Rc}{Rd}\)
定数の決め方
ここまで、エミッタ接地増幅回路の動作について解説しました。それでは、実際に回路を設計してみましょう。
とその前に、この回路を設計する上で重要なことを覚えておきましょう。
トランジスタ回路の設計は直流動作と交流動作と分けて行う。直流動作とは信号とは関係ないバイアス電流など。交流動作とは実際に信号を入力したときの動作。
入力、出力電圧の基準(無信号時の電圧)が\(0\mathrm V\)(GND)ではない場合、それぞれに結合コンデンサ(カットオフコンデンサとも)を接続する。直流電圧があると回路の動作点が狂うほか、負荷がスピーカーなどのリアクトル負荷の場合、直流電圧をかけると磁気飽和を起こし、インピーダンスが急激に低下し(リアクトルとしての意味をなさず、巻線の抵抗負荷分のみのインピーダンスになる)許容範囲を超えた大電流が流れるため特に注意すること。また、結合コンデンサがあるとモーターなどの制御は不可能。結合コンデンサを省ける回路は後述。
回路を「交流的に」見る場合もある。要は直流成分を無視して（結合コンデンサを通した状態、とも考えてよい）電圧の変動分のみを見る。よって\(\mathrm{VCC}\)(電源電圧)と\(\mathrm{GND}\)は交流的に電位差がない。また、トランジスタの\(\mathrm{Vb}\)－\(\mathrm{Ve}\)間にも交流的に電位差がない。
トランジスタのコレクタ電流は定格を超えない限りいくらでも流してよいが、あまりに多く流しても不経済なうえ、トランジスタの雑音が最小になるコレクタ電流値は定格ギリギリではないため適当に決める。大体\(1\sim10\mathrm{mA}\)。
トランジスタのコレクタ電流\(Ic = Ie\)(エミッタ電流)として考える。ベース電流は\(Ic\)の\(\frac{1}{hfe}\)(直流電流増幅率)倍なので微々たるもの。無視して構わない。
トランジスタのhfe(直流電流増幅率)はコレクタ電流Icによって大きく変動するのでデータシートをよく確認する。
トランジスタのベース－エミッタ間電圧Vbeは大体0.6Vとして設計する。
トランジスタのエミッタ－GND間の電圧は2V程度にする。エミッタ電圧の変動を許容するため。
トランジスタのバイアス電流はベース電流より「十分大きい電流」。個人的に大体10倍前後以上がベストだと勝手に思っている。
回路の入力電圧、出力電圧の基準はVccの半分(後述の両電源アンプの場合はGND)になるべく近づける。信号の振幅をできる限り大きく取れるようにするため。
回路記号のみを書いてある回路図に既に決まっている定数を書き加えながら設計していくと設計が楽になる。
細かいことは気にしない。
以上のことを覚えられたら、次に進んでみましょう。もし不安になったら適宜戻って確認してみてください。</description></item><item><title>素晴らしいアルゴリズムの世界</title><link>https://asanobuturi.github.io/document/2019/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/3/</guid><description>どうも、中3の副部長の中野です。最近、僕の周りで競技プログラミングが流行っているので、少しアルゴリズムについて書こうかなと思います。
対象読者
C++などのプログラミング言語の基礎をある程度抑えている人。
競技プログラミングとは
競技プログラミング(以下競プロ)とは、数学的な問題を制限時間内にプログラミングで回答する競技です。有名な競技プログラミングのプラットフォームとして、AtCoderが挙げられますが、問題文が日本語なので初心者でも比較的始めやすいと思います。何より代表のchokudaiさんが面白いです。
累積和
これは競プロだったら頻出のアルゴリズムですね。次のよな問題を考えてみてください。
Q個のクエリと長さNの数列
X
0
X
i
103
が与えられる。また各クエリでは
l
r
0
l
r
N
が与えられる。各クエリにて、数列Xにおける区間
l
r
の総和を求めよ。
0
Q
,
N
10
18
とする。
このような問題は、ある程度プログラミングができる人なら、各クエリで
r
から
1
までのfor文を使って合計を求めて、それを出力して・・・と考えるかと思います。しかし、クエリの数や、
N
の範囲が今回の成約のように膨大になってしまった場合、到底制限時間内に間に合いません(計算量が
O
N
のためTLE=時間制限超えになってしまいます。)。</description></item><item><title>編集後記</title><link>https://asanobuturi.github.io/document/2019/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/12/</guid><description>今年の部誌の編集を担当した中3の永田です。電子版の部誌では、紙の部誌とは別の内容で編集後記を書いてみます。
まずは、9月頭の文化祭から、電子版の公開までに一ヶ月以上のブランクが空いてしまったことについて、この場を借りてお詫び申し上げます。本当にすいませんでした。この文章を書いている今は中間テスト期間なので、テスト終了後に部員にシメられる予定でございます。
電子版をpdf直張りではなく、それぞれの文書をHTMLに移植して再編集したことで、いろいろと分かったことがありました。
ひとつは、意外と移植が面倒だったということです。docxとHTMLでは仕様が異なりますから、Wordのプレビューを見ながら手作業でコピペしつつHTMLに起こすしかありません。一応、WordにもHTML形式にエクスポートする機能はあるのでしょうが、細かい部分が色々と崩壊しそうなので使っていません。後からの融通も効かなそうですし。
移植に際して、特に時間を食われたのがCSSの作成と数式の記述です。
私自身、HTML/CSSをほとんど触ったことがないので、今回移植をしながら手習いでどうにか覚えて使っています。おかげでだいぶ書けるようになりました。このサイトの骨格部分を全て一人で作り上げた3つ上の先輩には頭が上がりません。そういえば部員の中で一人、HTML形式で部誌を提出してきた人がいました。謎。
数式の記述には、MathJaxというオープンソースのスクリプトを使用しています。HTML内にLaTeX形式で記述した数式を、自動でキレイな形にまとめてくれるのでとても便利です。感動しました。もともとはMathJaxにHTML標準要素のMathMLをあわせて使っていたのですが、LaTeXの方が書きやすかったため、途中から移行しました。MathJaxを使うと、「\(\LaTeX\)」なんかも簡単に記述できます。
来年の編集も引き続き私が務める予定ですので、後一年、もっと精進して帰ってきます。
そういえば、なんとなくTwitterの共有ボタンをつけてみましたが、使ってくれた方は居るのでしょうか?</description></item><item><title>自作PCについていろいろ</title><link>https://asanobuturi.github.io/document/2019/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/5/</guid><description>そもそも自作PCとは
自作PCとは文字通り、自分で作る (組み立てる)PCのことです。よく勘違いしている方がいるのですが、はんだ付けなどの難しい電子工作は一切ありません。自作PCの利点はメーカー製PCにない構成が組めることです。具体的にはRyzen系CPUを搭載したPCはメーカー製ではまだ少ないです。またゲームや画像編集に必須なグラフィクカードを搭載したPCもメーカー製には少ないです。対して欠点は故障した場合PC全体としての保証がないため原因を特定してパーツ単位の保証を受ける必要があることです。この作業はPCに対しての知識が求められ初心者には向いていないと言われる要因の一つです。
パーツを選ぼう
PCを組むときはまずパーツ選びから始めます。この作業が組み立ての何十倍も重要です。
この先専門用語が増えますが、このようにお考えください。
コア→おっさんの数
スレッド→ペンの数
周波数→ペンを動かす速さ
ターボブースト→おっさん残業時脳での速さ
ストレージ→引き出し
メモリ→机の大きさ
グラボ→色鉛筆
OS→おっさんの話す言語
水冷式のPC→おっさんを無限に残業させることができる無敵アイテム
マザーボード→おっさんたちの職場
CPU
前述の通り、CPUはPCの脳と表現されます。そのためCPUの性能はPC全体の性能にかかわっていきます。一般PC向けにCPUを製造しているメーカーは基本的にアメリカのIntelとAMDの二社だけです。皆さんの使っているPCの多くはIntel製CPUだと思います。ノートパソコンを使用している方はキーボードの右下あたりをご覧ください。
このようなロゴマークの入ったシールが貼られている場合、それはIntel製CPUを搭載しています。
Intel製CPUと、AMD製CPUを比較するとこのようになります。もちろん製品によって差はありますが、メーカーの一般的な特徴としてお考え下さい。
メーカー
Intel
AMD
コア数
普通
多い
周波数
高い
Zen2以前は低かった
価格
高い(供給不足)
安い
ソフトの最適化具合
基本的にIntelが標準
マザーボード
マザーボードに色々なパーツを取り付けることで、各パーツが連携してPC全体が動作します。ここがPCの土台となる場所です。
自作市場のマザーボードは、基本的に台湾メーカーが独占しています。ここでは有名なメーカーをいくつか解説していこうと思います。
ASUS
マザーボード界の重鎮で、BIOSやドライバー系で使いやすいことが有名でシェア率が世界一です。</description></item><item><title>自作クレーンゲームの考察</title><link>https://asanobuturi.github.io/document/2019/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/9/</guid><description>はじめに
謝罪からスタートの部誌というのもレアだと思いますが、まず、謝らなければならないことがあります。これから書く部誌は、昨年度に2日目の最後の2時間のみ、がばがばな状態で動作した作品についての考察になります。昨年度来ていただいた方には、1年越しになりますが、パンフレット等で宣伝しておきながら申し訳ありませんでした。
というわけで。どうも、高校2年生の部長です。4年目の部誌は、昨年度のクレーンゲームについての考察になります。主な内容は考察なので、電子工作について多く語るというわけではありませんが、読んでくださるならば、嬉しい限りでございます。
作ることになった経緯
作ることになった経緯ですが、興味半分、周囲からの圧力が半分、だったような気がしているような、していないような気がします。興味があって、自作できるのであればやってみたいなという気持ちはありました。そして、調べものをしているうちに、とある方のブログに飛び、そこに貼ってあった動画も何度も見返して、参考にしながら作れるかもしれないと思いました。物理的に実現可能かどうかの意味で、です。中学3年生になり、上の学年がいなくなって、電子工作班は自分にまかされたような、そんな境遇でしたので、一つくらいは大きな作品、要するに、目玉となる作品を作らなければいけない。そんな使命感にも駆られていたのでちょうどいいか、そんな気分でした。
正直なことを言うと、会計と副部長を9月から一気に任され、文化祭のメインたる仕事も後々任されるようになるだろうと思っていたので、あまりよい予感がしてなかったことは、当時からありました。また、メインである筐体の作成も、部室がより自由に使え、資材も届く夏休みに入ってからなので、正直言ってかなり厳しく、辛い1年でした。
なので、実際に製作に本格的に取り掛かり始めたのは、1学期の期末考査後、というわけになります。わかりやすいように手書きのイラストも載せながら書きたいと思います。パソコンで書くよりはるかに速いので、手書きになりますがよろしくお願いします。
クレーンゲームとは?
タイトルからして、わからない人のために感がありますが、そうではございません。自作するにあたって考えなければいけないことなどをまとめます。ページ数等の関係もございますので、クレーンゲームについては既知であることを前提にお話します。右の写真のやつですね。
様々なものを思い浮かべられると思いますが、ゲームセンターに行けばよくある、100円入れて、「右側」と、「奥側」に動かす、よくあるようなものを自作します。皆さんの中にも、保護者の方と一緒にゲームセンターに行って、お金をもらって、100円玉を何枚も無駄にした人もいることでしょう。クレーンゲームは、ボタンを押すだけですが、コツがあったりするので、はまる人にははまるでしょうね。あのアームの力の無さには、詐欺か？というくらいのものもあって、なかなか景品も取れないですよね。
今回の部誌では、便宜上「右側」のこと、すなわちプレイヤーから見て横方向のことを、「x軸」と定義し、「奥側」すなわち、プレイヤーから見て縦方向のことを「y軸」と定義します。また、下方向に自動で動く「下方向」のことを、「z軸」と定義して、今後の話を進めることにします。図を載せるので参考にしてください。図の上の方の斜線部は、クレーンゲームの機構があるところです。下手な絵ですが、一応クレーンゲームの構造を理解していただき、x軸、y軸、z軸がどこのことを指しているのか、矢印も参考にわかっていてくれたら幸いです。
要は、あのような動きを自作で再現できればよいのです。端的に言ってしまえば、100円を入れるかどうかを別にすれば、クレーンゲームの自作のとりあえずの目標は、
ボタンを2つ用意し、1つ目を押している間は、x軸方向に動き、2つ目を押している間は、y軸方向に動き、あとは自動でz軸方向に適切な距離下がって、アームを広げて元に戻し、z軸方向の上方向に上がりながら、元居た位置まで戻って、アームを広げればよい。
ということになります。「何言ってんだこいつ?」という人もいるでしょう。わかる人には、言葉にしてみればそれだけのことか、という意見を持つ人もいるでしょう。まぁ、自分の国語力の無さも相まって、本当に何言っているのかわからない人のほうが多いと思うので、これから解説していくつもりです。
あの文章を読み解くと、どうやら、大事そうなのは、x軸、y軸、z軸、アームの4つほどですね。実際問題、制御をする、という観点で非常に大事なのは、この4つです。お金を入れたら動かすことのできるという点を加えれば、5点になるのですが、最後にまとめるとして、上の4つについてまとめることにします。自分にとっては4つとも難題ばかりでした。
難題なのは、上記4つなのですが、それ以外にもクレーンゲームを語るうえで、筐体、というものは非常に大事になってきます。筐体というのは、外側の枠や、景品が出てくるところなどの動作をしない部分です。予算面や、時間の都合により、外枠しかできなかったので、外枠ということにしておきます。また、動作させるためには回路も作らなければいけません。回路については参考文献に載ってあるものや部品のデータシート、サイト等を活用しパズルのように組み合わせて独自のものを作りました。なので、オリジナリティはほぼ皆無です。また、回路自体も複雑ではなかったので、回路は一番簡単でした。まずは、それほど困らなかった外枠についてから行きたいと思います。
材料
使う材料をまとめておきます。
角材（4ｍで500円くらいのものです。）
ベニヤ板
キャスター
L字金具
木ネジ
ワッシャー
PPシート(ダイソーで売っています。)
アルミニウム板(ダイソーで売っています。)
ボルト(小さいモノ。アーム用)
基板
/ダブルギアボックス x 4
メタルギヤサーボモーター
Arduino(必要なピン数によってUnoなのか、Megaなのかなどが変わります。)
ボタン(クレーンゲームに使われているボタンも市販されています。) x 2
モータードライバー TA7291P(ギヤーボックスに使われているDCモーターの数)
抵抗器 10kΩ、1kΩ
マイクロスイッチ(リミット用)
ACアダプタ(6V、1.8Aに近い値の物。大きすぎるのもよくない。)
銅線
その他、クオリティをあげたければ、装飾するためにペンキを追加したり、クレーンゲームの機構を、チェーンを使ってやる場合には、DCモーターの代わりに使ったり、クレーンゲームの外枠に大きなアクリル板をつけて本物に近くすることもできます。ただ、今回使った材料はこんなもんです。サイズ、個数等は、自分の作るものに合わせてください。そのために個数表記、サイズ表記していないものもあります。
外枠(筐体)
外枠は上記4要素よりは比較的楽に製作できました。苦労したところはというと、運搬の問題です。エレベーターに入るように大きさを調整する必要がありましたので、大きさをy軸方向に少し小さくしたかなぁ、という感じです。わかりやすく言うと、幅がおそらく普通のものより若干薄いです。</description></item><item><title>部長挨拶</title><link>https://asanobuturi.github.io/document/2019/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/1/</guid><description>ついにこの文章を書く年になってしまいました。自分にとって最後の文化祭ということです。後半の3年間は物理部の文化祭に多く関わっていたというのもあり、あまり作業ができなかったりしました。
さて、今年の文化祭ですが、100周年の文化祭ということで、例年通りではないところが細かいですがいくつかございます。パンフレットを見てもらってお分かりいただけたでしょうが、今年の文化祭は数学同好会とコラボしております。また、壁新聞なども本格的な導入はこの部活では今年が初めてだったりしております。作品メインだったこの部活の展示の雰囲気を少し変えてみました。その他にも少しだけいつもと異なっているところがありますが、探してみてください。
ところで、2年前の部長は部長挨拶にて、「マイナスからゼロに戻しただけ」という言葉を使っていましたが、文化祭における土台を作ったのは彼でした。なので、今年の文化祭でプラスにできたでしょうか。正直言って、部活の雰囲気についてはこの1年間でよくしたという自負がございます。2年前は「PC班を捨て」たので、かりそめの姿での「ゼロに戻した」のですが、今年は根本的なところから「ゼロに戻し」、多少プラスのものになったと信じたいと思います。
今年以降、自分は文化祭の運営をすることはありませんが、文化祭の運営だけでなく、たくさんいる後輩の教育も過去にはないくらい自分はやってきましたと断言します。なので、来年度以降は今年度よりもより良い文化祭ができるであろうと期待しております。今年は、メインで動ける高校生がほとんどいなかったのに対して、中学生はよく頑張ってくれたと思っています。改めてこの場で感謝を申し上げます。
最後になりますが、今年の物理部展♯2019with数学同好会に来て下さりありがとうございました。来年はどうなっているか知りませんが、物理部と、数学同好会の展示が楽しんでいただけたのならば幸いです。</description></item><item><title>顔認識の仕組み</title><link>https://asanobuturi.github.io/document/2019/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2019/4/</guid><description>
そもそも顔認識とは
こんにちは、中学2年の永井康太です。最近「顔認識」という言葉をIT化が進むにつれてよく聞くようになってきています。そもそも顔認識とはどういう技術なのかというと、例えばこのようなものです。
今回は左の人の顔を顔認識を使って右のように顔の部分を自動で黒い枠で囲ませてみました。
顔認識の仕組み①
まずは顔認識の概要についてお話します。
判定する画像の一部を使って判定する。
様々な基準を使ってその部分が顔かどうか判定する。
もし顔ではないと判定された場合、その部分が顔ではないと決定する。もし顔であると判定された場合は(1)に戻って判定をする。
これを繰り返して顔を認識します。要するに一回一回の精度は低い判定を、何度も重ねて実行することによって精度を上げているのです。
顔認識の仕組み②
次に判定方法についてお話します。判定方法にはいろいろなものがありますが、今回はHaar Cascades検出器について話します。顔の中でも今回は花の判定について説明します。
まず鼻は中央のほうが端の方よりも光が当たりやすく明るくなるという特徴があります。この特徴を生かして鼻を判定します。しかしこの特徴は単純で素早く判定できる一方、判定精度は低いため多くの判定をすることで判定精度を高めます。
このように明るさの特徴を用いて判定をしています。
さいごに
ここまでこの記事を読んでいただきありがとうございました。私の文章力が低いせいでこのようなわかりにくく内容も薄い文章になってしまいましたが、この記事を通して少しでも顔認識に興味を持ってくれたら幸いです。
参考文献
使用した顔の画像：https://www.pakutaso.com/20190706207post-22263.html
参考にさせていただいたサイト：
https://qiita.com/FukuharaYohei/items/ec6dce7cc5ea21a51a82
https://kotobank.jp/word/%E9%A1%94%E8%AA%8D%E8%AD%98-190393
https://code-graffiti.com/opencv-face-detection-with-haar-cascades-in-python/#toc4</description></item></channel></rss>