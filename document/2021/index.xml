<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2021年度・部誌 on 浅野学園物理部</title><link>https://asanobuturi.github.io/document/2021/</link><description>Recent content in 2021年度・部誌 on 浅野学園物理部</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Thu, 25 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://asanobuturi.github.io/document/2021/index.xml" rel="self" type="application/rss+xml"/><item><title>AMDのZen3について考える</title><link>https://asanobuturi.github.io/document/2021/6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/6/</guid><description>はじめに 昨年の10月、AMDがRyzen5000シリーズを発売し、CPU業界は大きく盛り上がりました。この部誌ではどうしてRyzen5000シリーズがあれほど大きな話題を呼んだのか考えたいと思います。RyzenThreadRipperシリーズに関してしては大きく省いている点があること、また筆者の個人的な意見を多く含んでる場合がありますのでご了承ください。
## そもそもRyzen5000シリーズとは そもそもRyzenシリーズはAMDが2016年12月13日に発表したCPUのブランドです。これにより当時はIntelがCPU市場を独占していた状況に大きく風穴を開けました。
Ryzen1000シリーズはIntel製CPUに比べ、安価でクロック数が低い一方で、コア数、スレッド数が多いという点で人気を集めました。同時にIntelはCPUの開発に苦戦しており、多少性能を向上させた程度ものを別の世代として販売していたことから、Intelを見捨てた消費者も多かったことでしょう。
グラフを見ればわかるように、Ryzenの発売直後の2017Q1期(1月~3月)に、今まで下がり気味であったAMD製CPUのマーケットシェア率は上昇に転じています。
またデスクトップCPUに関しては2021,Q1(1月~3月)時点ではIntel製CPUのマーケットシェアを追い抜いています。これはおそらくRyzen5000シリーズ発売の影響でしょう。いろいろなWEBメディアでも大きく取り上げられていましたからね。 ちなみに混乱した方もいらっしゃったかもしれませんが、Ryzen5000シリーズはRyzenの第４世代の製品です。(Ryzen4000シリーズは第3世代のセキュリティ強化モデル)
Ryzen5000シリーズの特徴 いままでのRyzen7,Ryzen9シリーズでは、4コア+L3キャッシュ16MBを１グループとしてそれを複数搭載することによって多コアを実現してきましたが、Ryzen5000シリーズからは8コア+L3キャッシュ32MBを１グループとすることでコア間のデータ転送速度を大幅にアップさせ、また１つのCPUが大量のL3キャッシュに瞬時にアクセスできるようになりました。これによりCPUの性能は19%アップしたとされています。参考画像ﾎﾟﾝｯ
Ryzen5000シリーズのRyzen9ではこのグループを2基、Ryzen7では1基搭載しています。こうして性能が飛躍的に向上したにもかかわらず、Ryzenのコストパフォーマンスは維持され続けています。まあ実際すごいのはAMDではなくこのCPUの設計と製造を担当しているTSMCなんだけどね。
この先のRyzenについて すでにRyzen6000シリーズ(Zen4)の情報はリークされていますが、最大の違いはなんといってもソケットの変更でしょう。いままでのRyzenは、デスクトップ向け製品に関してはずっとAM4という規格のCPUソケットを採用し続けてきました。そのおかげでユーザーはマザーボードメーカーが対応してさえいれば「Ryzen1000シリーズのCPUを使ってきたけれどそろそろ性能に不満が…」となった際に簡単に世代を超えてCPUをアップグレードすることができたのです。しかしソケットの形状が変わってしまうとそれもかないません。 10年ほど前からIntelは2世代ごとぐらいにソケット形状を少しずつ変化させるという暴挙に出ていますが。 いままでこのアップグレードの簡単さがRyzenシリーズの売りであったような気もするので、これからパソコンを買う人の中ではRyzenシリーズを避ける人も出てくるかもしれませんね。まぁまだリーク段階なのでソケット形状が変わると確定したわけではありません。今後の最新情報に期待ですね！
終わりに 参考文献 CPUシェアグラフ　https://www.cpubenchmark.net/market_share.html AMD CCXに関する情報 https://www.gdm.or.jp/review/2020/1105/368230</description></item><item><title>アーキテクチャへの扉</title><link>https://asanobuturi.github.io/document/2021/5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/5/</guid><description>はじめに（免責） この記事はネットや本などで知識だけを身に着けた経験の浅い人が書いています。この人はこんな考え方をしているんだなぁ位にこの記事を読み流してきちんとした本を読むことをお勧めします。本記事の考えのもとになっている本はを最後に紹介します。
本記事の目標 本記事ではプログラムとはどんなものか、またオブジェクト指向とは何かを説明しながらプログラムの大まかな構造を考えていきます。最終的に、良いと言われているようなプログラムの構造を考えられればなと思います。
プログラムの評価は使う人が直接触るわけではないので、いわゆる絵や音楽などの受け手からの評価とは違ってきます。プログラムに触れるのは仕様を変更したり追加したりする同業者または自分です。つまり、プログラムはそれを作り替える人から評価を受けるわけです。よって良いプログラムとは仕様を変更したり追加したりしやすいプログラムということになります。
プログラムを評価する指標は大まかに三つほどあります。一つ目は読みやすさです。読みづらければプログラムを理解することが大変になってしまいます。二つ目は再利用のしやすさです。同じようなものを何度も書いているとプログラムが無駄に大きくなってしまいますし、それだけ労力がかかってしまいます。三つめは正しさです。当然ですがバグが多いプログラムはプログラマに対してだけでなくユーザーに対しても被害が出ます。
プログラム コンピュータプログラム（英：computer program）とは、コンピュータに対する命令（処理）を記述したものである。
Wikipediaからプログラムの説明を引用してきました。プログラムは仕事の手順を示した静的なデータです。
https://cookpad.com/recipe/2477629 これは生チョコのレシピの一部です。プログラムはこのような料理のレシピと同じように「最初にこれをやる、次にこれをやる……」ということが書かれたデータです。
料理をするときには材料が必要となり、その材料をもとに食べ物を作ります。プログラムも同じく、あるデータを使って決まった仕事を行い、得られたデータを出力します。つまり、プログラムは入力、処理、出力で構成されています。（このうちのどれかが欠けることはあります）関数について考えてみても、この構成要素がわかります。関数は引数が入力され、中である決まった処理をして、戻り値を出力します。関数はそれ自体が一つのプログラムになります。
入力の段階で処理しやすいデータになっていると関数などで中に書くコードが少なくなるのでプログラムが単純になります。料理でいうところの下ごしらえです。3分クッキングでは下ごしらえを完璧にすましてあるので実際の処理内容（レシピ）がとても分かりやすくなっています。関数の中でデータを動的に取得して（現在時刻の取得など）から、そのデータと引数を使って処理をしたいことがあると思いますが、やってはいけません。これは処理の部分でデータを用意していることになります。また、ある引数を入れたときに常に同じ戻り値が返ってこないことになります。これは、入力と出力を見てプログラムが正しく動いているかどうか判断することができなくなるのでやってはいけません。現在時刻なども外で取得してから関数の引数などに渡しましょう。
プログラムの依存関係 プログラムはプログラムの中で使うことができます。関数の場合関数の呼び出しと言ったりします。依存関係は使うものと使われるものの関係です。使うものは使われるものに依存しているといいます。車で考えてみましょう。車はタイヤを使います。タイヤは車に使われます。車がなくてもタイヤの機能は成り立ちますが、タイヤがないと車の機能は成り立ちません。つまり、タイヤは車に依存しておらず、車はタイヤに依存していることがわかります。AプログラムがBプログラムを使っているとすると、BプログラムがないとAプログラムを使うことができませんが、AプログラムがなくてもBプログラムを使うことができます。なので、AプログラムはBプログラムに依存していることとなります。
さて、車はタイヤに依存していると話しましたが一般的に物が製品を使う、つまり製品が部品に依存するという関係が成り立っています。しかし、プログラムの中では部品と製品との違いがあいまいなことがよくあります。ではどのようにプログラムの依存関係を考えるかというと、より根本的かつ汎用的なプログラムのほうに依存します。製品と部品では部品のほうが汎用的です。汎用的な部品は一つの製品だけでなく、様々なところで使うことができます。タイヤはネジに依存していますが、ネジを使っている製品はとてもたくさんあります。また、AプログラムがBプログラムに依存しているとBプログラムの仕様が変わったときにAプログラムの仕様を変えなければならない可能性があります。しかし、その逆はありません。ネジの太さが変わってしまうとそのネジを使っているタイヤは使えなくなってしまいますが、タイヤのネジ穴が太くなってもネジが使えなくなることはありません。
アプリケーション アプリケーションはプログラムその物ではありません。入力、処理、出力では説明できないからです。ただ、アプリケーションの仕様を分解するとそれぞれを入力、処理、出力で説明できるようになります。ここからアプリケーションは複数のプログラムが集まって出来ていることがわかります。
アプリケーションのユーザはパソコンやスマホなどのデバイスを操作して画面に何かが表示されたり音が鳴ったりすることを期待します。ユーザの操作がプログラムの手順を始めるトリガーとなり、処理に必要なデータを作ることがあります。
ユーザの操作から得られるデータ以外にアプリケーションやサーバ上にあるデータが必要となるときがあります。これらのデータを得るためのデータアクセサが必要になります。ユーザの操作によって得られるデータや、データベース、ファイルなどのデータはそのままでは処理に向いていないことがよくあります。よって、処理に必要なデータを処理しやすいデータに直すプログラムが必要になります。
ロジックに必要なデータは様々なところから持ってくるので、それらを一括にまとめてロジックに渡せると便利です。様々なデータとプログラムを繋ぐことからこのプログラムをロジックと名付けます。
出力されるデータもただのデータでしかないので、出力されたデータを解釈して画面に表示したり音を鳴らしたりなどのユーザの体験を提供するプログラムが必要です。
これらを踏まえてアプリケーションの中のプログラムの基本的な構造を考えてみます。
ユーザの操作で処理がスタートします ユーザの操作で得た入力データを処理しやすいデータに変換し、「ジョイント」に入力します。 「ジョイント」で「データアクセサ」からファイルやデータベースのデータを持ってきて「ロジック」に入力します 「ロジック」で入力されたデータに対してある決まった処理を行い、得たデータを「ジョイント」に返します 「ジョイント」で帰ってきたデータを複数の「出力」に渡します。 「出力」で渡されたデータを解釈して画面に表示したり、音を鳴らしたりと様々なことをします これら一つ一つのプログラムも入力、処理、出力で出来ていることがわかります。
では、依存関係の話をアプリケーションのプログラムに応用してみましょう。アプリケーションのプログラムは基本的に入力、ロジック、出力、データアクセサ、ジョイントでできています。アプリケーションにとって根本的なのはロジックです。ロジックには仕様その物が書かれています。また、ロジックは同じ仕様の別アプリケーションでも使うことができます。
一方、入力、出力はアプリケーションごとにUIが異なり、UIが変わってもアプリケーションが成り立つ（パズドラは何回かUIが変わっています）ことから根本的ではないことがわかります。また、データアクセサもファイルの拡張子やデータベースの種類などによってアプリケーションの根本的な仕様は変わらないので根本的ではありません。
そして、ジョイントは入力、出力、データアクセサとロジックの間を取り持つので根本度も中間になります。よって、ジョイントがロジックに依存して入力、出力、データアクセサがジョイントに依存することになります。しかし、ジョイントはデータアクセサや出力を参照する必要があるのでこれらの依存関係を守ることは難しくなってしまいます。
アプリケーション構造_手続き オブジェクト指向 これまで話した構造がBasicやC++などの手続き型言語で出来る構造です。この構造をC#やJavaなどのオブジェクト指向言語を使うことでさらに強化していきます。（PythonやC++などのオブジェクト指向言語では対応していない機能がありますが、代替手段があります。多分）ただ、その前にオブジェクト指向の機能はどんなものがあるか確認していきましょう。
クラス クラスは型と呼ばれることもあります。型、つまり物を作るときに元となるものです。クラス自体は使うことができません。クラスを使って物を作るのですが、その物をインスタンスと呼びます。クラスには主にフィールドと呼ばれるデータ（変数）とメソッドと呼ばれるフィールドを使ったプログラムを定義することができます。クラスには二つの使い道があり、一つ目はインスタンスを生成することで、二つ目はインスタンスを入れる変数にすることです。
インスタンス インスタンスの中にはクラスで定義されたデータとプログラムが入っています。このデータやプログラムは公開するか非公開にするかクラスで決めることができます。公開するとインスタンスの外で使うことができて、非公開にするとインスタンスの内側でしか使うことができません。
インスタンスには二種類の使い方があります。データのまとまりと共通のデータに対するプログラム群です。これは二種類の使い方どちらでも使えるわけではなく、どちらか一つの使い方に絞る必要があります。データのまとまりとして使うインスタンスをデータ構造、共通のデータに対するプログラム群として使うインスタンスをオブジェクトといいます。データ構造もオブジェクトもデータが主となっていることがわかります。よって、クラスはデータのまとまりとして名前を付けるべきです。
データ構造はデータのまとまりです。それ以上でもそれ以下でもありません。プログラムにデータを渡したりデータを出力したりするときに使います。データ構造はただのデータなのでクラス内には公開フィールドしか定義してはいけません。
プログラムは入力、処理、出力で出来ていると話しました。当然メソッドもそれに従わなければなりません。メソッドの入力は引数のほかにフィールドがあります。（メソッドにフィールドを入力しない場合、そのプログラムはメソッドではなく関数で実装した方がよいことになります）引数はメソッド内の処理を実行するときに入力するデータなのに対し、フィールドはあらかじめ決めておくデータになります。メソッドを使うときには引数しか設定しないのでフィールドをころころ変えてしまうとある引数に対して常に同じ戻り値が返ってこないことになります。よって、オブジェクトのフィールドは外からも（できれば中からも）変更できないようにするのが好ましいです。ここでフィールドを非公開にする必要が出てきます。オブジェクト内のデータが欲しいときには公開したいデータだけをまとめた専用のデータ構造のクラスを作り、そのインスタンスを返すメソッド（またはプロパティ）を返します。
インターフェース インターフェースは各プログラムのつなぎ目です。インターフェースには実装されていないメソッド（またはプロパティ）を定義することができ、それらをクラスに実装させることで間接的にクラスのメソッド（またはプロパティ）を使うことができます。インターフェースは複数のクラスを「同じ機能を持つもの」として同じように扱えます。インターフェースを変数にすることによってその変数にはインターフェースが実装されているクラスだったらなんでも入れることができます。
また、インターフェースを介してクラスをつなぐことによって依存関係を逆転することができます。例えば、根本的なロジックを持つクラスAが詳細的なロジックを持つクラスBを参照したいとします。
依存関係逆転の問題 しかし、これだと根本的なクラスが詳細的なクラスに依存していることになってしまいます。そこでクラスA専用のインターフェースBを用意してクラスBがそれを実装します。
依存関係逆転の解決 インターフェースBはクラスA専用なのでクラスAが欲しい機能だけが定義されています。クラスAの仕様が変わりインターフェースBに対して必要な機能が変わるとインターフェースBは中身の処理を定義していないので簡単に機能を変えることができます。インターフェースBの機能を変えるとクラスBを変更するかインターフェースBの機能を持った新しいクラスを作る必要があります。これで詳細的なクラスBが根本的なクラスAに実質依存することができます。
抽象クラス 抽象クラスはインスタンスを生成することができず、型として使います。その代わり抽象クラスを基に派生クラスをつくることができ、派生クラスは抽象クラスとして扱うこともできます。派生クラスはその名の通り抽象クラスから派生したものです。よって派生クラスは抽象クラスとして扱える必要があります。イメージとしては抽象クラスが種類、派生クラスが物となります。抽象クラスは厄介な機能なのであまり使う頻度は高くありません。というか安易に使ってはいけません。機能をまとめたいだけならインターフェースを使いましょう。
オブジェクト指向を使ったプログラムの構造 オブジェクト指向の主な機能を確認したところでこれをアプリケーションのプログラムに適用してみましょう。オブジェクト指向は再利用のしやすさに特化しています。
ソフトウェアのプログラムは入力、出力、ロジック、ジョイント、データアクセサで出来ていること、そして入力と出力がジョイントに依存していてジョイントがロジックに依存しているべきだということをプログラムの章で話しました。関数だけではこの依存関係にすることが難しいですが、オブジェクト指向の機能であるインターフェースによって依存関係を逆転させることで可能になります。
インスタンスを使うことによってデータとプログラムが一体となり、処理プログラムを再利用できるようになりました。そこで、様々なデータに対する処理をそれぞれクラスで定義し、それらを使って一つの大きな処理をこなすプログラムを作ります。このような小さなロジックを複数フィールドに持ち、それらをつかって大きな処理をするメソッドを持つオブジェクトを制御フロー(またはトランザクション)と名付けます。
ジョイントがデータアクセサのインターフェースに依存することでファイルの拡張子やデータベースのツールが変わったときもジョイント部分を一切変更せずにデータアクセサを付け替えるだけでよくなります。
これらの変更を加えたプログラムの構造を図にしてみます。
アプリケーション構造 この構造がアプリケーションの中に複数できることになります。ファイルやデータベース、画面表示やサーバ通信はそれぞれ例です。実際はこの構造からクラスを付け足したり減らしたりして仕様にあった構造を作ることになりますが基本的にこの構造を維持することでそれぞれの機能を再利用しやすくなると思います。また、使うツールによっては変換が必要ないデータが出てくる可能性があります。しかし、必ず別の処理専用のデータ構造にデータを移す必要があります。なぜなら、処理で扱うデータ構造と入力、出力で扱うデータ構造を一緒にすると入力、出力の都合でデータ構造を変更しなければいけなくなったときに処理もその影響を受けてしまうからです。
先人の知恵 今回のプログラムの構造に使われている知恵 DRY(Don’t repeat yourself) OAOO(Once and only once) SRP(Single Responsible Principle, 単一責務の原則)　注：名前に惑わされて間違った説明をしていることがあります OCP(Open Closed Principle, オープンクローズドの原則) ISP(Interface segregation principle, インターフェース分離の原則) DIP(Dependency inversion principle, 依存性逆転の法則) SDP(Stable-dependencies principle, 安定依存の原則) プログラムの構造を考えるうえでの知恵 GOFのデザインパターン　注：目的ではなく手段です DDD(Domain-driven design, ドメイン駆動設計) LSP(Liskov substitution principle, リスコフの置換原則) 求めるな、命じよ デルメルの法則 読みやすいコードにするための知恵 PLS(Principle of least surprise, 驚き最小の原則) ループバックチェック 正しいプログラムを作る上での知恵 テスト駆動設計 ハンブルオブジェクトパターン おすすめの本 リーダブルコード（清和書林にあります！！） Clean Architecture オブジェクト指向でなぜ作るのか（清和書林にあります！！） さいごに これまでつらつらと書いてきましたが、小さいアプリケーションではこの構造を完璧に守らなくてもあまり問題にならずにかけちゃいます。しかし、プログラムの構造を適切に作ることによって機能を拡張しやすくなるのは事実です。この記事でプログラムの構造を作る上で様々な考え方があることを知ってもらえたら幸いです。</description></item><item><title>バーゼル級数を用いた円周率の計算</title><link>https://asanobuturi.github.io/document/2021/2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/2/</guid><description>バーゼル級数とは \[\sum_{k=1}^{\infty}\frac{1}{k^2}=1+\frac{1}{4}+\frac{1}{9}+\cdots=\frac{\pi^2}{6}\]
これがバーゼル級数です。今回はこの級数を利用して円周率を計算していこうと思います。また、プログラミングに疎い人でも楽しめるように表現を曖昧にしていたり多少ずれていることがあります。
Pythonでの計算 今回はプログラミング言語にPythonという言語を選択しました。
Pythonは文法が比較的簡単でわかりやすく、優れたツールの豊富さが魅力の言語です(もちろん文法が比較的に簡単といえどもしっかり理解しようと思うととても時間がかかります)。
デメリットとしては、仕様上比較的実行に時間が掛かり、用途によっては向かないことなどが挙げられます。
Pythonの実行環境 Python 3.8.2 64bit
ソースコード 方法としては左辺を計算しそれを6倍して√を取るのですが、$\frac{1}{k^2}$を\(k = 1\)から無限に足し続けることは不可能なので、今回は\(k = 100, 000, 000\)まで足し続けたいと思います。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 from math import * #桁の多い小数を正確に扱うためのツールを利用する from decimal import * if __name__ == &amp;#34;__main__&amp;#34;: #変数sumを定義 sum=Decimal(0) #k=1からk=100000000まで for i in range(100000000): #1/k^2を計算してsumに加える sum += Decimal(1)/((Decimal(i)+Decimal(1))**2) #級数の左辺の結果を6倍し√をとる pi = Decimal(sum*6).sqrt() #結果を表示 print(pi) 実行結果 1 3.141592644040496686182218894 これだけではどれだけ正確に計算できているのか分かりづらいので、合っている桁に色を付けてみたいと思います。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 from math import * #桁の多い小数を正確に扱うためのツールを利用する from decimal import * if __name__ == &amp;#34;__main__&amp;#34;: #変数sumを定義 sum=Decimal(0) #k=1からk=100000000まで for i in range(100000000): #1/k^2を計算してsumに加える sum += Decimal(1)/((Decimal(i)+Decimal(1))**2) #級数の左辺の結果を6倍し√をとる pi = Decimal(sum*6).</description></item><item><title>ゲームのBGMについて</title><link>https://asanobuturi.github.io/document/2021/3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/3/</guid><description>1.はじめに 皆さんこんにちは、中学3年生の{明松 | かがり}です。今年初めてポジトロンの記事を書かせていただくことになりました!!!中2のときにこの記事を書いたのですが、新型コロナウイルスによる文化祭の規模縮小により物理部が部誌を出しませんでした。
さて、本題へ移っていきましょう!僕はゲームをするとき、BGMを気にしてしまうような人です。また、僕が作るゲームのBGMは基本自分で作ります。そんな僕が思ったことをまとめます。
ゲームのBGMを作ってみたい!と思われている方はこの記事を参考にして、僕なんかよりもっとBGMを作られている方やこれを職業とされている方は、へえ、こんなかわいい考え方があるんだなと思いながら読んでください。くれぐれも「あいつ幼稚な考え方だな」と思ったりするのはおやめください。傷つきます。
2.それぞれの種類の音符はどのようなところに使われるか まずはそもそも音符にはどういう種類があるの?という方のために、種類の説明をします。こちらをご覧ください。音符の名前とその記号の対応表です。
音符の種類 全音符 2分音符 4分音符 8分音符 図 その他にも譜点付きや16分音符、32分音符などがありますがそれでは細かい話になってしまうので省きます。気になるという方は調べてみてください。
さて、それぞれの音符についての説明をします。 まず、全音符とは、4拍分音を鳴らしてしまう音符です。あまり主旋律で使われることはありませんが、使われるとしたらどのような場面で使われるのでしょうか？ 2分音符とは、2拍分音を鳴らす音符です。こちらもあまり主旋律で使われることはありません。こちらの使いみちも気になりますよね？ 4分音符とは、1拍分音を鳴らす音符です。これはよく使われます。しかしBGMのジャンルによっても使われる頻度が異なります。 全音符、2分音符、4分音符だけではのんびりしたBGMしか作れません。そこで活躍するのは8分音符です。8分音符とは、2分の1拍分音を鳴らす音符です。この音符があることでBGMも大きく変わっていきます。
さて、ここまで音符の種類について解説していきました。では、それぞれの種類の音符はどのような種類のBGMを作るのか、見ていきましょう。 まず、全音符が主旋律に使われる場合としては、悲しい曲の偶数小説目や、神秘的な曲の冒頭などがあります。また、低音に使われる場合としては…とはいっても 僕の場合は 低音の部分を作っているときに全音符は乱発するのでまあ「たまに出てくるだろう」と思っとけばよいでしょう…（個人の意見です） しかし、全音符そのものが使われることは少ないのです。次の図のように、付点2分音符で3拍分演奏しつつ、後ろに1拍分のメロディーを入れる、というもののほうが多いと思いますね。
次に、2分音符が主旋律に使われる場合では、先ほど挙げたように、付点をつけて3拍分演奏されることがあります。 2拍分演奏させる場合としては、悲しい曲や、神秘的な曲の冒頭などがあります。 うん。2分音符はほぼ全音符と同じ役割を果たすのではないでしょうか？ いえ、多くのジャンルの曲の最後や8の倍数小説目の部分に使われることも多くあります。低音のパートにおいては、もうスターと言ってしまえるくらいたくさん出てきます。
また、一番よく使われるであろう4分音符が主旋律に使われる場合としては、かっこいい系のBGMが挙げられます。また、3拍子のものの場合にも使われます。しかしながら4分音符だけで使われる場合は少なく、8分音符と組み合わせて使われることが多いです。4分音符は本当に8分音符との組み合わせが良いのです！例えば、4分音符→8分音符→4分音符→8分音符→…や、8分音符→4分音符→8分音符→4分音符→…などという組み合わせがあります。また、4分音符に付点をつけて1.5拍分音を鳴らす場合もあります。低音に使われる場合では、4分音符がそのまま4拍分並べて使われたり、ほかの音符に交じって出てきたりします。
8分音符が主旋律に使われる場合では、4分音符や16分音符などと並べられて使われることが多いです。あるいは付点のある音符の前や後ろに入ったりしています。8分音符は、低音においても隠れたスターとして大活躍します。8分音符だけで並べられたり、他の音符に混じって使われたり…まあとにかくたくさん使われます。
ここまで僕はめちゃめちゃな説明をしてきたのですが、いかがでしたか？言いたいことは、音符の並べ方としては、単独で使われるときとほかの種類の音符と並べて使われるときとがあるということですね。さて、それでは次の章へ行きましょう。
3.テンポの違いはBGMにどのような影響をもたらすのか さて、テンポの違いとBGMの関係についてみていきましょう。一つだけ皆さんにこの章では覚えていただきたい言葉があります。「BPM」です。これは&amp;quot;Beats Per Minute&amp;quot;の略です。つまり何かというと、1分間に4分音符を休まずにいくつ演奏することができるのか、ということです。例えば、皆さんは楽譜の最初に「♩=83」みたいなものは見たことがありますか？これは、1分間に4分音符を休まずに83回演奏できる、ということなのです。この単位は心拍数にも使われています。
では、テンポ数の具体例を挙げていきましょう。ざっと説明していくと、まず、80BPM前後では「遅い」テンポであり、ゆっくりしているので、落ち着いたような曲、神秘的な曲、悲しい曲などの例が挙げられます。
100BPMは、いわゆる「とても遅くはないが速いとか普通のテンポではない」といった中途半端なリズムであるため、緊迫した場面や、何かを考えさせるような場面のBGMで使うことができます。
120BPM前後の曲の用途はいろいろあります。例えば、かっこいい系の曲、少し落ち着いた曲、少し元気な曲、少し緊迫感のある曲などがあります。なぜ「少し」という表現をたくさん使用したかというと、あまり強い表現ができないからです。120BPM以外のテンポで強い表現をすることができます。でも一番使い道が多いのはこの120BPMなんですけどね。
そして150BPM前後は「速い」リズムであるため、とても激しい音楽に使われます。ここに低音などをたくさん入れると工夫次第では120BPMくらい、またはそれよりもかっこいい音楽を作ることができます。
また170BPMは「更に速い」ことから、更に激しい雰囲気になります。
使い道は結構少ないですが応用として、ゲームのワンシーン内でも雰囲気の起伏が激しいときには、テンポを途中で変えるものもあります。これを見て「ボス戦のBGMとかのことじゃない？」などと思った方もいらっしゃると思います。確かにボス戦が「雰囲気の起伏が激しい」の典型的な例と言えるでしょう。
このように、テンポの違いもBGMの雰囲気を変え、様々な使い方ができるのです。 むしろ、ゲームの雰囲気に合わせたBGMを作る際、まずはそのシーンにあったテンポとは何かを考えることが重要となってくると僕は考えます。
4.BGMに声は入れるべきなのか さて、ここからはレベルを少し上げます。基本的な音楽の構成要素について見ていったのですが、ここでBGMに歌詞は要るのかということを考察します。本来BGMには歌詞がないのが普通なのですが、歌詞を入れるか否かでだいぶ奥が深くなります。 声の入れ方にはどのようなパターンがあるのか見ていきます。
よくある普通の歌みたいに歌詞のようなものを入れる 「アー」「オー」などの単母音の声を入れる 意味不明な(文字起こし不可能な)歌詞を入れる 1単語や短い文章など、1つのフレーズをある場所に入れる サビだけに歌詞を入れる サビにだけ歌詞を入れない ほとんど声だけ などいろいろあります。パターンを挙げたらきりがありませんね。このように、歌詞に声を入れるというのは奥が深いものなのです。 しかし、本題はここから。BGMに歌詞を入れるのには次のような目的があると(少なくとも僕は)考えます。
ゲームをする上で、BGMの存在感を一層強める 今のゲームのシーンをより鮮明に反映する 何かしらの演出をより豪華にする 声のない単調なBGMからより複雑に、より長くし、ゲームの奥深さを増す などいろいろあります。しかしながら、BGMの声には短所もあります。
ゲームのクオリティがある程度高くないとBGMとのギャップが際立ってしまう 音量を調整しないと声が際立ちすぎたり、逆にまったく意味がなかったりしてしまう 特に日本語など、歌詞が聞き手にとってとても良くわかる言語だとゲームよりも歌詞のほうが印象に残りやすくなってしまう 声にはこのような短所もあり扱いが難しく、曲制作に長けているような人でもなかなか難しかったりします。
上の短所にもありましたが、BGMの声の音量調整は特に複雑です。そこで、音量と声との印象の関係を表にまとめてみました。表の横の列は、声パートの音量がその他の楽器の音量の何%なのかを示し、縦の列は全体音量を示します。なお、特にこの表は、作曲の経験があまりなく、ゲームもほとんどしない僕の独断と偏見のみに基づいています。くれぐれも参考にしすぎないように。
〜50% 〜100% 100%〜 静か 声はほとんど聞こえない、BGMの存在感は薄い ある程度バランスが取れている、存在感は小さい ほとんど声だけが印象に残る 普通 ゲームに集中しやすい 特にバランスの取れたBGM、ゲームの雰囲気を感じやすい 何かしらの演出に使われそうな独特な印象 うるさめ 声よりはメロディを気にしやすい BGMの存在感そのものは特に大きい 声の印象が大変高い このように、声を扱うのはとても難しいのですが、使いこなせるようになると曲の幅がとても広がります。みなさんがゲームをするときも、特に声を気にしてはいかがでしょうか。 また、どんなに声を工夫しようとも声が似合わないような演出やシーンもたくさんあります。「こんなシーンは果たして声を入れるべきなのか」と考えてみるのもとても楽しいものです。 しかし、更に難しいポイントが次の章にあります。みなさんはなんだと思いますか?</description></item><item><title>コイルガン 四年間のすべて</title><link>https://asanobuturi.github.io/document/2021/9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/9/</guid><description>お久しぶりです。そうでない方もお久しぶりです。高二になってしまった部長です。前回部誌を寄稿してから早二年、今でもバカの一つ覚えみたいにコイルガンを作り続けているわけですが、その間いろいろありましたね。「いろいろ」の中身はあえて触れませんが。
ただのコイルガン？ コイルガン…なんて漠然と言ったところで、人によって色んなやり方があります。電源、昇圧回路、コンデンサ、スイッチング素子、コイルの段数、コイルの巻き。どんな理由で何を選んだか、そこに焦点を当てて解説します。
電源 コイルガンはEML(Electro Magnetic Launcher)の一種で、その名の通り電気を使って金属製の弾を発射するものです。電気を使うということは当然電源が必要で、その電源をどうするかも人によって様々です。
一番簡単(に思える)のは、コンセントのAC100V電源をブリッジダイオードで整流して、コンデンサで平滑した後にそのままコイルに流す方法でしょうか。ただこれはコンセントからコンデンサの間にトランスを挟まないといけないという欠点があります。(なぜかはググってください) いや、少し言い方が雑でした。実を言うとACアダプタにもトランスは入っていますし、トランスを挟むことそのものが欠点になるわけではないのです。そう、50~60Hz用の大きくて重いトランスを挟むことが欠点なのです。 今のACアダプタはスイッチング回路を使って相当小さく、軽くなっています。半導体技術の賜物ですね。このスイッチング回路を一から自作するのは大変ですし、コイルガンの機能の肝になるわけではないので市販のACアダプタで済ませることにしました。 また電池駆動も考えたのですが、乾電池は一瞬で無くなってランニングコストが相当高く付きそうなのと、eneloopなどの乾電池型の充電池も容量が少ないので交換の手間がありますし、かといってニッケル水素電池やリチウムイオン電池を組み込んで、充電制御回路まで作るのも面倒です。幸い僕が製作で使う物理教室にはあちこちにコンセントがありますし、文化祭の展示の時はコイルガン用に電源タップを用意すればいいですからね。
さてACアダプタと一口に言っても電圧、電流、電源容量と色んな種類のものがあります。 これをおざなりにすると痛い目に遭います。何て言ったって中2の文化祭で充電が異様に遅かったのはそのせいでしたから。 例えば電源容量(平たく言うとW数です)の小さいものを選ぶと、電力量は電圧と電流の積ですから、高電圧を扱うコイルガンでは引き出せる電流量が極端に少なくなってしまいます。5V2AのACアダプタで100Vのコンデンサを充電する、ぐらいなら待ち時間も気にならないぐらいだとは思いますが、今回のコイルガンは400V2720μF(後述)を10秒ぐらいで充電したいので、あんまり電源容量の少ないやつでは困ります。売ってる中で一番大きいやつがいいですね。
電源容量が大きければ何でもいいわけではありません。極端な話0.1V500Aだったりすると困るわけです。例えば半導体の耐電流は電圧に関わらず絶対的な電流で決まります。今回はなるべく大きくして電流を小さくする方針で行きます。仮に電圧が高すぎるなら抵抗で分圧すればいいのに比べて(電流消費が小さい場合に限りますが)、低すぎるから昇圧するのは色々面倒ですし。 結果電圧は15V前後にすることにしました。これは昇圧回路で使うNE555(後述)というICの耐圧が16Vだからです。16VのACアダプタもあるのですが、電源電圧でギリギリを攻めるのはさすがに怖すぎます。
また取り回しも重要です。先述の通り物理教室はあちこちにコンセントがありますが、かといってコンセントから全く動けないのは困ります。ですからできればPC用のACアダプタぐらいの大きさで、ATX電源のような大きいものは使わないことにしました。
この「なるべく電源容量の大きなもの、でもPC用のACアダプタぐらいの大きさで」という条件を元に、秋葉原の秋月電子で探してみたところ、15V 3.34Aがちょうどよさそうですね。何でよりにもよって3.34Aなのかは知りませんが。
(https://akizukidenshi.com/catalog/g/gM-08432/) これで電源については解決です。
昇圧チョッパ コイルガンの肝となる部分の一つが昇圧チョッパです。「高速充電」や「連射」など、使いやすいコイルガンを作るにはここの改良が不可欠です。
これだけ言っておきながら、昇圧チョッパに関してはほとんど改良点がありません。本当はネットで色々調べたり、どこを改良するか構想も描いていたのですが、何しろ時間がなくて…。基本も大事だということでお許しください。
さて、一番簡単にやろうとするなら使い捨てカメラの(ストロボの)昇圧回路にコンデンサを繋げるのがいいのでしょうか。確かに簡単ではあるのですが、当然欠点も多くあります。
まず一つは性能が低いことです。ストロボの消費電力はコイルガンと比べてかなり少ない(はず)なので、回路もかなり簡素です。これでは充電に相当時間が掛かるでしょう。
二つ目、これが一番大きいのですが、僕にわざわざ写真店に行って「回収した使い捨てカメラ、いくつか頂けませんか」なんて言う度胸がないことです。「コイルガンに…」なんて言ったところで相手にとっては意味不明ですし、そこまでして性能の低いものを集めに行く必要はありません。
また昇圧チョッパ単体で市販品があればいいのですが、コイルガン用なんてものは当然なく、そもそも昇圧チョッパ自体がマイナーなんです。降圧はPCやスマホ用にICもたくさんあるのですが…。 ICレベルなら昇圧チョッパもあるのでしょうが、だからといって「400Vまで耐えられて、数A出せる」ものは調達も難しいでしょう。ここに関しては使い捨てカメラを諦めるなら自作しかありません。
自作するにはまず昇圧チョッパの原理を理解しないといけません。 昇圧チョッパは次のような回路構成になっています。
スイッチON時 まずスイッチQ1がONのとき、電流は赤線の経路で流れます。 このとき、コイルに電流が流れるとエネルギーが次第に蓄えられていきます。電流I[A]が流れるリアクトルL[H]に蓄えられるエネルギーP[J]は次式で示されます。
$$ W = \frac {1}{2} LI^2 $$ スイッチOFF時 ここでスイッチQ1をOFFにしてみましょう。スイッチQ1がOFFのとき、電流は青線の経路で流れます。 このとき、Q1がON状態のうちにインダクタに貯まったエネルギーが矢印の通りにコンデンサに蓄えられます。コンデンサの両端に電流が流れればエネルギーもその分蓄えられ、両端の電圧も上昇していきます。 また出力電圧(=コンデンサの電圧)Voutが入力電圧Vinより大きくなったとしても、ダイオードD1の働きでVout側から電流が流れ出ることはないので、負荷抵抗を繋がない限りコンデンサに蓄えられたエネルギーは保持されます。
こうしてコイルガンに必要な数百V、今回は400Vの電圧が得られるわけです。ちなみに、今回は主に執筆時間の関係で説明が相当雑ですが、数式を交えた詳細な解説はネット上にたくさんあるので、気になった方はぜひ調べてみてください。
スイッチ」を「切り替える」 さて、問題はこの先にあります。先ほどの解説ではスイッチを「理想的な」、つまり電圧電流の制限もなく、ON時の電気抵抗はゼロで、一瞬でON-OFFの切り替えができて、なおかつ制御が不要なものとして扱っていました。 現実的にそんなものがあるかどうかなど言うまでもないでしょう。ありません。 そこでこの「理想的な」スイッチの代わりに何か使えそうなものを用意しないといけません。
「スイッチ」と漠然というと多くの方はこの「トグルスイッチ」を思い浮かべるでしょう。確かにこれもスイッチの役割を果たせますし、扱う電流が小さければ全く問題はありません。射撃用のトリガーなどはこれを使っていますし。
ただし、昇圧チョッパの「スイッチ」となると話は違います。まずは電圧です。 回路構成からもわかるとおり、このスイッチには出力電圧がそのまま掛かります。今回は400Vですね。一応スイッチそのものの耐圧の条件は満たせるはずですが、問題はそこではありません。
出力電圧がそのまま掛かって、なおかつスイッチON時の電流を見てみると、このとき電源-インダクタ-スイッチで閉回路ができるわけですが、この回路かなり大きな電流が流れます。 具体的には…これはインダクタの定数なども考慮して色々計算してやる必要があるのですが、結局のところACアダプタの最大電流程度になりそうです。勘ですけど。
また、「スイッチ」を「切り替える」速度も問題です。 先ほど「スイッチON時インダクタにエネルギーが貯まり、スイッチOFF時それが放出される」ことを述べましたが、これはすなわち「インダクタにどれほどエネルギーが貯められればいいか」はスイッチがONの時間、すなわちスイッチのON-OFFが切り替わる周期に依存することになります。
「インダクタにどれほどエネルギーが貯められればいいか」というのはインダクタの定格電流のことです。当然ながら定格電流の大きなインダクタは大きく、重くなります。 なるべく回路は小型化したいので、インダクタも例外ではありません。 スイッチング周期を短くしてインダクタを小型化しましょう。
(今後は数値として扱いやすい一秒間の振動数、つまり周波数f[Hz]で解説していきます。周波数fは次式で求められます。)
$$ f[Hz] = \frac {1}{T[s]} $$ さて、スイッチング周期を短く、つまり周波数を高くするにあたって大きな制約が立ちはだかります。それは「スイッチ」です。 具体的に今回はスイッチング周期を10kHz程度にしたいのですが、周期にすると1/10000秒です。こんな早さでトグルスイッチのON-OFFを切り替えられる人はいるのでしょうか。 もし我こそは！という方がいらっしゃいましたらお近くの物理部員までお声かけください。詳しくお話を伺います。</description></item><item><title>芸術の重要性について</title><link>https://asanobuturi.github.io/document/2021/7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/7/</guid><description>はじめに 皆さんこんにちは、またまた登場の中学3年生のR.K.です。
さて突然ですが、皆さんは音楽、美術、書道といった芸術について興味を持っていますでしょうか？もしかしたら「芸術を学んでも意味がない」「芸術は役に立たない」と考えている方もいらっしゃると思いますが、僕は、そう考えるのは甘いと思っています。
皆さんは芸術というと何を思い浮かべるでしょうか？例えば昔の芸術家の絵画とか、有名音楽家の音楽などといったものを鑑賞したり、絵や彫刻を作らされたり、音楽を演奏したりすることを思い浮かべる人もいらっしゃると思います。しかし芸術とはそんなに幅の狭いものではありません。古い芸術を見ながら新しい芸術を切り拓いていく、それが芸術だと僕は考えます。具体的なことについてはこの章以降で説明しますが、学校で習うような国語、数学、社会、理科などの教科同様、芸術もまたこの世界には欠かせません。
物理部でもプログラミングや電子工作にとどまらず、3DCG制作や映像編集、作曲といったこともしている部員もいたり、そうでなくてもそれらを趣味にしている部員もたくさんいます。僕がこの記事を書こうと思った理由は、芸術に未知の可能性を秘めている(？)物理部の部員である僕から芸術の存在意義をまだ見いだされていない方に芸術の重要性を伝えたいと思った他、僕自身に対しても「この記事を書いて改めて芸術と向き合ってみよう」と思ったからです。
もちろん僕は芸術関係の活動がまだまだ他の人に比べては浅いため、芸術の本質からはかけ離れている事があるかもしれませんし、これはあくまで僕の考えなので、他の人が思っていることとは異なるかもしれません。あくまで1人の人間の考えと思ってください。また、物理部の活動内容とはズレている事があるかもしれませんがご了承ください。僕の拙い日本語もご愛嬌ということで。
物理部員の方々を含め、ごゆっくりお読みください。
なぜわたしたちは芸術を学ぶのか そもそも私達はなぜ学校の授業として芸術を学ぶのでしょうか。僕が勝手に考えたことを説明します。
もちろん、芸術を学ぶのは学校側が芸術を使って金を稼ぐことを促しているからである、ということはありません。
まず理由の1つとして、「芸術とはなにか」を学ぶためということがあります。もちろん人間は生まれてから何かしらの方法で教えられるまでは「芸術」の概念はわかりません。しかも、「芸術とはなにか」というものが芸術についての知識が何もない状態で端的に言葉で伝えられても分かる人は少ないでしょう。鑑賞・実践などを繰り返すことでようやく「芸術とはなにか」がわかるようになります。
2つ目は、芸術的なセンスを発揮するためです。人間は生まれながらにして芸術的センスを持っているのですが、唯持っているだけでは発揮することはできません。芸術を鑑賞したり実践したりして芸術的センスを磨き、発揮できるようにするということです。
3つ目には、芸術作品を芸術作品として捉える能力を育むためということもあります。もし学校で芸術について学んでいなければ芸術作品をただの絵、ただの物質の塊、ただの音としか捉えることができません。しかし授業などによってただの絵、ただの物質の塊、ただの音にも芸術性を見出すことができるようになります。先程述べた「芸術的なセンスの発揮」にもつながっていきます。
芸術とはなにか さて、「芸術とは何か」ということを説明しようかなと思います。
世の中には色々な芸術作品がありますが、皆さんはどのようなものを芸術作品と考えていますか？ある人は芸術作品と考えているものであっても、別の人は芸術作品と考えていないかもしれません。このように、世の中に存在するモノの中で芸術作品とみなすかみなさないかは個人次第です。
また、芸術作品というとどのようなイメージがあるでしょうか？あまり日常においては使われない、または身近ではないと考える人も多いと思います。しかし芸術作品の判断基準が曖昧であることから考えれば、役に立つようなものだって芸術作品とカウントされるかもしれないのです。
したがって、僕は芸術とは世の中に存在するモノすべてと考えます。
その芸術の中にも「役に立つ芸術」と「役に立たない芸術」の2つに分かれています。
世の中に存在するモノすべてというのは、音楽などといった形のないものも含まれています。また、役に立つ芸術であるかそうでないかというのは一般的な分類が存在しているわけではなく、個人によって分かれます。ある人が、これは役に立つと考えているものでも他の人にとっては役に立たないと考えることもよくあるからです。
俗に「芸術」と言われている音楽、美術、書道などは「役に立たない芸術」です。しかし「役に立たない」ことと「存在してもしなくても良い」ということは混同してはいけません。ただ私達が日常生活を送るうえでで役に立たないというだけです。詳しくは第5章で説明します。
芸術の重要性 いよいよ本題の、芸術の重要性についてです。
まず、この世の中には「芸術作品」と呼ぶことができるものは無限にあり、世の中に存在するすべてのモノから学ぶことができることがあるのです。
芸術は「世の中に存在するモノすべて」である以上、何かしらモノを作る時には常に、今まで取り入れてきた芸術の知識が必要となります。ということは、今まで取り入れてきた芸術の知識と勘すべてが新たな芸術作品の制作に役に立ちます。
世の中に存在する芸術作品にも独創的なものが多くあります。その独創的なものは、何も芸術の知識や勘がない状態から生まれると思われがちですが、何も知識がない状態では芸術作品を生み出すことさえもできません。独創的な芸術作品は数多ある芸術作品を知ることで、そこから生み出されるのです。
つまり何が言いたいかというと、「芸術」、つまり色々なものを吸収することで日常においてものを独創的な観点から見ることができるようになり、また独創的なものを作り出すことができるようになるのです。その独創性は、芸術の情報を吸収すれば吸収するだけ大きくなります。
もちろん、役に立たない芸術も含みます。
役に立たない芸術の重要性 では、俗に言う「芸術」、つまりは役に立たない芸術の重要性についても説明していきます。
先程述べたとおり、役に立たない芸術はあくまで日常生活において直接的に役に立たないだけであり、これらの存在も世の中において欠かせません。
役に立たない芸術も役に立つ芸術同様、ものを独創的な観点から見るのに役に立ちます。しかし、役に立たない芸術の重要性はそれだけではありません。
まず、役に立つ芸術は役に立つが故に、そこから感動するということはあまりないでしょう。なぜなら役に立つ芸術の作品が作られるうえで、芸術的な意図はないからです。
皆さんは絵画を見たり音楽を聞いたりして、心を動かされたことはありますか？役に立たない芸術は、人の心を動かすためにあるのです。
むしろこちらの重要性のほうが納得することができるでしょうか。
もちろん役に立つ芸術も同じくらい人の心を動かしているのですが、それに気づくことはできません。役に立たない芸術は人の心を直接的に動かしています。
しかし、それは役に立たない芸術としての存在意義であって、日常において役に立たない芸術に存在意義があるということにはまだ繋がりません。役に立たない芸術が、役に立つ芸術との間の垣根を超える瞬間が何処かにあるはずです。
僕は先程「役に立つ芸術から直接的に心を動かされる事は少ない」と言いましたが、「見えないところで心が動かされている」、つまり心が動かされていないように思われていても、実は心の底ではその役に立つ芸術の作品に夢中になっているということはありえます。そのようなことは、あるものが役に立たない芸術の要素を取り入れているか次第でありえるかもしれません。
以上より、僕はこう考えます。
役に立たない芸術を通して人の心を直接的に動かすことを学び、その知見を利用して、役に立つ芸術作品をつくる上で、役に立たない芸術から得た独創性を活かすことができるというだけでなく、人の心を見えないところで動かすという点においても役立てることができるということです。
これが本当の、役に立たない芸術が役に立つ芸術との垣根を超える瞬間です。
物理部と芸術 さて、ここまで全く物理部に関係ないことを書いてきたのですが、これはこの部活である物理部の部誌であり、少しは物理部のことについても書こうと思います。物理部と芸術はどのような関係性について説明します。「そもそも物理部とはなにか」という根本的なところまで説明してしまうかもしれませんね。
物理部はプログラミングや電子工作をしている部活であり、一見芸術に関係ない部活であると思われると思いますが、物理部、いや、部活というものすべて芸術団体であると僕は考えます。 この物理部の場合、「ブログラム」「機械」という名の「芸術作品」を創り上げています。
その「プログラム」「機械」にも種類は部員が作ってきた数だけあり、同じものはありません。
特に物理部は「モノ」を作る部活であり、つまりははっきりとした「芸術作品」を作る部活であるということです。
物理部員は、先輩が作った芸術作品の仕組みを知り、それに似たものを作ろうとしているがその過程で道がずれ、結果的にオリジナリティのある芸術作品を作ることができるようになると思います。
その中にも「役に立つ芸術」作品、「役に立たない芸術」作品を作っている部員がそれぞれいて、その役に立つか立たないかの垣根を超えてものづくりに励んでいます。
「はじめに」で、「3DCG制作や映像編集、作曲といったこともしている部員がいる」と言及したように、それはつまりたとえ特定のことであっても、芸術の面白さと可能性を見出し、役に立たない芸術に足を踏み入れる部員も増えてきています。
だからこそ、ものづくりの楽しさを知っている部員がいる物理部は、芸術団体の頂点を名乗るのにふさわしいと言えるのではないでしょうか。
芸術を学ぶにあたって さて、芸術を学ぶにあたって、私達は何を意識すればいいのかを考えてみます。この章で説明する芸術は、主に役に立たない芸術を示しています。
そもそも、芸術を教わるがまま学ぶというのも1つの芸術の学習で、それだけでも十分な芸術の知識を得ることができるとはいえ、それだけでは勿体ありません。与えられた少ないものから、その更に上を学ぶこともできるはずです。
例えばこのようなことができるでしょう。
芸術の情報が1つ与えられたら、自分が得た役に立つ芸術または役に立たない芸術の情報を1つ引っ張り出します。次に、与えられた芸術の情報をその情報と対比します。そこから共通点を見つけ出します。共通点があろうとなかろうと、それを数回繰り返します。
もちろんそこから見つけ出したことを何かしらの紙に書き記すなどする必要はありませんし、頭に留めておくくらいで十分だと思います。
このようなことをすることで、得た芸術の情報を独立させず、すべての情報を互いにつなげる事ができ、芸術をひとかたまりにすることができます。そうすることで、第5章や第6章で書いたようなことをすることが容易になるのです。
もちろん今挙げた方法は一例で、情報をひとかたまりにする方法は他にもたくさんあります。その方法を考えるところから始め、芸術を学ぶときに活かしてみるのも良いかもしれません。
結局何が言いたいのか ここまで長ったらしい文章を書いてきたのですが、結局僕が言いたいのはこれだけです。
芸術とは、世の中に存在するモノすべてである 芸術には役に立つ芸術、役に立たない芸術がある 芸術を学ぶことで日常においてものを独創的な視点から見ることができる 役に立たない芸術は人の心を動かすことに繋がる 物理部は芸術団体の頂点を名乗るのにふさわしいのではないか 芸術をただ学ぶだけでは勿体ない という僕の芸術に関しての独断と偏見でした。改めて言いますが、これは一般的な考えではなく1人の人間の考えです。もちろん反対意見もあるだろうし、この人何を言っているんだと思う方もいらっしゃると思います。あくまで参考程度にしていただければ幸いです。
おわりに という感じでこの記事を書かせていただきましたがいかがでしたでしょうか。</description></item><item><title>自作コンパイラを実装してみた</title><link>https://asanobuturi.github.io/document/2021/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/10/</guid><description>はじめに こんにちは、高二の中野です。今回の部誌では、コンパイラについて紹介してみたいと思います！自分自身昔からコンパイラに対して「難しそう」みたいな偏見を抱えていて全く触れてこなかったのですが、ふとしたきっかけで自作Cコンパイラについて体系的にまとめているサイト(参考文献に載せておきます)を見かけて覗いたところ、「意外といけそう」と思ったので軽く始めてみたらハマってしまったという次第です。ところどころ至らない点があると思うので、もし不明な点や疑問があればこのメールアドレス( s2017197@asano.ed.jp )に連絡してください。
対象読者 C++, Pythonなどのメジャー言語で基礎的なコードが書ける人。ある程度人のコードが読める人。今回の部誌は扱う内容がかなり学問的というか高度なので、細かいプログラミング言語の文法などは説明しないのでご了承ください。同様に小学生がこれを読むのもあまりおすすめしません。受験勉強してください。逆にこの条件から外れた方々にとっては割と楽しめる内容かと思います。わからない用語・関数などが出てきたら適宜自分で調べてみてください。コーディングにおいて自分のほしい情報を限られた時間でインターネット等で見つけるのは大事な能力です。ちなみに私はC++のリファレンスを参照する際には cpprefjp(https://cpprefjp.github.io)を主に使っています。
コンパイラとはなんぞや ではここから実際にコンパイラとは何かを説明しましょう。 Wikipediaにはこのように書いてあります。
コンパイラ（英: compiler）は、コンピュータ・プログラミング言語の処理系（言語処理系）の一種で、高水準言語によるソースコードから、機械語あるいは元のプログラムよりも低い水準のコードに変換（コンパイル）するプログラムである。
有名な話かもしれませんが、コンピュータは0と1の羅列(2進数)をデータとして扱い、それをもとに計算などを実行しています。要は、コンピュータは0010100110011001010101000などのような我々人間にとって一見摩訶不思議に見える数字の羅列を用いています。一方、我々は普段日本語や英語などの自然言語を用いています。この人間とコンピュータの通訳係となってくれるのがコンパイラです。大半のプログラミング言語は人間にとってある程度の可読性が担保されています。もちろん、我々はコンピュータを利用するためにさっきの0と1の羅列を自分でキーボードで打つわけにはいけませんよね？その、割と人間寄りいわば自然言語寄りのプログラミング言語をコンピュータが理解できるように0と1の羅列に変換するのがまさにコンパイラの仕事なのです。 コンパイラの仕組みを理解することできっとあなたはコンピュータと、より親しくなれるでしょう！
コンパイルの手順 前章ではコンパイラの概要について説明しました。ここから詳しい話に移りたいと思います。まず簡潔に言うと、コンパイラは以下の4つのフェーズを踏んで実行されます。
1.字句解析
↓
2.構文解析
↓
3.アセンブリコードの生成
↓
4.生成したアセンブリコードをバイナリに変換する
これだけだと分かりづらいと思うので具体例を出して説明します。今 int main(){return 0;} というC言語のソースコードをコンパイルしたいとします。当然コンパイラへの入力形式は 文字列 です(C++で扱うとしたら const char*やstd::stringのような型を用いるでしょう)。しかしコンパイラからしてみると、文字列の状態だと大変扱いづらいのです。プログラムによってはint main () { return 0; /*hogehoge*/} のような本来コンパイルする際には不要な空白やコメントがついている場合もあります。それを除去してよりソースコードの本質を抽出するような処理が1番目の字句解析です。このプログラムの場合、ソースファイルは [int,main, (, ), {, return, 0, ;, }] という一つずつが意味を持った 字句(トークン) の配列に変換され、コメントや空白なども全て無視されます。こうすることで、2番目以降の処理が格段にやりやすくなるのです。次にこのトークン配列を 構文解析木(AST) という 木構造 に変換します(なぜこのようにする必要があるのかは後ほど説明します)。この工程を文字通り　構文解析と呼びます。そして、その構文解析木を元にアセンブリコードを生成して、そのコードを機械語(バイナリ)に変換(アセンブルといいます)すればコンパイラの仕事は終わりです。字句解析の過程は比較的に簡単なので、ページ数的に ここでは省略したいと思います。では次章からさっそく構文解析から実装していきましょう！ちなみに今回はすべてC++で実装しています。
開発環境 今回私はVisual Studioでコーディング&amp;amp;ビルドし、生成したアセンブリコードは WSL(Windows Subsystem Linux) というWindowsマシン上でLinux(Ubuntu)が動く的な仮想環境上で実行ファイルにアセンブルしました。ちなみにビルドする際は x86 ではなく x64 でビルドしてください。 x86 だとなぜか WSL の呼び出しに失敗します。</description></item><item><title>深層強化学習によるリバーシAI</title><link>https://asanobuturi.github.io/document/2021/4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/4/</guid><description>はじめに いわゆるAI（人工知能、artificial intelligence） というものは実はかなり定義があいまいです。比較的しっかりした説明をしそうなWikipediaでさえ、「～ともされる」「～もこう呼ばれることがある」と、なんとも歯切れの悪い説明をしています。要約して説明するなら、「『コンピューターで人間の知能を再現してみよう』という分野（またはそれの研究対象）のこと」といったところでしょうか。 『AIがこれからの社会で～』『我々の仕事はAIが～』といった言葉はよく聞きますが、多くの人はぼんやりとしたイメージしか持っていないと思います。注目されていると言われている「AI」とはどういった仕組みで、何ができて、何ができないのでしょうか。そういった疑問から自分の手で実際に簡易的なものを作ってみて理解を深めたいと思い、この記事を書きました。この記事を読んでそういったことが伝われば幸いです。
この記事は自分で理解を深め、知識を確かめるために書いたものでもあるので、何も知らない状態では理解しづらい文、数式が多く含まれると思われます。また、内容に誤りも含まれるかもしれませんので、ご了承ください。
強化学習とは 概要 強化学習（reinforcement learning） はAIが学習をして知識を獲得する機械学習（machine learning） の手法の1つです。強化学習の特徴はその学習方法にあります。別の機械学習の手法であり、画像認識などで用いられる教師あり学習（supervised learning） と比べてみましょう。 教師あり学習では、前もって用意された問題（入力）とそれに対する解答（出力）をセットにした教師データを使って学習を進めます。人間が何かを学ぶ時のように、自分の出した答えと解答を見比べて、誤差を修正して学習するわけです。しかし実際の場合には、学習すべき問題が多すぎる、もとになるデータベースがない、そもそもこれといった圧倒的な正解がない、といった理由で十分に教師データを用意できない場合があります。 このような場合に対応しやすいのが先ほどの強化学習という手法です。強化学習では教師データをまったく必要としません。代わりに学習をする対象である環境（environment） に対してランダムな行動を繰り返すなどして試行錯誤を重ねます。すると環境から良い行動には報酬（reward） が、悪い行動にはマイナスの報酬である罰（punishment） が与えられて、それをもとに教師データの代わりとなる知識を自ら作り出すことができます。なので、なにかのスコアといった数値的な報酬に変換しやすい要素を最大化させるなどの行動を学習したいときに有効であると言えます。また、ランダムに試した行動がうまくいったかを学習するため、人間が思ってもみなかった答えを編み出すこともあります。 今回はその強化学習の手法のうち問題解決のためにどういった行動パターンをとればよいか学習をするQ学習（Q-learning） というものについて考えてみます。
Q学習の仕組み Q学習ではある状態（situation） における行動（action） の評価値となるQ値（Q-Value）（統計学の用語）というものを学習します。学習を通して、ある状態でのある行動が良いかどうかを正確に判断できるようになれば、すなわち評価値であるQ値を適当に出力できるようになれば学習成功ということになります。良い行動かどうかというのは、環境から与えられる報酬（マイナス値の報酬である罰を含む）のみによって判断できるので状態\(s\)における行動\(a\)のQ値を\(Q(s,a)\)と表すと、環境から与えられる報酬\(r\)を用いて以下のように\(Q(s,a)\)を更新すればよさそうです。 \[Q(s,a)=Q(s,a)+r\] しかし実際にすべての行動に報酬や罰を与えられることは少ないです（もし与えられるなら教師あり学習のほうが良いかもしれません）。サッカーやバスケットボールなどの球技を環境の例として考えてみましょう。これらのスポーツでは「シュートを成功させる」という行為には点（＝報酬）が与えられます。しかし、「ゴールの近くでパスを受け取る」という行動はそれ自体に対して点は与えられません。ですが、一連の流れで見ると「ゴールの近くでパスを受け取る」という行為は点に強く結びつく行動であり、高い評価を与えられるべき行動だと考えられます。なのでこういった行動を「ほぼ点が入ったようなもの」とみなして時刻\(t\)におけるQ値を次のように更新してみることにします。 \[ Q(s_{t},a)=Q(s_{t},a)+(r+maxQ(s_{t+1},a')-Q(s_{t},a)) \] なにやらごちゃごちゃと式が増えましたが、やっていることはそこまで複雑ではありません。\(maxQ(s_{t+1},a')\)というのは時刻\(t\)に状態\(s\)で行動\(a\)をとった後に、時刻\(t+1\)においてとれる行動のQ値の最大値を表します。つまりこれまでの報酬に加えて、「高いQ値のある状態に移行すること」そのものを報酬として与えるようにしています。しかしそういった状態に移行しても必ずしもその高いQ値の行動をとれるとは限りませんし、何よりたくさん更新を繰り返していくとQ値が発散してしまうので、割引率\(\gamma (0&lt;\gamma&lt; 1)\)を用いて更新式を次のように変更します。 \[ Q(s_{t},a)=Q(s_{t},a)+(r+\gamma maxQ(s_{t+1},a')-Q(s_{t},a)) \] 割引率\(\gamma\)は時系列的なつながりの強い場合には1に近く、弱い場合には0に近く設定されます。これによってその後の行動との関係性の強さを設定できます。 また、実際に学習を進める場合にはすべてのQ値をランダムな値で初期化してから、「もっともQ値の高い行動をとる」などのように設定し、偶発的な報酬や罰に左右されないように何回も更新を繰り返して少しずつQ値を修正します。なので1回の更新が与える影響を減らすために学習係数\(α\)を用いて更新式を次のように変更します。 \[ Q(s_{t},a)=Q(s_{t},a)+\alpha(r+\gamma maxQ(s_{t+1},a')-Q(s_{t},a)) \] これで一般的に用いられている更新式の完成です。上記の内容を大雑把にまとめます。
環境によって報酬や罰が与えられる場合はその行動のQ値がそのまま決まる そうでない場合は移行先の最高Q値を割り引いた値を、その行動のQ値にする 学習開始時はすべてのQ値はランダムに初期化され、だんだんと修正をして学習をする 深層学習とは 概要 昨今のAIブームは第三次と言われていますが、その火種となったのが深層学習（ディープラーニング、deep learning） という技術です。これは主にもともとあったニューラルネットワーク（神経網、neural network） のパーセプトロン（Perceptron） という手法を発展させたものを指します。ニューラルネットワークは人間の脳にある神経細胞のネットワークをコンピューター上で数学的に再現を試みる、というものです。ニューラルネットワークは特定の入力に対して特定の出力をするという条件を複数同時に満たすことのできる関数を作成できたりします。なのでニューラルネットワークは知能が関数で表現できることを前提にした上で、その知能を神経細胞を模した関数の集合によって再現してみるという試みとも考えられると思います。もし実在する複雑な問題に対しても関数化が完全に可能になれば、いろいろなことができるようになると考えられます。 最近になってから注目を浴びているような印象がありますが、実はニューラルネットワークの歴史自体はとても長く、人工知能研究の歴史の中でも比較的初期段階から研究されていた手法です。しかし近年のコンピューター技術の発展によりニューロン（神経細胞、neuron） の数を容易に増やすことができるようになり、より複雑なネットワークを形成することができるようになったため、ニューラルネットワークの発展的な分野である深層学習等の研究が加速したといえるでしょう。ニューロンの数を増やすだけでなく、そのネットワークの形を工夫する畳み込みニューラルネット（convolutional neural network） などの研究も進んでおり、その最たる例であるGoogleなどの画像認識等の技術には目を見張ります。
ニューラルネットワークの構造 ニューラルネットワークはニューロンが集合して形成するものなので、まずはニューロンとは何かというところから説明します。 ニューロンはそれぞれの入力に対応する重み（weight） という係数と、しきい値（threshold） という係数をもち、複数の入力に対して計算をした結果を伝達関数（活性化関数、transfer function） に代入して主に単一の出力をします。これを数学的に表すと、 $$o=f(\sum_{i}x_{i}w_{i}-v)$$ $$（o:出力　x:入力　w:重み　v:しきい値　f:伝達関数）$$ となります。すこし分かりにくいですが強化学習の式よりもやっていることは単純です。それぞれの入力の値がどれほど出力に影響されるべきかを決定する重みと入力を掛け合わせたものが\(xw\)です。なので\(\sum_{i}x_{i}w_{i}\)というのは入力に重みをかけたものをすべて足し合わせるということなので、入力から取得できる情報を、何が重要か判断して取捨選択するという側面があります。 その合計値からしきい値を引き、伝達関数に代入したものが出力となります。しきい値には誤差などの比較的小さな情報を無視するようにする効果があります。伝達関数にはいろいろな関数が使用され、それぞれで効果は違いますが、極端に小さな値や極端に大きな値の影響を小さくするといった効果のものがあります。また、誤差逆伝播法（後述）に、この伝達関数の微分が深く関わっているため学習の精度や速度に直結する部分であると言えます。一般的には $$y= \frac {1}{1+e^{-x}}（シグモイド関数）$$ $$y=\left\{\begin{array}{ll}x &amp;amp; (0 \lt x) \\0 &amp;amp; (x \leq 0)\end{array}\right.</description></item><item><title>部長挨拶</title><link>https://asanobuturi.github.io/document/2021/1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/1/</guid><description>「ついにこの文章を書く年になってしまいました。」
二年前に部活を卒業した先輩が遺した言葉です。この頃はこんな言葉とも無縁で、今まで通りの日常、そして部活動がずっと続くとばかり思っていました。
ですがどうでしょう。この有様です。これで部活動が今まで通りにできるわけでもなく、特に夏休みの活動は活動時間も、活動日も半分以下になってしまいました。一年を通しても大きな比重を占める夏休みの時間が削られるわけですから、文化祭の準備もおろそかに…いや、それでも最善は尽くせたと考えましょう。今ある時間でできることを着実にやるしかありません。普段何かと理由を付けて作業をしない後輩にも聞かせてやりたいぐらいです。
さて、今年の文化祭ですが、いくつか変えてみたところがあります。一番目に付くのは部屋の配置でしょう。今まではPC班と電工班で一部屋ずつ分けて展示をしていたのですが、今年はあえてPC班と電工班を混ぜて展示してみました。というのも、電工班での滞在時間がPC班と比べ短いので、そこを平均化してより多くの展示に触れて欲しいのもありますし、電工班員があまりに少なく一部屋に展示できるだけの作品を用意できないというのもあります。後者が大きいのでしょうか、電工班をずっと引っ張ってきた身としては悲しい話です。
また、数年前から始まった壁新聞も今年は大判プリンターで印刷することになりました。今までは模造紙に油性ペンで手書きしていて、これがかなり時間を喰うのです。そこで去年は家庭用のプリンターで、A4の紙に分割して印刷することにしてみました。とはいえこれでもA4の紙を繋ぎ合わせる手間が掛かります。そこで実行委員から大判プリンターが使えるという話を聞いたのです。これはもうやるしかないでしょう。
あとは参加団体名ですかね。「物理部展 # 2021」ではなく「物理部展 丼 」です。丼 です。きっかけは2018年の「物理部展#2018」でした。当時の部長がふざけて（本人は大真面目だったのかも？）&amp;quot;#&amp;ldquo;の真ん中に点を打って丼にしてしまったのです。しかしその時は文化祭の実行委員に気づかれずそのまま&amp;rdquo;#&amp;ldquo;になったのですが、以降&amp;rdquo;#&amp;ldquo;の真ん中に点を打って#か丼か紛らわしいようにして、その年の実行委員を試すということをずっとやっていたのです。
そうしたら今年、なんと実行委員が初めてこれを丼とみなしてしまって、晴れて今年の展示名が「物理部展丼2021」となったのです。こんなことってあるんですね、という感想しかありませんが。
そして部長としての二年間を振り返ってみて、思えば先輩からの「続投は部活が崩壊するからやめとけ」という制止も振り切って二年目も部長のポストに居座ったわけですが、やはり自分の裁量で物事を進められるのは気が楽です。何をやるにも報告、連絡、相談なのは面倒で仕方がありません。そういう性格なんです。（後輩がそうしないのは困りますけど）
ただ学校側に提出する書類などは全部管理しないといけませんし、そういう面倒さはあったのでしょうか。ただ面倒なら後輩に任せればいいので、特に気になりませんでしたね。
あとは後輩はまだしも、一部は先生や友達からも「部長」と呼ばれるようになりました。部長に就任したての頃はある種の高揚感すら感じたのですが、今は何とも思わなくなってしまいました。文化祭が終わって部活を引退したらどうなるんでしょうか。「元部長」なんでしょうか。そろそろ名前で呼んで欲しいんですけど…。
関係ないことまで色々書いてしまいましたが、最後に挨拶だけ。物理部展丼2021にお越しいただきありがとうございました。今年は（今年も？）準備期間も短くお見苦しい点もあるかもしれませんが、そこは後輩に期待しましょう。ぜひ来年もお越しください。</description></item><item><title>編集後記</title><link>https://asanobuturi.github.io/document/2021/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/11/</guid><description>この度は、私達物理部の部誌「Positron 2021」を手にとっていただき、どうもありがとうございます。今年の部誌の編集を担当しました、高校2年の永田です。今年の部誌は2万字級の記事がひとつ、1万字級の記事がひとつ、そして一人で2つの記事を執筆した部員が合計1万字超の記事を書き上げ、全体で100ページもの超大ボリュームの部誌を完成させる事ができました。記事の内容はいかがでしたでしょうか。
さて、今年の部誌では新たな試みとして、記事の下書きをMarkdownにて執筆してもらい、編集と組版(レイアウト)の作業をVivlioStyleというオープンソースのCSS組版ソフトウェアでこなすということを行いました。従来のWordファイルでの原稿提出で課題であった、レイアウト管理の煩雑さを解消し、CSSで部誌全体のレイアウトを一括変更できたことはとても良かったと思います。ウェブ上に公開されているVivlioStyleのテーマをベースに様々な調整を加えて、そこそこ雑誌らしい整った体裁になりました。
また、Wordファイルと異なりMarkdownファイルはシンプルなテキストファイルであるため、校正時にはMarkdownファイルをGitでバージョン管理することで、校正前後の差分を閲覧しやすくするなど細かい事務作業の効率化を図ることもできました。私は今年で部活動を引退することになりますが、MarkdownとCSS組版を駆使した編集のシステムは、ぜひ来年の編集担当にも継承してもらいたいと思います。
ただし、VivlioStyleのCSS組版は非常に細かく高度な編集ができる一方で、組版の難易度は極めて高く、CSSに慣れていない私には厳しいものがありました。そのことは編集の作業時間に現れており、この部誌のすべてが完成したのは文化祭2日前の木曜日となってしまいました。その木曜日の早朝に印刷するという約束で待機してもらっていた顧問の先生には本当に申し訳がありません。部員の皆さんにも多くの作業を手伝ってもらいました。文化祭直前の忙しい中お手数をおかけしたなと思っています。ちなみに、ここで2割ほど責任転嫁をしておくと、木曜の未明になって部誌の原稿を完成させた某部員にはちょっとだけキレております。
こちらの部誌は、私達物理部のウェブサイトにて電子版を公開する予定ですので、ぜひそちらも合わせてご覧いただければと思います。裏表紙にウェブサイトのQRコードを記載してありますのでご利用ください。2018年の部誌ではPDFを直接ウェブに記載し、2019年の部誌ではHTMLを直接記述してウェブ記事のような形にしてきたPositron電子版ですが、今年はVivlioStyleの昨日を用いてついにキ○ドルのような手軽に読める電子書籍が実現できるかもしれません。(実際にどうなるかはこの文章の執筆時点ではわかりませんが・・・)
それでは最後に、この冊子を手にとってくださった皆さんに改めてお礼を申し上げます。そして、この後も引き続き「物理部展丼2021」と「第42回打越祭」をお楽しみください！</description></item><item><title>理想と現実の界面で</title><link>https://asanobuturi.github.io/document/2021/8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://asanobuturi.github.io/document/2021/8/</guid><description>はじめに こんにちは。物理部ポジトロンを手に取っていただきありがとうございます。展示は楽しめていただけましたか。今年の文化祭は、限定的ではありますが、浅野生とその家族、以外の来場者もいらっしゃるということと、自分がこの部活に携わる最後の文化祭になるということが重なり、僕としても、「文化祭」に対する意欲というのが生まれたので、部誌という形でも関わらせていただくこととなりました。技術的に興味深いことは他の部員がたくさん書いてくれているはずなので、僕はあえてそういった専門的、ではないことについて書きたいと思います。
僕は中1から物理部に入っておりますが、気が付いてみたらもう高2。これといった大会やら、コンテストやらに全力で取り組んだり、さらなる技術的な高みを目指して毎日努力奮闘する、といったことはなく、作りたいものが見つかったら、活動日にノートパソコンを持っていって地下一階の物理教室でのほほんと作業する、といった感じで、良い意味で緊張感のない活動をしてきました。ですが、決して社交的とは言えない僕でも、それなりには部活のことに参加したり、わずかな貢献もできたのかなぁ、と思うばかりです(できてなかったら悲しいですねw)。
小さくてゆるいコミュニティを形成しながら、しばしば友人や先輩後輩とのおしゃべりを交えつつ作業に打ち込める環境はとても快適な場所でございました。そういった居心地の良い場所だったからこそ、あっという間だったのかもしれませんね。しかしまあ、時間がたつのは速くても、ここで出会ったものはとてつもなく大きいものです。ここでは、そんなこんなを少しばかり話したいと思います。
理想 自作ゲームのあるべき姿 今年の物理部は、電子工作班とPC班で同じ教室を使って展示するというスタイルをとっており、例年の文化祭のような電工とPCを分けた展示とはひと味違った雰囲気が出ていることでしょう。そのなかで今年もPC班員たちが作ったゲームが変わらず人気なのでしょうか。
僕は今年、ゲームを自作しようとは全く思いませんでした。中3の文化祭以来、僕はゲームを自作するのを断念したからです。というのも、中2から中3にかけて、僕は寿司打（※フリーのタイピングゲーム）みたいなゲームを作りたいということで、タイピングゲームを自作したのですが、夏休みの中盤くらいになってから、タイピングゲームは子ども受けがよくないゲームだろうから、子どもたちが遊べるようなゲームをひとつ作るよう言われ、僕はとても困惑したことがあるのです。結局、それから文化祭までの短い時間になんとかもう1つのゲームを間に合わせたのですが、それ以来、遊んでもらうために、「文化祭」のためにゲームを自作する、ということに対していろいろ考え、疑問を抱き始めました。というのもどうも僕は「文化祭」のために、子どもたちに人気ではあるけれど、自分では作りたいとも思わないゲームを作らされるのを苦痛に感じ、どうしてもそれを強制されることに耐えられなかったようです。
中1中2がプログラミングに慣れる練習として、とりあえずゲームを自作するという考えに関しては、まだ的を射ていると思います。僕も今振り返ってみると、実際にある程度の量のコードを書いて一つのゲームを完成させたあとには、なんとなくプログラムの全体を見渡す能力が少しついたのかなぁ、と思わなくもないです。しかし、中3、高1、高2にまでなって作りたくもないゲームを作らされる、作らなければいけないような雰囲気になるのはもったいない気がするんですよね。パソコンでできる技術的な物と言えば自作ゲームのプログラムだけでなく、様々な種類があるにもかかわらず。例えば、何か特定のことをしてくれるプログラムの制作や、人工知能の開発、広く言えば動画編集や競技プログラミングなども含まれているでしょう。ひとそれぞれ興味のあることはもちろん違うでしょうし、彼らの興味に割かれるべき時間が、「文化祭」のためのゲーム制作によって搾取されていくなんてことがあっていいのだろうかと、疑わざるを得ません。「そもそもゲームを作るのが好きだ」という人にとっては何ともないでしょうが、それ以外の人にとっては厄介極まりないことでしょう。その時以降、「文化祭」のために強制的にゲームを自作させられるというようなことがなかったので良かったのですが、今後とも、このような犠牲者が出ないように気を付けていただきたいものですね。
文句ばっかり書き連ねていたら読み心地もよろしくないと思いますし、決して改善に向かわないので、とりあえずほどほどにしておきますね。
フーリエ級数展開によるお絵描き 僕が今年作ったのは、もちろん子どもたちに遊ばせることのできるようなゲームではなく、ただ、時間についての関数を実フーリエ級数展開して三角関数(角度についての関数)の式に変換した後に、円を回転させて図形を描くというプログラムです。
ふーりえAPC フーリエ級数展開を使って図形を描画するという試みは、世界中でたくさんの人が行ってきているので、インターネットで調べていただければ概要はわかると思います。僕は、おととしに、当時高校2年生だった先輩が作ったプログラムをみせてもらってこれを初めて知りました。円をくるくるまわしながら描いていくのこぎり波だったり矩形波を、「なんだかよくわからないけどすごいな」という感じで見ていました。その光景はとても複雑に見えましたが、実際は、大きさの異なる円を回すことで図形を描くという、意外と単純(?)な方法でありました。その後先輩からサインやらコサインやら(←全然わからなくてほとんど覚えていない…)説明を賜りましたが、中3だった僕は残念ながら理解するには到底及びませんでした。
しかしながら、そこで見たものが頭の中に焼き付いていたのか、高校二年生になって数学B(文系)の授業で三角関数を復習したときに、そういえば2年前にフーリエなんちゃらしてた先輩いたなぁ、となり、高校二年生になった僕ならできるかもしれないと思いながら、制作に取り掛かりました。覚えていたことは、その先輩がフーリエうんぬんでおえかきをしていたということぐらいだったので、そもそもの数式やそれらの導き方をネットで調べるところから始めなければなりませんでしたが、周りの人からの協力を受けて、楽しみながら完成させることができました。これはsvg形式の画像ファイルを読み込ませると、その画像を一筆書きしてくれるので、完成した後は、直ちに好きな画像を突っ込み、喜びにふけっていました。
こういう風に、僕の「作りたい！」という単なる欲求を満たすために作ったものを「作品」として展示しているだけに過ぎないのですが、そうはいってもやはり、僕にそのように、作りたいという「情熱」を思い起こさせるだけの魅力が存在するわけで、その情熱を少しでも感じ取っていただきたいという所存でございます。2年も前に見たのが記憶の片隅に残っていたというのは、僕がその妙な動きに多少なりとも惹かれていたからでしょう。好奇心とはすこし違うようなこの妙な心の揺れ動き、皆さんは感じたことはないでしょうか。
大きな「情熱」との出会い 中学1年生の時に物理教室で、僕は、今でも自分に絶えることなく「情熱」を与え続けるモノと偶然にも出会いました。そしてそのモノというのがなんと、ソビエト社会主義共和国連邦国歌なのです。皆さんがこの告白についてどう思おうとも、構いません。しかし、僕のソ連国歌に対する「情熱」は疑いようのない事実です。僕は非常に困ったことに、いわゆるJ-POPでも洋楽でもなく、ソ連国歌を好きになってしまったのです(最近はみんなが聴くようなものも少しは聴くようになりましたが)。僕はこの歌を初めて聴いたとき、もちろん流れてくる歌詞の意味は全く知りませんでしたが、「感銘」という言葉で表しきれないようなナニカが僕を満たしていくような、そんな不思議な衝動を感じました。
それからというもの僕は、ソ連国歌の歌詞についていろいろ調べたり、ソ連に関連した情報を集めたりするにつれて、近現代の歴史的な流れや思想や知識を得ていったりと、ソ連の国歌が原動力になって、いろいろな物に首を突っ込んでいくことになりました。そしてソ連国歌とソ連の関係を知れば知るほど、賛成できない点も複数ある中、ソ連に対する魅力はそれらをはるかに上回っていきました。今持っている音楽に対する興味も、この国歌がなければ持たなかったかもしれません。どうして僕がこんなにソ連に魅了されているのか、その謎は僕でさえもいまだ探求中、整理中でありますが、なんとかしてソビエト連邦を僕の生活におけるコンテクストに位置づけ、ある程度言語化したいという個人的な思いで、「情熱」の一例として紹介させていただきます。
さて、当初僕はというと、ソビエト連邦に一種の理想像、理想の共同体像を重ね掛けていたことがあり、今となっては少々過激だったかなぁと思い返すのですが、このことがなければそんなにソ連のことを好きになっていなかったと思われます。ソビエト連邦は、すごくざっくりいうと、指導者層の荒廃、政治的、外交的な欠陥などにより、1991年12月25日の真夜中にとうとうソ連の最初で最後の大統領ゴルバチョフが自身の大統領辞任を表明し、解体するという形で、第一次世界大戦期のロシア革命やそれに続く内戦を経て1922年に高い理想を掲げて成立したその国は、その69年にもわたる激動の歴史に終止符を打ちました。僕は当時生まれておりませんが、とても衝撃的なことだっただろうことは容易に想像できます。
ここで僕が注目したいのは、その時に立ち会わせていた当時のソ連の国民です。人々がソビエト連邦という国に対する帰属意識を強く持っていたかどうかは定かではないですが、生まれ育った祖国が、かつては世界を席巻した超大国から徐々に衰退の一途をたどっていき、しまいには国が瓦解していくのを目の当たりにしたソビエトの国民はいったい何を思ったのでしょうか。当時の写真や動画に映る人々は祖国の衰退に対して逆らおうと奮闘していたけれど、無力にもそれは成功しませんでした。彼らがソ連崩壊の時に受けたショックというのはいったいどれほどのものだったのでしょうか。壮大な曲調でもあるけれど、どこか寂しげな感じもするその国歌によって、僕はこういった無力感に思いを馳せ、同情せざるを得ませんでした。そして、とあることで思い悩み、よりどころを求めた僕は、最近かつ最大の「共同体」の崩壊を自分のにおけるものと重ね、親近感を伴って想起したのでした。なんだか、歴史が、僕なんかよりもはるかに大きいショックを受けただろうソビエト連邦の国民一人一人が、僕の側に立って、応援し、励ましてくれているようなそのような妄念を感じてしまうのです。
ソ連国旗降納 かつてのソビエト連邦が、望ましい共同体であったかどうかは疑わしいですが、それでも、その応援してくれているような感覚は僕の辛い気持ちをいつも癒してくれました。それ以来ソ連国歌は基本の原動力として、僕に大きな影響を与えています。しかし、自分の考えがコミュニズムというよりむしろコミュニタリアニズムのほうに近そうですし、決してコミュニズムを称賛しているわけではないことは了承していただきたいです。
個々の「情熱」を咀嚼する 物理部にいると、様々な人からこういった「情熱」を感じ取ることができます(もちろんですが、ソ連国歌ではございません)。部員のそれぞれが、僕に、彼らの趣味だったり、興味のある分野の話や、取り組んでいることについての話をしてくれるのですが、彼らが話しているときのその表情や口調、それから身振り手振りなどから、意図せずとも「情熱」がにじみ出てくるんですよね。そして、その「情熱」の形というのは十人十色で、それぞれの人の持っている性格、視点、価値観、奥深さ等等を本当によく表現していることでしょう。また、同じ人によっても、時と場合によってその「情熱」がポジティブになったりネガティブになったりすることもありますし、そういう点でも、バラエティーに富んでいるといえるでしょう。自分にとってそれらは未知なものばかりであるので、それらを見たり、触ったり、聴いたりしてようやくそのわずかを味わうに至ります。ですが、そのわずかな経験を通して、「その人」の人となりをより深く知ることになるでしょうし、あるいは、それによって自分が新しく触発されるかもしれません。他人の「情熱」や、その「情熱」から経験した事柄のような、未知との遭遇の可能性にありふれている場というのが、この物理部であり、もっと広く言えばこの浅野の文化祭なんじゃないかなと個人的には思っております。
物理部風景 こんなにも時間のかかる「作品」、しかも、作らなくても生活に支障をきたさないだろう「作品」を莫大な労力をかけてわざわざ作り上げるというある種の狂気を持つためには、間違いなく、とてつもなく大きい原動力が必要でしょう。そして、その原動力がどこから来ているのか、僕たちは、それらの「作品」の制作者でありますから、もちろんその「作品」に対する説明や思い入れを、展示に来てもらった皆さんに紹介すると思います。が、その説明を受けただけで終わらせてほしくないのです。なぜかというと、僕たちの、「作品」に対する説明というのはあくまでも僕たち自身の一元的な見方による説明でしかないからです。その説明を受けるだけでは、必然的にその「作品」のもつ可能性は限定されてしまうでしょう。僕ら作品制作者の「情熱」と、「鑑賞者」の感じたものの交わる点、その二つを折衷したところにこそ、無限の可能性が秘められているのではないでしょうか。作る側→見る側という一方的な主体客体の関係を超えて、「鑑賞者」自らが主体意識を持って「作品」と触れ合い、その界面で二つが融合することによって、唯一無二性が生じるのではないでしょうか。そしてそれは文字通りかけがえのないものとなるのではないでしょうか。ぜひとも、この文化祭で何かしらそういうものを得てもらえたらなあと願うばかりです。
現実 僕はいまこうやって自分の文化祭の理想像を語らせてもらっているわけなんですけども、なかなか簡単にそういう形にできるわけでもありません。すなわち、自由に、自分の興味のあることをして、事が上手く運ぶわけではないということです。その大きな理由の一つは、文化祭での集客効果という観点から、そちらへ方向転換しづらいということにあります。やはり、文化祭において、部員たちの自作ゲームは子どもたちにとても人気で、PC班の集客に大きな貢献をしてきているのはこれまでの4年間にこの目で見てきました。かつて、ライフゲームを展示していたり、(今年もだと思いますが、)壁新聞も一応展示していたりするのですが、自作ゲームを展示している机のほうより人が集中するということなどほとんどなく、もしもゲームの展示がなくなったらPC班の展示はおそらく閑静とした場になってしまうことでしょう。たとえその物寂しさに耐えられたとしても、やがてお金の面で、持ちこたえられなくなるはずです。
物理部は他の部活と同様に、部費という形で学校から援助を受けて成り立っており、あくまで浅野の経済力ありきでの物理部なのです。そしてその部費は、学校に対する貢献や、部活の実績等の要素で上下する可能性が高いのです(実際に部費を大幅に減らされたことはないので完全なる真実とは言い難いです)。部員からの部費を一切徴収していない上、部員数が多く、このお金が少ないと、パソコンが足りなくなったり、電工の備品を購入できなかったり、いろいろと不自由が生まれてしまいます。ゆえに、文化祭で、AsanoTheBestなるものでなるべく上位に入り学校への貢献を可視化し、なるべく多くの部費をいただかないと物理部そのものが崩壊しかねません。ですが、自作ゲームの力を借りずに文化祭での人気を保ち続けるのは考えづらいですし、部費が少ない状態で部活動を続けていくということも困難でしょう。すなわち、この成果主義的なシステムから逃れる方法は今の状態では到底考えられないのが現実だということです。
ここまで言っておいて何も手だてがないのか、とお思いになるかもしれませんが、まあ、実際現時点で生徒にできることはほとんどないでしょう。このような場で、あまり理想をかましすぎても結局空回りして終わりという、歴史の二の舞三の舞を演じてまうだけなので、ここはある程度譲歩するのが好手と言えるでしょう。しかし、完全に理想を諦めてはいけません。理想と現実の狭間で、理想を捨てずに、現実に抗い続け、止揚した先にある自由の可能性を信じて奮闘するのです。理想から出発した「情熱」を現実とうまく融け合わせ、このシステムの中で運用可能な形にしていくことこそが、最善の解決方法ではないでしょうか。
まとめ 時と場合によって、自身の心を揺さぶったものが受け入れられないことがあります。例えば、僕が先ほど例に挙げた「情熱」のことを他人に話したとき、はねつけられるということもまあ何回かありました。やはり現実は、自己の理解をすり抜け、自己の思い通りにならず、無限に連鎖する否定性を持っていると僕は考えます。ゆえに、「現実」というのは往々にして、「理想」そして「情熱」をも否定してくるものです。そこで僕たちはこのアンチテーゼとしての「現実」に屈するべきではないでしょう。自身のもつ「情熱」を、そしてそれが存在するという揺るぎない事実を強く根拠にもって、新たな「総合」を生み出していくべきではないでしょうか。おそらくその作業には少なからぬ苦痛や困難が立ちはだかっていると思います。ただ、その先には、自身と他人が融合した、ユニークなものが待っているはずです。ぜひそれを求めていただきたいですし、また、自分もそれを探求していきたいと思っております。きっと、歴史上で同じように奮闘してきた人々も寄り添ってくれていることでしょう。
おわりに＋スペシャルサンクス 最後まで読んでいただき本当にありがとうございます。内容のほうはいかがでしたか。 物理部のことに多少触れながら、僕の個人的な考えをエッセイ風に書くのは僕にとってあまりにも難しすぎて、これを書きながら何度も、無謀な挑戦をしたもんだなぁ、と思いました。それぞれで、言いたいことが似通っている部分もあるはずなのですが、僕が思うに、なんだか趣旨が若干曖昧で、一貫性のない文章になってしまいました。ともあれ、物理部の文化祭展示に来ていただいて、かしこくもこの部誌をとっていただいた方々に、これを読んで何かご自身の中で少しでも変わったことがあれば、僕は非常に嬉しい限りです。
ちなみにこの部誌は「自分自身」を一番の対象読者として想定しながら書きました。上にも少々書きましたが、僕のソ連に対するこの「情熱」を渾沌としたものから少しでも秩序づけたくて書いたというのが大きいです。なので、内容が個人的すぎたり、わかりにくかったり(わざと濁している箇所もございますが)、論理的根拠に欠ける点があったと思いますがお許しください。
最後に、多くの時間を一緒に過ごした物理部員のみなさん、本当にありがとうございました。特に、同学年の方々には、特別に感謝し申し上げます。そして、これからもぜひよろしくお願いします。
参考文献 Wikipedia-ソ連崩壊 https://ja.wikipedia.org/wiki/ソビエト連邦の崩壊　10月2日アクセス Wikipedia-エマニュエル・レヴィナス　https://ja.wikipedia.org/wiki/エマニュエル・レヴィナス　10月6日アクセス ソ連国旗降納の画像元　https://www.rferl.org/a/1830507.html　10月6日アクセス</description></item></channel></rss>